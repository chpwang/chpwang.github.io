<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++ 语言入门</title>
      <link href="/2024/04/27/cpp-basics/"/>
      <url>/2024/04/27/cpp-basics/</url>
      
        <content type="html"><![CDATA[<p>在理解 Rust 内存管理的本质之后（参见<a href="/2024/04/22/rust-basics/"> Rust 入门</a> ），再来了解一下 <a href="https://en.wikipedia.org/wiki/C%2B%2B" target="_blank" rel="noopener">C++ 语言</a>和它的内存管理。这样和 Rust 对比一下，就能更加理解 Rust 内存管理方式和特点。进而更好地使用 C++ 进行编程。</p><p>如果从具有<a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)" target="_blank" rel="noopener">垃圾回收（Garbage Collection）</a>的语言出发来类比和理解，可能到后来你就始终弄不明白 C++ 这样的语言到底要怎么写代码。</p><p>当年 Ian 刚开始学计算机是从 <a href="https://en.wikipedia.org/wiki/Pascal_(programming_language)" target="_blank" rel="noopener">Pascal</a> 语言开始的。之后马上又学了 <a href="https://en.wikipedia.org/wiki/C_(programming_language)" target="_blank" rel="noopener">C 语言</a> 。因为传言 C 语言比 Pascal 好。而 C 语言的内存管理都是手动的。所以经常会出现一些很奇怪的问题。但是通过学习 Rust 或者 C++ ，你就能从本质上理解用 C 语言怎么会遇到那么稀奇古怪的一些问题：要么你内存泄漏了，要么你就是出现一些内存错误。比如说有一个地方的值莫名其妙地被人改了，你就不知道哪里的代码在改那个内存。因为内存管理弄错了之后，你的指针就有可能指向它不该指的地方。</p><p>Rust 语言会强制你去思考这些内存问题，所以你就被迫就要把这些事情按照它的规则做对。然后 Rust 的内存管理思路大致上是对的。就是它强制你有个 <a href="https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html" target="_blank" rel="noopener">ownership</a> 。这样通常情况下只有一个变量可以指向这个对象。然后如果你需要共享的话，你就得自己显式地使用那个 <a href="https://doc.rust-lang.org/book/ch15-04-rc.html" target="_blank" rel="noopener">Rc</a>（引用计数）的方式。习惯了 Rust 之后再去写 C 语言或者 C++ ，就不会那么容易有问题了——当然，你还是可能会犯错的。</p><p>C++ 的 <a href="https://learn.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=msvc-170" target="_blank" rel="noopener">Smart Pointer</a> 设计，其使用的方式稍微改一点，就能实现和 Rust 同样的目标，而不太增加思维负担。不过 C++ 有一个<strong>讨厌</strong>的地方是，它的出错信息太难以阅读了。写错代码之后的报错信息令人困惑，不知哪里错了。因为它的 <a href="https://learn.microsoft.com/en-us/cpp/cpp/smart-pointers-modern-cpp?view=msvc-170" target="_blank" rel="noopener">Smart Pointer</a> 这些东西是靠 <a href="https://en.wikipedia.org/wiki/Template_(C%2B%2B)" target="_blank" rel="noopener">Template</a> 和<a href="https://learn.microsoft.com/en-us/cpp/preprocessor/macros-c-cpp?view=msvc-170" target="_blank" rel="noopener">宏</a>展开之后实现出来的，它并不是 C++ 语言直接实现了这些东西。所以你一旦出点错，它是展开了一堆内部实现的代码，最后给你说展开之后的代码哪里错了。但展开之后的代码跟你写的代码完全是两码事了。这就是 C++ 的一个问题。</p><p>在熟悉 C++ 之后，可以进一步思考一下 C++ 和 Rust 关于内存做法的各自优缺点。</p><hr><h3 id="C-编程环境设置"><a href="#C-编程环境设置" class="headerlink" title="C++ 编程环境设置"></a>C++ 编程环境设置</h3><p>首推自然是使用友好功能强大的 <a href="https://www.jetbrains.com/clion/" target="_blank" rel="noopener">CLion</a> 作为 <strong>C++</strong> 的 <strong>IDE</strong>。不过这是收费的软件，30 天免费试用期过后就需要付费订阅。适合需要长期使用 C++ 的玩家们。</p><p>作为入门学习体验，也可以退而求其次继续选择免费的 <a href="https://code.visualstudio.com" target="_blank" rel="noopener">VS Code</a> 。此时要先安装 <a href="https://gcc.gnu.org" target="_blank" rel="noopener">GNU C++</a> 或者 <a href="https://clang.llvm.org" target="_blank" rel="noopener">Clang C++</a> 的编译器。对于 MacOS 的用户，推荐用 Clang ，因为它包含在 Xcode 命令行工具里，安装非常方便。</p><pre><code class="lang-bash">## 安装 Command Line Tools - MacOS 编程软件 Xcode 的命令行工具$ xcode-select --install## 完成后可以使用一下命令查看版本说明安装成功了$ clang --versionApple clang version 14.0.0 (clang-1400.0.29.202)Target: arm64-apple-darwin21.6.0Thread model: posixInstalledDir: /Library/Developer/CommandLineTools/usr/bin</code></pre><p>安装完 Clang 之后，在 VS Code 中新建后缀为 <code>.cpp</code> 的文件比如 <code>demo.cpp</code> 就能开始编程了：</p><pre><code class="lang-c++">#include &lt;iostream&gt;// C++ 的 main 函数一定要返回 intint main(){  std::cout &lt;&lt; &quot;Hello C++&quot; ;  return 0;}</code></pre><p>关于 <strong>VS Code</strong> 的安装、设置和使用可以参考<a href="/2018/05/25/vscode-intro/">上手 Visual Studio Code</a> 。</p><p>一些方便的设置：</p><ul><li><p><strong>设置花括号另起一行</strong>：<code>Settings</code> -&gt; 搜索 <code>C_Cpp.clang_format_fallbackStyle</code><br>在输入框处填上 <code>&quot;Visual Studio&quot;</code> ，也就是使用 <strong>VS</strong> 的格式<br>这样在编辑完代码后，就可以使用快捷键 <code>option</code> + <code>shift</code> + <code>F</code> 来格式化代码，让花括号另起一行<br>最开始 <strong>C</strong> 语言的时候大家花括号都是写在下一行的，自从有了 <strong>Java</strong> ，大家才开始写埃及括号 Egyptian brackets ，然后代码就挨得太近了<br>要注意的是，该格式化也会把 <code>int* p = ...</code> 改成 <code>int *p = ...</code> ，但 <code>int*</code> 其实是一个「类型」，代表<strong>整数指针</strong>。写成 <code>int *p</code> 会和解引用计算 <code>*p</code> 混淆。正确写法还是要 <code>int* p</code> 表示变量 <strong>p</strong> 是整数指针类型；<br>你如果想抬杠把它理解成先计算 <code>*p</code> ，然后再把计算结果标记为 <code>int</code> 类型，那逻辑就绕了。而且类型标记是标记变量和函数的，不是标记表达式的值的；</p></li><li><p><a href="https://code.visualstudio.com" target="_blank" rel="noopener">VS Code</a> 默认用的是 <code>g++</code> 来编译，最好能加上一个参数 <code>-std=c++17</code> ，这样就能使用 <a href="https://en.wikipedia.org/wiki/C%2B%2B17" target="_blank" rel="noopener">C++17</a> 标准来编译。这意味着你的代码可以用一些新的写法和功能，比如使用 <code>std::make_unique</code> 函数等。<br>参考<a href="/2018/05/25/vscode-intro/">上手 Visual Studio Code</a> 打开配置文件 <em>settings.jason</em> ：<br><code>Extensions Settings</code> -&gt; <code>Code-runner:</code> <strong><code>Executor Map</code></strong> -&gt; <code>Edit in settings.jason</code><br>在 <strong>cpp</strong> 那行的 <code>g++</code> 后面编辑添加 <code>std=c++17</code> 保存即可。编辑完成后这行的文本如下：</p><pre><code class="lang-jason">&quot;cpp&quot;: &quot;cd $dir &amp;&amp; g++ -std=c++17 $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,</code></pre></li></ul><hr><h3 id="开始编程"><a href="#开始编程" class="headerlink" title="开始编程"></a>开始编程</h3><p>C++ 和 Java 非常相似，对熟悉 Java 的玩家来说，开始的这些代码和概念可以快速通过：</p><pre><code class="lang-c++">#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;memory&gt;#include &lt;vector&gt;#include &lt;map&gt;#include &lt;stdexcept&gt;#include &lt;cmath&gt; // &lt;cmath&gt; 库包含开平方的函数 sqrt// 如果没有 using namespace std; 那 cout 和 endl 等就都要加上 std::// 这里我们只有一个 cout ，所以可以不用担心可能导致的命名冲突using namespace std;// C++ 不允许你在函数内部定义函数，编译不通过，所以 fact 定义到外面// 尽管有编译过程，但是函数要定义在调用的前面才能被识别，否则就会报错 undeclared// fact 定义在 basic_test 之前，basic_test 内部才能调用它int fact(int n){  if (n == 0)  {    return 1;  }  else  {    return n * fact(n - 1);  }}// int sqrt(int n) {//   return n * n;// }// ###########################################################//                            基本语法// ###########################################################void basic_test(){  // 如果没有上面的 using namespace std; 那输出的 cout 和换行 endl 等等就都要加上 std:: 这个前缀  // std::cout &lt;&lt; &quot;---------------- basic_test ----------------&quot; &lt;&lt; std::endl;  cout &lt;&lt; &quot;---------------- basic_test ----------------&quot; &lt;&lt; endl;  cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; endl;  int x = 2 * 3;  cout &lt;&lt; &quot;x = &quot; &lt;&lt; x &lt;&lt; endl;  int y = 1 + x;  cout &lt;&lt; &quot;y = &quot; &lt;&lt; y &lt;&lt; endl;  const int z = 5; // const 代表常数，不能改动  cout &lt;&lt; &quot;z = &quot; &lt;&lt; z &lt;&lt; endl;  // z = 10; // Error: assignment of read-only variable &#39;z&#39;  float a = 3.14;  cout &lt;&lt; &quot;a(float) = &quot; &lt;&lt; a &lt;&lt; endl;  double b = 3.14;  cout &lt;&lt; &quot;b(double) = &quot; &lt;&lt; b &lt;&lt; endl;  char c = &#39;A&#39;;  cout &lt;&lt; &quot;c = &quot; &lt;&lt; c &lt;&lt; endl;  bool d = true;  cout &lt;&lt; &quot;d = &quot; &lt;&lt; d &lt;&lt; endl;  string e = &quot;Hello&quot;; // string 类型是小写开头的 Java 是大写 String  cout &lt;&lt; &quot;e = &quot; &lt;&lt; e &lt;&lt; endl;  cout &lt;&lt; e + &quot; World!&quot; &lt;&lt; endl;  e.append(&quot; World!&quot;);  cout &lt;&lt; &quot;e = &quot; &lt;&lt; e &lt;&lt; endl;  cout &lt;&lt; sqrt(25) &lt;&lt; endl; // sqrt function is defined in the cmath header file.  cout &lt;&lt; fact(5) &lt;&lt; endl;  string arr[] = {&quot;Hello&quot;, &quot;World&quot;, &quot;Good&quot;, &quot;Morning&quot;, &quot;Everyone&quot;};  // C++ 的数组没有 length 函数  // sizeof(arr) 得到整个数组占用多少内存，用字节计算，sizeof(string) 则得到 string 对象的大小  // 两者除一下，计算出数组的长度 length  cout &lt;&lt; &quot;arr length = &quot; &lt;&lt; sizeof(arr) / sizeof(string) &lt;&lt; endl;  for (int i = 0; i &lt; 5; i++)  {    cout &lt;&lt; &quot;for: &quot; + arr[i] &lt;&lt; endl;  }  arr[3] = &quot;Evening&quot;;  for (string s : arr)  {    cout &lt;&lt; &quot;for-each: &quot; + s &lt;&lt; endl;  }  int arr2[] = {1, 2, 3, 4, 5};  cout &lt;&lt; &quot;arr2 length = &quot; &lt;&lt; sizeof(arr2) / sizeof(int) &lt;&lt; endl;  int total = 0;  for (int i = 0; i &lt; 5; i++)  {    total += arr2[i];  }  cout &lt;&lt; &quot;Total = &quot; &lt;&lt; total &lt;&lt; endl;  struct User // struct 可以在函数体里定义  {    string name;    int age;    // 如果 struct 定义函数的话，这个函数是单独存放的    // 不算 struct 里的 field    // 比如你这里定义了一个 printUser() 函数，然后 unique_ptr&lt;User&gt; u1    // 然后 move 它：unique_ptr&lt;User&gt; u2 move(u1)    // 按理说此时 u1 被清零了（地址为 0），但 u1.printUser() 仍然能调用    // 除了 struct 外 class 的行为也是如此    // 思考：struct 和 class 有什么区别？哪些情况下时候分别用哪个？    // class 中，默认的成员访问级别是 private，而在 struct 中，默认的成员访问级别是 public；    // class 常用于定义复杂行为和数据封装的对象，如包含多种类方法；而 struct 则用于轻量级的数据结构，如坐标；  }; // C++ 这里要加一个分号  // User u1 = {&quot;John&quot;, 25};  // User u1 = {name : &quot;John&quot;, age : 25}; // 加上 key 后更明确（这样写和其他语言像一点）  User u1 = {.name = &quot;John&quot;, .age = 25};  // C++ 编译器推荐用这种 .name 的写法  cout &lt;&lt; &quot;u1.name = &quot; &lt;&lt; u1.name &lt;&lt; endl;  cout &lt;&lt; &quot;u1.age = &quot; &lt;&lt; u1.age &lt;&lt; endl;  // 匿名的 struct ，直接作为变量的类型  struct  {    string name;    int age;  } u2 = {&quot;John-2&quot;, 25};  cout &lt;&lt; &quot;u2.name = &quot; &lt;&lt; u2.name &lt;&lt; endl;  cout &lt;&lt; &quot;u2.age = &quot; &lt;&lt; u2.age &lt;&lt; endl;}// ###########################################################//                           指针和地址// ###########################################################void pointer_test(){  cout &lt;&lt; &quot;---------------- pointer_test ----------------&quot; &lt;&lt; endl;  // 直接定义的整数 10 被 C++ 放在栈上 - 和 Java 不同的是，C++ 的「堆」和「栈」分得很清楚的  // x 的数据 2 在 stack 上  int x = 2;  cout &lt;&lt; &quot;x = &quot; &lt;&lt; x &lt;&lt; endl; // 直接可以打印出 x 的值 2   cout &lt;&lt; &quot;&amp;x = &quot; &lt;&lt; &amp;x &lt;&lt; endl; // 打印 x 的地址：符号 &amp; 代表取得该变量的地址  // 这个定义，数据 int(10) 在 heap 上，指针变量 p 则在 stack 上  // int* 的这个 * 号是 int* 这个类型的一部分，下面的 *p 的 * 号则是解引用操作符，两者不一样  // Rust 的 * 只是用来 move 改变 ownership 的，虽然也叫 dereference 但和这的 *p 本质不一样  // C++ 里，看到关键词 new 就要知道它肯定在 heap（堆）上了，因为 new 就是在 heap 上分配内存的操作  int* p = new int(10);  // 直接打印 p 会打印出 p 中数据的内存地址，即 10 存放在作为 heap 的内存的地址（0x开头的16进制数）  cout &lt;&lt; &quot;p = &quot; &lt;&lt; p &lt;&lt; endl;  cout &lt;&lt; &quot;*p = &quot; &lt;&lt; *p &lt;&lt; endl;  // int* 是一个「类型」，而 *p 表示「解引用 p」，* 在这两者中的意思是不同的  // 同理，int** 也是一个「类型」，所以虽然 int **q 和 int ** q 也能编译通过，  // 但建议写 int** q ，这样就能反应出 int** 是一个类型标记，这也是它的本质  // 使用 VS Code 格式化代码会使得 int** q 被改写为 int **q ，而这样写会和 **q 混淆  // &amp;p 是取得 p 的地址，和 Rust 中作为借用（borrow）的 &amp; 不同  int** q = &amp;p;                // q 本身在 stack 上，指向 stack 上的 p 的地址 &amp;p  cout &lt;&lt; &quot;q = &quot; &lt;&lt; q &lt;&lt; endl; // 可发现 &amp;p 和 &amp;x 值很接近，因为 p 和 x 在 stack（栈） 上是相邻的  cout &lt;&lt; &quot;*q = &quot; &lt;&lt; *q &lt;&lt; endl;  cout &lt;&lt; &quot;**q = &quot; &lt;&lt; **q &lt;&lt; endl;  int*** r = &amp;q;  cout &lt;&lt; &quot;r = &quot; &lt;&lt; r &lt;&lt; endl;  cout &lt;&lt; &quot;*r = &quot; &lt;&lt; *r &lt;&lt; endl;  cout &lt;&lt; &quot;**r = &quot; &lt;&lt; **r &lt;&lt; endl;  cout &lt;&lt; &quot;***r = &quot; &lt;&lt; ***r &lt;&lt; endl;  int**** s = &amp;r;  cout &lt;&lt; &quot;s = &quot; &lt;&lt; s &lt;&lt; endl;  // int arr[5] = {3, 5, 7, 9, 11};  // 这里 p2 的类型为什么是 int* 而不是 int[]* ？为什么是 int 的指针类型而不是数组的指针类型？  // 因为数组里所有元素是挨在一起相邻储存的，故知道了第一个元素的地址，就知道整个数组的所有元素的地址  // p2 会指向向数组的第一个数据：3 ，即 *p2 = 3  int* p2 = new int[5] {3, 5, 7, 9, 11};  // 注意，C++11 之前的标准不支持直接使用列表初始化数组  cout &lt;&lt; &quot;p2 = &quot; &lt;&lt; p2 &lt;&lt; endl;  cout &lt;&lt; &quot;*p2 = &quot; &lt;&lt; *p2 &lt;&lt; endl;  cout &lt;&lt; &quot;p2 + 1 = &quot; &lt;&lt; p2 + 1 &lt;&lt; endl;       // 数组第二元素 5 的地址  cout &lt;&lt; &quot;*(p2 + 1) = &quot; &lt;&lt; *(p2 + 1) &lt;&lt; endl; // 数组第二元素的值，即 5  int** q2 = &amp;p2;  cout &lt;&lt; &quot;q2 = &quot; &lt;&lt; q2 &lt;&lt; endl;}void address_test(){  cout &lt;&lt; &quot;---------------- address_test ----------------&quot; &lt;&lt; endl;  int i = 10;  string s = &quot;Hello&quot;;  int* pi = new int(10);  // i 和 s 的地址是挨在一块的，都在 栈（stack） 上  // pi 则在堆（heap）上，打印出的地址上可以看到距离 i 和 s 较远  cout &lt;&lt; &quot;address of i = &quot; &lt;&lt; &amp;i &lt;&lt; endl;  // stack  cout &lt;&lt; &quot;address of s = &quot; &lt;&lt; &amp;s &lt;&lt; endl;  // stack  cout &lt;&lt; &quot;pi = &quot; &lt;&lt; pi &lt;&lt; endl;            // heap}// ###########################################################//                            传递引用// ###########################################################void pass_by_reference(int&amp; x)  // x 会成为传入参数的别名{  cout &lt;&lt; &quot;pass_by_reference: x = &quot; &lt;&lt; x &lt;&lt; endl;  cout &lt;&lt; &quot;address of x: &quot; &lt;&lt; &amp;x &lt;&lt; endl;  x += 1;   // 修改 x 就是修改传入的变量}void pass_by_reference_const(const int&amp; x){  cout &lt;&lt; &quot;pass_by_reference_const: x = &quot; &lt;&lt; x &lt;&lt; endl;  cout &lt;&lt; &quot;pass_by_reference_const: address of x: &quot; &lt;&lt; &amp;x &lt;&lt; endl;}void reference_test(){  cout &lt;&lt; &quot;---------------- reference_test ----------------&quot; &lt;&lt; endl;  int x = 10;  int&amp; y = x;  // 同上文的理，int&amp; 是一个类型，&amp; 是 int&amp; 类型的一部分  cout &lt;&lt; &quot;x = &quot; &lt;&lt; x &lt;&lt; endl;  cout &lt;&lt; &quot;y = &quot; &lt;&lt; y &lt;&lt; endl;  x = 20; // 给 x 赋值 20 ，y 也会改变  cout &lt;&lt; &quot;x = &quot; &lt;&lt; x &lt;&lt; endl;  cout &lt;&lt; &quot;y = &quot; &lt;&lt; y &lt;&lt; endl;  y = 30; // 给 y 赋值 20 ，x 也会改变  cout &lt;&lt; &quot;x = &quot; &lt;&lt; x &lt;&lt; endl;  cout &lt;&lt; &quot;y = &quot; &lt;&lt; y &lt;&lt; endl;  // &amp;x and &amp;y are the same - x 和 y 的地址相同  // meaning: x and y is the same variable - //可看出 x 和 y 就是同一个东西  // y 和 x 的地址一样，说明 stack 上没有分配一个空间位置给 y ，y 只是 x 的一个别名  // 之后会看到 y 这种东西有什么用 - .borrow_mut()  cout &lt;&lt; &quot;&amp;x = &quot; &lt;&lt; &amp;x &lt;&lt; endl;  cout &lt;&lt; &quot;&amp;y = &quot; &lt;&lt; &amp;y &lt;&lt; endl;  // // Can&#39;t take non-const reference of temporary  // // 如果这个能通过，那 z 就是 x + 1 的别名，那 z = 100 这样的赋值就能写  // // 但 z = 100 相当于对 x + 1 赋值，语义上就很奇怪的，所以不能这么写  // int&amp; z = x + 1;  // 但是你可以有下面这样一个引用，因为是 const 所以你后续不能对 z 赋值了：  const int&amp; z = x + 1;  cout &lt;&lt; &quot;z = &quot; &lt;&lt; z &lt;&lt; endl;  int a = 12;  cout &lt;&lt; &quot;&amp;a = &quot; &lt;&lt; &amp;a &lt;&lt; endl;  cout &lt;&lt; &quot;before a = &quot; &lt;&lt; a &lt;&lt; endl;  pass_by_reference(a);  cout &lt;&lt; &quot;after a = &quot; &lt;&lt; a &lt;&lt; endl;  // Doesn&#39;t work because pass_by_reference takes a non-const int&amp;  // 原理和上面的 const int&amp; z = x + 1; 一样  // pass_by_reference(x + 1);  pass_by_reference_const(x + 1);  // 参数类型是 const int&amp; ，代表无法更改，所以可允许  // pass_by_reference 和 pass_by_reference_const 这种用法是 C 语言和 C++ 特有的}// ###########################################################//                            数组// ###########################################################// C++ 的这个类型语法是比较诡异的，数组的类型要写成 int arr[] ，应该是历史遗留问题// Java 中的数组就比较有规律 int[] arr ，类型是 int[] ，变量名是 arr// 且这里数组传递的是 reference ，但又不像 pass_by_reference 那样写成 int&amp; arr[]void pass_array(int arr[])  {  for (int i = 0; i &lt; 5; i++)   {    cout &lt;&lt; &quot;pass_array: &quot; &lt;&lt; arr[i] &lt;&lt; endl;  }  arr[0] = 100;}void pass_array_test(){  cout &lt;&lt; &quot;---------------- pass_array_test ----------------&quot; &lt;&lt; endl;  // 在栈（stack）上定义一个 array  int arr[] = {1, 2, 3, 4, 5}; // stack 上  for (int i = 0; i &lt; sizeof(arr)/sizeof(int); i++)   {    cout &lt;&lt; &quot;before pass_array: &quot; &lt;&lt; arr[i] &lt;&lt; endl;  }  pass_array(arr);  // a[0] 的值在函数 pass_array 中被改变了，说明数组传递进去的时候不是复制一份  // 而是 arr[] 本身直接进去（很上面的 pass_by_reference 行为相同）  for (int i = 0; i &lt; sizeof(arr)/sizeof(int); i++)   {    cout &lt;&lt; &quot;after pass_array: &quot; &lt;&lt; arr[i] &lt;&lt; endl;  }}// ###########################################################//                            面向对象// ###########################################################class Animal{  // 外部能用的成员和方法都写到 public: 后面  // 不像 Java 那样每个都要写一次 public  public:  // virtual 类似 Java 的 abstract class  // 强制继承的子类定义 speak 方法  // C++ 中得写成这中奇怪的样子  // 如果不加 virtual ，那子类就无法 override 这个 speak 方法了  // 如果不写 = 0 ，就无法强制子类定义 speak 函数  virtual void speak() = 0;  };// 要在 Dog 里能访问到 Animal 里的成员，就要写上 publicclass Dog: public Animal{  public:  // 重载 speak 方法，更严谨的做法是加上 override   // 类似 Java 的 @Override 标记  void speak() override  {    cout &lt;&lt; &quot;汪！&quot; &lt;&lt; endl;  }};class Cat: public Animal{  public:  // override 不写也行，但写的话编译器会检查父类的内容  // 如果父类没有 speak ，那就会编译不通过（要重载但父类却没有）  void speak()  {    cout &lt;&lt; &quot;喵！&quot; &lt;&lt; endl;  }};void inheritance_test(){  cout &lt;&lt; &quot;---------------- inheritance_test ----------------&quot; &lt;&lt; endl;  // 栈（stack）上面定义了狗 d 和猫 c  // Dog 和 Cat 的实例（instance）在 stack 上  Dog d; // stack  Cat c; // stack  int i = 9;  // stack  // 定义在 heap 上的 Dog  Dog* d2 = new Dog();  // heap allocation  // 不能这么写，因为 new Dog() 在堆上，一定要个指针来指向它，而不能用普通的变量来存放它  // Dog d2 = new Dog(); // 编译不通过  // 打印变量们的地址，可以看到 c ，d 和 i 离得很近，都在 stack 上  // 而 d2 则是在 heap 上  // 注意，这里容易有歧义  // 这里说的在 stack 上或者在 heap 上指的是数据内容，即 Dog 和 Cat 的实例（instance）  // d , c , i , d2 这些变量本身都是在 stack 上的  // 然后以 d 为例，d 的内容是一个 Dog 实例，也就是数据本身，所以此时数据本身在 stack  // 但是 d2 的内容不是一个 Dog 实例，它的内容是 heap 上的地址  cout &lt;&lt; &quot;dog address: &quot; &lt;&lt; &amp;d &lt;&lt; endl;  cout &lt;&lt; &quot;cat address: &quot; &lt;&lt; &amp;c &lt;&lt; endl;  cout &lt;&lt; &quot;i address: &quot; &lt;&lt; &amp;i &lt;&lt; endl;  cout &lt;&lt; &quot;d2 address: &quot; &lt;&lt; d2 &lt;&lt; endl; // heap 上的地址  d.speak();  c.speak();  (*d2).speak(); // d2 是一个指针，先解引用得到指向的 Dog 实例，再调用 speak 方法  d2-&gt;speak();  // C++ 语法里还可以用箭头来访问指针指向的对象里的成员（方法）  // 综上，同一个 Class 可以有 2 种不同的分配方法：栈（stack）上，或者堆（heap）上  // 用一个 Animal 指针 a1 指向 d  Animal* a1 = &amp;d;  // Animal a1 = d; // 编译不通过 - 为什么不能这么写？  cout &lt;&lt; &quot;Animal pointer to dog: &quot; &lt;&lt; endl;  cout &lt;&lt; &quot;animal address: &quot; &lt;&lt; a1 &lt;&lt; endl;  a1-&gt;speak();  // 和 Java 不一样的是，如果上面不是用指针，而是 Animal a = d; 就编译不通过  // 在 C++ 里「用一个父类的变量指向一个子类」叫做多态，你必须要用指针，不能直接用这个变量  // 也就是类型必须是 Animal* 。其实 Java 中父类指向子类也是类似。  // 在 Java 里你写 Animal a 的时候，a 其实是一个指针  // Java 里你可以写 Dog d = new Dog(); 然后这个 new Dog() 实际上是在堆（heap）上  // 所以 Java 的这个 d 实际上是一个指针，但 Java 的语法不要求写 Dog* 表示指针  // 同样的表达在 C++ 中要写成：Dog* d = new Dog();  // 根据上面 reference_test 函数体里的写法，这里还可以这样写  Animal&amp; a2 = d;  cout &lt;&lt; &quot;Animal pointer to dog: &quot; &lt;&lt; endl;  cout &lt;&lt; &quot;animal address: &quot; &lt;&lt; &amp;a2 &lt;&lt; endl;  a2.speak();  // 变量 a1 指向猫  a1 = &amp;c;  cout &lt;&lt; &quot;Animal pointer to cat: &quot; &lt;&lt; endl;  cout &lt;&lt; &quot;animal address: &quot; &lt;&lt; a1 &lt;&lt; endl;  a1-&gt;speak();}// ###########################################################//                        模板（Template）// ###########################################################// template 模板类似 Java 的泛型，使得同一段代码可以适应不同的数据类型，从而增加代码的复用性和灵活性template &lt;typename T&gt;   // T 是类型参数class Auto_ptr         // 这里用 template 功能创建智能指针 Auto_ptr 实现在生命周期结束后自动释放{  T* m_ptr;public:  // Pass in a pointer to &quot;own&quot; via the constructor  Auto_ptr(T* ptr=nullptr)  {    this-&gt;m_ptr = ptr;  }  // Copy constructor to handle ownership transfer  Auto_ptr(Auto_ptr &amp;a)  {    this-&gt;m_ptr = a.m_ptr;    a.m_ptr = nullptr;    cout &lt;&lt; &quot;ownership transfer (copy constructor)&quot; &lt;&lt; endl;  }  Auto_ptr&amp; operator = (Auto_ptr &amp;a)  {    if (&amp;a == this) {      return *this;    }    delete m_ptr;    m_ptr = a.m_ptr;    a.m_ptr = nullptr;    cout &lt;&lt; &quot;ownership transfer (assignment)&quot; &lt;&lt; endl;    return *this;  }  // The destructor will make sure it gets deallocated  ~Auto_ptr()  {    delete m_ptr;  }  // Overload dereference and operator-&gt; so we can use Auto_ptr like m_ptr.  T&amp; operator * () const { return *m_ptr; }  T* operator -&gt; () const { return m_ptr; }};// A sample class to prove the above worksclass Resource{public:  int x = 42;    Resource() { cout &lt;&lt; &quot;Resource acquired\n&quot;; }    ~Resource() { cout &lt;&lt; &quot;Resource destroyed\n&quot;; }    void sayHi() { cout &lt;&lt; &quot;Hi &quot; &lt;&lt; x &lt;&lt; endl; }};void pass_by_value(Auto_ptr&lt;Resource&gt; ptr){  cout &lt;&lt; &quot;pass_by_value&quot; &lt;&lt; endl;}void smart_ptr_test(){  cout &lt;&lt; &quot;---------------- smart_ptr_test ----------------&quot; &lt;&lt; endl;  Auto_ptr&lt;Resource&gt; r1(new Resource());  r1-&gt;sayHi();  // Auto_ptr&lt;Resource&gt; r2(r1);  // pass_by_value(r1);  Auto_ptr&lt;Resource&gt; r2;  r2 = r1;  r2-&gt;sayHi();}int** pointer_of_pointer(){  int** p = nullptr;  {    int* x = new int(10);    p = &amp;x;  }  cout &lt;&lt; &quot;inside function: p = &quot; &lt;&lt; p &lt;&lt; endl;  cout &lt;&lt; &quot;inside function: *p = &quot; &lt;&lt; *p &lt;&lt; endl;  cout &lt;&lt; &quot;inside function: **p = &quot; &lt;&lt; **p &lt;&lt; endl;  return p;}void pointer_of_pointer_test(){  cout &lt;&lt; &quot;---------------- pointer_of_pointer_test ----------------&quot; &lt;&lt; endl;  int** p = pointer_of_pointer();  cout &lt;&lt; &quot;outside function: p = &quot; &lt;&lt; p &lt;&lt; endl;  cout &lt;&lt; &quot;outside function: *p = &quot; &lt;&lt; *p &lt;&lt; endl;  cout &lt;&lt; &quot;outside function: **p = &quot; &lt;&lt; **p &lt;&lt; endl;  // wrong result}// ###########################################################//                  智能指针之 Unique Pointer// ###########################################################// 智能指针的“智能”体现在于它们在生命周期结束时自动释放资源，避免手动管理内存带来的问题，提高代码的安全性和可靠性// 普通指针需要手动释放内存 delete rawPtr; 而智能指针会在不再需要使用时自动释放分配的内存，从而避免了内存泄漏的风险// 智能指针还会在底层实现一些机制，如引用计数或所有权管理，以确保内存安全性，避免悬垂指针或重复释放内存等问题int* pass_pointer(int* p){  cout &lt;&lt; &quot;----- pass_pointer(int* p) -----&quot; &lt;&lt; endl;  cout &lt;&lt; &quot;inside function: p = &quot; &lt;&lt; p &lt;&lt; endl;  cout &lt;&lt; &quot;inside function: *p = &quot; &lt;&lt; *p &lt;&lt; endl;  cout &lt;&lt; &quot;----- outside pass_pointer -----&quot; &lt;&lt; endl;  return p;}struct IntOwner{public:  unique_ptr&lt;int&gt; p;  ~IntOwner()  {    // 符号 ~ 标记的函数是析构函数（Destructor）    // 它一个特殊的成员函数，它在对象生命周期结束时被调用    // 这里是打印输出字符串 &quot;IntOwner destructor&quot;    cout &lt;&lt; &quot;IntOwner destructor&quot; &lt;&lt; endl;  }};unique_ptr&lt;IntOwner&gt; create_int_owner(unique_ptr&lt;int&gt; p){  // 这一行代码创建了一个 unique_ptr 智能指针对象 owner  // &lt;IntOwner&gt; 表示 owner 指针所指向的数据类型是 IntOwner  // new IntOwner() 作为参数传入构造类型为 unique_ptr&lt;IntOwner&gt; 的指针  // 所以 owner(new IntOwner()) 是将其初始化为指向 heap 上 new IntOwner() 实例的地址  // 下文的 shared_ptr&lt;int&gt; p4(p3); 也用到类似语法  unique_ptr&lt;IntOwner&gt; owner(new IntOwner());  owner-&gt;p = std::move(p);  return owner;}void unique_ptr_test(){  cout &lt;&lt; &quot;---------------- unique_ptr_test ----------------&quot; &lt;&lt; endl;  // 相当于 Rust 的：let p1 = String::from(&quot;Hello&quot;);  // Rust 里的变量默认就是 unique 的，因为只能有一个 owner  // C++ 里要实现 Rust 这种 unique 的单 owner 效果就要用 unique_ptr  // 对比普通指针写法：  int* p = new int(10);  // 普通指针，类型是 int*  unique_ptr&lt;int&gt; p1 = make_unique&lt;int&gt;(10); // unique 指针，“类型”是 unique_ptr&lt;int&gt;  // 为啥 unique 指针是这种奇怪的写法？  // 因为它不是 C++ 语言本身（编译器）直接实现的，而是用宏（macro）和模版（template）实现的  // 算是一片自定义的用户代码  cout &lt;&lt; &quot;unique_ptr: p1 = &quot; &lt;&lt; p1 &lt;&lt; endl;  cout &lt;&lt; &quot;unique_ptr: *p1 = &quot; &lt;&lt; *p1 &lt;&lt; endl;  // 编译不通过，因为 p1 是 unique 的，不能和 p2 共享数据  // unique_ptr&lt;int&gt; p2 = p1;  // 如果要 p2 取得 p1 的值，就要用 std::move 转移 “ownership”  // Rust 中默认就是 move ，所以可以直接写 let p2 = p1;  // 在这行之后，上面的 p1 变量就不能用了  unique_ptr&lt;int&gt; p2 = std::move(p1);   // 这里明显能看到是 move（比 Rust 清晰）  cout &lt;&lt; &quot;unique_ptr: p2 = &quot; &lt;&lt; p2 &lt;&lt; endl;  cout &lt;&lt; &quot;unique_ptr: *p2 = &quot; &lt;&lt; *p2 &lt;&lt; endl;  cout &lt;&lt; &quot;unique_ptr: p1 = &quot; &lt;&lt; p1 &lt;&lt; endl;  // nullptr 在 C++ 中 0x0 表示 null  // 解引用 null pointer 会让程序崩溃中断  // cout &lt;&lt; &quot;*p1 = &quot; &lt;&lt; *p1 &lt;&lt; endl;  // Error: dereferencing nullptr  // std::move 实现了类似 Rust 这样转移 ownership 的目的  // 只不过变量 p1 仍然存在，它的值变为了 null ，要注意不要再使用它  // Rust 中 p1 会直接用不了  // C++ 里也可以释放 p1 的内存  delete p1.get();  // 读取 p2 的值，类似 Rust 的 borrow :  // let p3 = &amp;p2;  int* p3 = p2.get();  cout &lt;&lt; &quot;normal pointer: p3 = &quot; &lt;&lt; p3 &lt;&lt; endl;  cout &lt;&lt; &quot;normal pointer: *p3 = &quot; &lt;&lt; *p3 &lt;&lt; endl;  // Rust 里是 let p4 = p3; // p4 也是 borrow 的，owner 还是 p2  int* p4 = pass_pointer(p3);  cout &lt;&lt; &quot;normal pointer: p4 = &quot; &lt;&lt; p4 &lt;&lt; endl;  cout &lt;&lt; &quot;normal pointer: *p4 = &quot; &lt;&lt; *p4 &lt;&lt; endl;  { // 花括号指定了一个 scope（作用域），int_owner 只在这个范围内有效    unique_ptr&lt;IntOwner&gt; int_owner = create_int_owner(std::move(p2));    cout &lt;&lt; &quot;unique_ptr: int_owner-&gt;p = &quot; &lt;&lt; int_owner-&gt;p &lt;&lt; endl;    cout &lt;&lt; &quot;unique_ptr: *int_owner-&gt;p = &quot; &lt;&lt; *int_owner-&gt;p &lt;&lt; endl;  }  // 作为 unique pointer 的 int_owner 出了花括号之外就会被释放，内存被回收  cout &lt;&lt; &quot;unique_ptr: p2 = &quot; &lt;&lt; p2 &lt;&lt; endl; // p2 被 move 了，所以成了 null pointer}// ###########################################################//                   智能指针之 Shared Pointer// ###########################################################void shared_ptr_test(){  cout &lt;&lt; &quot;---------------- shared_ptr_test ----------------&quot; &lt;&lt; endl;  // shared pointer 实际上就是 Rust 里面的 Rc  // shared_ptr 的使用语法和 unique_ptr 类似  shared_ptr&lt;int&gt; p1 = make_shared&lt;int&gt;(10);  // 在 heap 里造出 shared pointer  cout &lt;&lt; &quot;shared_ptr: p1 = &quot; &lt;&lt; p1 &lt;&lt; endl;  // 指针 p1 指向（存放） heap 里的地址  cout &lt;&lt; &quot;shared_ptr: *p1 = &quot; &lt;&lt; *p1 &lt;&lt; endl;  // 调用 .use_count() 可以查看引用计数  cout &lt;&lt; &quot;in scope shared_ptr: p1.use_count() = &quot; &lt;&lt; p1.use_count() &lt;&lt; endl;  {    // C++ 的赋值依靠一个 copy constructor    // 由于 p1 是 shared pointer ，所以它有一个引用计数在这    // 当这里做这个赋值操作的时候，copy constructor 会增加这个引用计数    // 思考：为何不用其他比如 int&amp; y = x; 的方式来共享，而要用看起来更复杂的 shared_ptr ？    shared_ptr&lt;int&gt; p2 = p1;      cout &lt;&lt; &quot;shared_ptr: p2 = &quot; &lt;&lt; p2 &lt;&lt; endl;    cout &lt;&lt; &quot;shared_ptr: *p2 = &quot; &lt;&lt; *p2 &lt;&lt; endl;    cout &lt;&lt; &quot;shared_ptr: p1 = &quot; &lt;&lt; p1 &lt;&lt; endl;    cout &lt;&lt; &quot;shared_ptr: *p1 = &quot; &lt;&lt; *p1 &lt;&lt; endl;    // 查看引用计数    cout &lt;&lt; &quot;in scope shared_ptr: p1.use_count() = &quot; &lt;&lt; p1.use_count() &lt;&lt; endl;    cout &lt;&lt; &quot;in scope shared_ptr: p2.use_count() = &quot; &lt;&lt; p2.use_count() &lt;&lt; endl;  }  // 出了花括号，p2 会被释放掉，引用计数再次减小为 1  cout &lt;&lt; &quot;out scope shared_ptr: p1.use_count() = &quot; &lt;&lt; p1.use_count() &lt;&lt; endl;  // convert normal pointer to shared_ptr  int* p3 = new int(20);  int* p5w;  {    // p4(p3) 是一种初始化 shared_ptr 的语法    // 通过将 p3 作为参数传递给 p4 的构造函数，p4 将获取对这个动态分配的整数对象的所有权    // 并在 p4 生命周期结束时，会自动释放这个对象    shared_ptr&lt;int&gt; p4(p3); // 把普通指针转换为 Rc 的指针，但这样做不是对的    cout &lt;&lt; &quot;shared_ptr: p4 = &quot; &lt;&lt; p4 &lt;&lt; endl;    cout &lt;&lt; &quot;shared_ptr: *p4 = &quot; &lt;&lt; *p4 &lt;&lt; endl;    cout &lt;&lt; &quot;shared_ptr: p4.use_count() = &quot; &lt;&lt; p4.use_count() &lt;&lt; endl;    // // Can&#39;t have two of them converted from raw pointer    // // 上面从 p3 造了一个 shared pointer 指针 p4    // // 这里又从 p3 造了一个 shared pointer 指针 p4w    // // p4 和 p4w 都认为自己的引用计数是 1，这就有问题了：    // // 当 p4 出了作用域之后，由于引用计数是 1 ，所以它会回收一次这个内存    // // 等到 p4w 出了作用域之后，由于引用计数也是 1 ，于是它会再回收一次    // // 然后 p4w 发现没有内存可以回收，于是程序就崩溃了    // shared_ptr&lt;int&gt; p4w(p3);    // cout &lt;&lt; &quot;shared_ptr: p4 = &quot; &lt;&lt; p4w &lt;&lt; endl;    // cout &lt;&lt; &quot;shared_ptr: *p4 = &quot; &lt;&lt; *p4w &lt;&lt; endl;    // cout &lt;&lt; &quot;shared_ptr: p4.use_count() = &quot; &lt;&lt; p4w.use_count() &lt;&lt; endl;    // // 所以在 C++ 里面，永远不应该从一个普通的 pointer 造出一个 shared pointer    // // 就像在 Rust 里面你不能把一个 borrow 的引用变成一个 owned 的    // // 比如下面的 Rust 代码就是这样的表达，无法通过编译：    // // cannot move out of `*x` which is behind a shared reference    // let s = String::from(&quot;hello&quot;);    // let x = &amp;s;    // let y = *x;    // // C++ 的这些智能指针不是语言自己实现的，所以它没法阻止你这样写，所以程序会崩溃    // // 用 make_shared 来创建 shared pointer 就能避免上述问题，因为会编译不过    // convert shared_ptr to normal pointer    // int* p5 = p4.get(); 这个操作相当于 borrow    // 你可以读取 p4 ，但不能释放 p4 ，你也不能在 p4 出了作用域之外还使用 p5    int* p5 = p4.get();    p5w = p5;    cout &lt;&lt; &quot;normal pointer: p5 = &quot; &lt;&lt; p5 &lt;&lt; endl;    cout &lt;&lt; &quot;normal pointer: *p5 = &quot; &lt;&lt; *p5 &lt;&lt; endl;  }  // // p5w 指针的值（地址）还是 p5 的值，但是内容已经变了  // // p4 除了作用域被释放了，所以内存的内容变了，所以 *p5w 的值是错的  // cout &lt;&lt; &quot;p5w = &quot; &lt;&lt; p5w &lt;&lt; endl;  // cout &lt;&lt; &quot;*p5w = &quot; &lt;&lt; *p5w &lt;&lt; endl;   // // 出了作用域之后，p5w 竟然还能用，说明 C++ 内存的安全保障没有 Rust 那么强}void shared_ptr_bug(){  // 和上文的 p4w 一样，不应该把普通指针转为 shared pointer  // C++ 里，永远不应该从一个普通的 pointer 造出一个 shared pointer  int* x = new int(10);  shared_ptr&lt;int&gt; p1(x);    // 能编译通过，但埋下隐患  // shared_ptr&lt;int&gt; p2(x);  // can&#39;t have this  // This can be avoided by using make_shared  // 使用 make_shared 来创造 shared pointer 可以让编译器检查出此类错误  // shared_ptr&lt;int&gt; p1 = make_shared&lt;int&gt;(x);  // 编译不通过}void add1(int* x){  *x += 1;}void shared_ptr_mutation(){  cout &lt;&lt; &quot;---------------- shared_ptr_mutation ----------------&quot; &lt;&lt; endl;  // 你可以对 pointer 指向的对象进行修改，这和 Rust 有点不同  // Rust 的 Rc 你是不能修改它的值的，你必须要在 Rc 里套一个 RefCell 才能改它的值  // C++ 没有这类读写锁来防止多个人同时修改同一个内存上的数据  // C++ 只管这些内存到最后被释放掉，而且只能释放一次  // 至于多线程的时候，你要怎么处理这些读写冲突问题，那就是你自己的事情，C++ 不管  shared_ptr&lt;int&gt; p = make_shared&lt;int&gt;(10);  cout &lt;&lt; &quot;shared_ptr: p = &quot; &lt;&lt; p &lt;&lt; endl;  cout &lt;&lt; &quot;shared_ptr: *p = &quot; &lt;&lt; *p &lt;&lt; endl;  // Can use function that takes normal pointer  // and can mutate the value  add1(p.get());  cout &lt;&lt; &quot;shared_ptr (after add1): *p = &quot; &lt;&lt; *p &lt;&lt; endl;  *p += 1;  cout &lt;&lt; &quot;shared_ptr (after +=1): *p = &quot; &lt;&lt; *p &lt;&lt; endl;}class Example {  public:    void sayHello() { cout &lt;&lt; &quot;Hello, world!\n&quot;; }};void misuseSharedPtr() {  Example example; // example 是 stack 上的对象，不是指针  // std::shared_ptr&lt;Example&gt; ptr(&amp;example); // 错误用法！  // shared_ptr&lt;Example&gt; ptr(&amp;example, [](Example*){});  // OK  // make_shared&lt;Example&gt;(example) 在 heap 上复制了一份 example 的数据，所以看起来没问题  // 但是一般也不要这么写  shared_ptr&lt;Example&gt; ptr = make_shared&lt;Example&gt;(example);  // seems OK, used copy constructor?  ptr-&gt;sayHello();}class Example2 {public:  shared_ptr&lt;int&gt; data;  Example2(shared_ptr&lt;int&gt; data) : data(data)   {    cout &lt;&lt; &quot;Example2 created with value: &quot; &lt;&lt; *data &lt;&lt; endl;  }  // 使用默认的拷贝构造函数：  // 这个构造函数的作用是用于创建一个新的 Example2 对象  // 其成员变量 data 的值与另一个 Example2 对象相同  // 使用 = default 来声明拷贝构造函数，表示使用编译器生成的默认实现  // 这种语法通常用于避免手动实现拷贝构造函数，特别是当类中没有需要手动管理的资源时。  Example2(const Example2&amp; other) = default;  ~Example2()   {    cout &lt;&lt; &quot;Example2 destroyed, value was: &quot; &lt;&lt; *data &lt;&lt; endl;  }};void shared_ptr_test2(){  cout &lt;&lt; &quot;---------------- shared_ptr_test2 ----------------&quot; &lt;&lt; endl;  shared_ptr&lt;int&gt; data = make_shared&lt;int&gt;(42);  Example2 a(data);  Example2 b = a; // 拷贝构造  // 修改 b 的 data，a 的 data 也会看到改变  *b.data = 100;  cout &lt;&lt; &quot;a&#39;s value: &quot; &lt;&lt; *a.data &lt;&lt; endl; // 输出 100  cout &lt;&lt; &quot;b&#39;s value: &quot; &lt;&lt; *b.data &lt;&lt; endl; // 输出 100  cout &lt;&lt; &quot;data&#39;s value: &quot; &lt;&lt; *data &lt;&lt; endl; // 输出 100}// ###########################################################//                        其他代码行为测试// ###########################################################void ref_of_ref(){  cout &lt;&lt; &quot;---------------- ref_of_ref ----------------&quot; &lt;&lt; endl;  unique_ptr&lt;string&gt; s = make_unique&lt;string&gt;(&quot;Hello&quot;);  string* r1 = s.get(); // 把 unique_ptr 的指针拿出来  string** r2 = &amp;r1;  cout &lt;&lt; &quot;s = &quot; &lt;&lt; s &lt;&lt; endl;  cout &lt;&lt; &quot;*s = &quot; &lt;&lt; *s &lt;&lt; endl;  cout &lt;&lt; &quot;r1 = &quot; &lt;&lt; r1 &lt;&lt; endl;  cout &lt;&lt; &quot;*r1 = &quot; &lt;&lt; *r1 &lt;&lt; endl;  cout &lt;&lt; &quot;r2 = &quot; &lt;&lt; r2 &lt;&lt; endl;  cout &lt;&lt; &quot;*r2 = &quot; &lt;&lt; *r2 &lt;&lt; endl;  cout &lt;&lt; &quot;**r2 = &quot; &lt;&lt; **r2 &lt;&lt; endl;}void pass_unique_ptr(unique_ptr&lt;int&gt; p){  cout &lt;&lt; &quot;pass_unique_ptr: p = &quot; &lt;&lt; p &lt;&lt; endl;  cout &lt;&lt; &quot;pass_unique_ptr: *p = &quot; &lt;&lt; *p &lt;&lt; endl;}void pass_unique_ptr_test(){  cout &lt;&lt; &quot;---------------- pass_unique_ptr_test ----------------&quot; &lt;&lt; endl;  unique_ptr&lt;int&gt; p = make_unique&lt;int&gt;(10);  cout &lt;&lt; &quot;unique_ptr: p = &quot; &lt;&lt; p &lt;&lt; endl;  cout &lt;&lt; &quot;unique_ptr: *p = &quot; &lt;&lt; *p &lt;&lt; endl;  pass_unique_ptr(std::move(p));  cout &lt;&lt; &quot;unique_ptr: p = &quot; &lt;&lt; p &lt;&lt; endl;  // nullptr  // cout &lt;&lt; &quot;unique_ptr: *p = &quot; &lt;&lt; *p &lt;&lt; endl;  // Error: dereferencing nullptr}unique_ptr&lt;int&gt; output_unique_ptr(){  unique_ptr&lt;int&gt; p = make_unique&lt;int&gt;(10);  return p;}void output_unique_ptr_test(){  cout &lt;&lt; &quot;---------------- output_unique_ptr_test ----------------&quot; &lt;&lt; endl;  unique_ptr&lt;int&gt; p = output_unique_ptr();  cout &lt;&lt; &quot;output_unique_ptr_test: p = &quot; &lt;&lt; p &lt;&lt; endl;  cout &lt;&lt; &quot;output_unique_ptr_test: *p = &quot; &lt;&lt; *p &lt;&lt; endl;}unique_ptr&lt;int&gt; pass_through_unique_ptr(unique_ptr&lt;int&gt; p){  return p;}void pass_through_unique_ptr_test(){  cout &lt;&lt; &quot;---------------- pass_through_unique_ptr_test ----------------&quot; &lt;&lt; endl;  unique_ptr&lt;int&gt; p = make_unique&lt;int&gt;(10);  cout &lt;&lt; &quot;pass_through_unique_ptr_test: p = &quot; &lt;&lt; p &lt;&lt; endl;  cout &lt;&lt; &quot;pass_through_unique_ptr_test: *p = &quot; &lt;&lt; *p &lt;&lt; endl;  unique_ptr&lt;int&gt; p2 = pass_through_unique_ptr(std::move(p));  cout &lt;&lt; &quot;pass_through_unique_ptr_test: p2 = &quot; &lt;&lt; p2 &lt;&lt; endl;  cout &lt;&lt; &quot;pass_through_unique_ptr_test: *p2 = &quot; &lt;&lt; *p2 &lt;&lt; endl;  cout &lt;&lt; &quot;pass_through_unique_ptr_test: p = &quot; &lt;&lt; p &lt;&lt; endl;  // nullptr  // cout &lt;&lt; &quot;pass_through_unique_ptr_test: *p = &quot; &lt;&lt; *p &lt;&lt; endl;  // Error: dereferencing nullptr}template &lt;typename T&gt;T pass_through(const T&amp; x){  return x;}void pass_through_test(){  cout &lt;&lt; &quot;---------------- pass_through_test ----------------&quot; &lt;&lt; endl;  int x = 10;  int y = pass_through(x);  cout &lt;&lt; &quot;pass_through_test: y = &quot; &lt;&lt; y &lt;&lt; endl;  string s = &quot;Hello&quot;;  string t = pass_through(s);  cout &lt;&lt; &quot;pass_through_test: t = &quot; &lt;&lt; t &lt;&lt; endl;  unique_ptr&lt;int&gt; p = make_unique&lt;int&gt;(10);  // unique_ptr&lt;int&gt; q = pass_through(p);  // doesn&#39;t work  // cout &lt;&lt; &quot;pass_through_test: q = &quot; &lt;&lt; q &lt;&lt; endl;}class IntContainer{public:  int* x;  IntContainer(int* x) : x(x) {}  ~IntContainer()  {    cout &lt;&lt; &quot;IntContainer destructor: x = &quot; &lt;&lt; x &lt;&lt; endl;  }};class RawContainer{public:  IntContainer* ic;  RawContainer(IntContainer* ic) : ic(ic) {}  ~RawContainer()  {    cout &lt;&lt; &quot;RawContainer destructor: ic = &quot; &lt;&lt; ic &lt;&lt; endl;  }};void raw_container_test(){  cout &lt;&lt; &quot;---------------- raw_container_test ----------------&quot; &lt;&lt; endl;  unique_ptr&lt;int&gt; int_unique = make_unique&lt;int&gt;(10);  int* int_raw = int_unique.get();  // 读取出 int_unique 的指针放到 int_raw 里 - 相当于 Rust 里的 borrow  // 造出一个 IntContainer 对象，然后把 int_raw 包在里面，然后各种嵌套  // 下面的代码显示这里的内存分配和释放没有问题 - 通过各种 ~ 标记的 destructor 打印确认对象被回收释放  unique_ptr&lt;IntContainer&gt; int_container_unique = make_unique&lt;IntContainer&gt;(int_raw);  IntContainer* int_container_raw = int_container_unique.get();  unique_ptr&lt;RawContainer&gt; raw_container = make_unique&lt;RawContainer&gt;(int_container_raw);  cout &lt;&lt; &quot;raw_container_test: int_unique = &quot; &lt;&lt; int_unique &lt;&lt; endl;  cout &lt;&lt; &quot;raw_container_test: int_raw = &quot; &lt;&lt; int_raw &lt;&lt; endl;  cout &lt;&lt; &quot;raw_container_test: int_container_unique = &quot; &lt;&lt; int_container_unique &lt;&lt; endl;  cout &lt;&lt; &quot;raw_container_test: *int_container_unique-&gt;x = &quot; &lt;&lt; *int_container_unique-&gt;x &lt;&lt; endl;  cout &lt;&lt; &quot;raw_container_test: int_container_raw = &quot; &lt;&lt; int_container_raw &lt;&lt; endl;  cout &lt;&lt; &quot;raw_container_test: raw_container = &quot; &lt;&lt; raw_container &lt;&lt; endl;}class UniqueContainer{public:  unique_ptr&lt;IntContainer&gt; ic;  // must pass reference _and_ move because no copy constructor for unique_ptr  UniqueContainer(unique_ptr&lt;IntContainer&gt;&amp; ic) : ic(std::move(ic)) {}  ~UniqueContainer()  {    cout &lt;&lt; &quot;UniqueContainer destructor: ic = &quot; &lt;&lt; ic &lt;&lt; endl;  }};void unique_container_test(){  // 这个例子和上面的 raw_container_test 类似，只不过两个对象里面放的是 unique pointer  // 在 C++ 中，函数调用的参数传递会调用 copy structor ，但是 unique pointer 是没有 copy structor 的  // 所以期间会需要 &amp; 符号和 std::move 操作  // 最后通过 destructor 来观察判断内存被正确回收释放  cout &lt;&lt; &quot;---------------- unqiue_container_test ----------------&quot; &lt;&lt; endl;  unique_ptr&lt;int&gt; int_unique = make_unique&lt;int&gt;(10);  int* int_raw = int_unique.get();  unique_ptr&lt;IntContainer&gt; int_container_unique = make_unique&lt;IntContainer&gt;(int_raw);//  unique_ptr&lt;IntContainer&gt; int_container_unique2 = std::move(int_container_unique);  unique_ptr&lt;UniqueContainer&gt; unique_container = make_unique&lt;UniqueContainer&gt;(int_container_unique);//  unique_ptr&lt;UniqueContainer&gt; unique_container = make_unique&lt;UniqueContainer&gt;(std::move(int_container_unique));  // After move, int_container_unique is nullptr  cout &lt;&lt; &quot;int_unique owns = &quot; &lt;&lt; (int_unique ? &quot;Yes&quot; : &quot;No&quot;) &lt;&lt; &quot;, value = &quot; &lt;&lt; *int_unique &lt;&lt; endl;  cout &lt;&lt; &quot;int_raw points to = &quot; &lt;&lt; int_raw &lt;&lt; endl;  cout &lt;&lt; &quot;int_container_unique has been moved = &quot; &lt;&lt; (int_container_unique ? &quot;No, not null&quot; : &quot;Yes, nullptr&quot;) &lt;&lt; endl;  if (unique_container &amp;&amp; unique_container-&gt;ic)   {    cout &lt;&lt; &quot;unique_container-&gt;ic-&gt;x points to = &quot; &lt;&lt; unique_container-&gt;ic-&gt;x &lt;&lt; endl;    cout &lt;&lt; &quot;*unique_container-&gt;ic-&gt;x = &quot; &lt;&lt; *unique_container-&gt;ic-&gt;x &lt;&lt; endl;  }  cout &lt;&lt; &quot;unique_container owns = &quot; &lt;&lt; (unique_container ? &quot;Yes&quot; : &quot;No&quot;) &lt;&lt; endl;}int main() // C++ 中规定 main 函数一定要返回整数，所以是 int main(){  // basic_test();  // pointer_test();  // address_test();  // reference_test();  // pass_array_test();  // inheritance_test();  // smart_ptr_test();  // pointer_of_pointer_test();  // unique_ptr_test();  // shared_ptr_test();  // shared_ptr_bug();  // misuseSharedPtr();  // shared_ptr_test2();  // shared_ptr_mutation();  // ref_of_ref();  // pass_unique_ptr_test();  // output_unique_ptr_test();  // pass_through_unique_ptr_test();  // pass_through_test();  // raw_container_test();  // unique_container_test();  return 0;  }</code></pre><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Programming Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust 入门</title>
      <link href="/2024/04/22/rust-basics/"/>
      <url>/2024/04/22/rust-basics/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.rust-lang.org" target="_blank" rel="noopener">Rust</a> 算是一个<strong>底层</strong>的系统编程语言。和有<a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)" target="_blank" rel="noopener">垃圾回收（Garbage Collection）</a>的语言不一样，Rust 作为一种底层的系统语言，在内存管理方面有一些特殊的地方。它用某种语言特性设计（<a href="https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html" target="_blank" rel="noopener">ownership</a>）（<strong>部分</strong>）取代了垃圾回收。</p><p>应该说 <a href="https://en.wikipedia.org/wiki/C%2B%2B" target="_blank" rel="noopener">C++</a> 的<a href="https://learn.microsoft.com/en-us/cpp/cpp/pointers-cpp?view=msvc-170" target="_blank" rel="noopener"><strong>指针</strong></a>也能实现类似的功能，但 Rust 增加了 ownership 这些概念和与之相应的使用规则，并且会对代码进行这些规则相关的<strong>静态检查</strong>——即运行代码前，编译器检会查你代码对内存的使用是否按照 Rust 的规则做对了。总的来说， Rust 的静态类型检查相比 C++ 等其他语言增加了内存使用的规范的检测，防止代码运行时出现内存问题。</p><p>Rust 的这些 <a href="https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html" target="_blank" rel="noopener">ownership</a>，<a href="https://doc.rust-lang.org/rust-by-example/scope/lifetime.html" target="_blank" rel="noopener">lifetime</a> 之类的<strong>静态检查设计</strong>，主要目的是让人们可以尽量少地使用 <a href="https://doc.rust-lang.org/book/ch15-04-rc.html" target="_blank" rel="noopener">Rc（引用计数）</a>。不过到了复杂的数据结构，比如<a href="https://en.wikipedia.org/wiki/Interpreter_(computing)" target="_blank" rel="noopener">解释器</a>，仍然是要用 <strong>Rc</strong> 的。只是比较简单的那一部分代码你可以不用 <strong>Rc</strong> 。</p><p>由于 Rust 语言的内存管理通过少用或不用 Rc ，减少了 Rc 的开销，代码性能据说在某些情况下会快很多。所以可以稍微重视一下。当然，它的这种设计并没有很完善，其中有一些多余而复杂东西（比如 Rust 总有一些自以为方便的隐式操作，而非写什么代码就是什么的所见即所得，类型系统也反直觉地水），但理解它的内存管理思路能给人们提供启发。进而可以改进自己的代码思路。</p><p>像 <a href="https://en.wikipedia.org/wiki/C%2B%2B" target="_blank" rel="noopener">C++</a> 稍微“扩展”一下 <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr" target="_blank" rel="noopener">unique_ptr</a>，也能实现 Rust 的内存管理精髓。但若没有 Rust 这套内存规则的作为大方向指导我们的思路，那我们可能就会不知道如何有效地使用这些 <code>unique_ptr</code> 等指针。不过像这种 <strong>ownership</strong> 的思路可能在 C++ 里就已经有了（<a href="https://en.cppreference.com/w/cpp/memory/unique_ptr" target="_blank" rel="noopener">unique_ptr</a> 和 <a href="https://en.cppreference.com/w/cpp/memory/shared_ptr" target="_blank" rel="noopener">shared_ptr</a>），只不过 C++ 没有类型系统来检查它：比如 C++ 中指针 <code>p1</code> 被 <a href="https://en.cppreference.com/w/cpp/utility/move" target="_blank" rel="noopener">move</a> 之后，仍然能使用，只不过 <code>p1</code> 指向的地址是 <code>0</code> 而已。</p><p>初次使用 Rust 语言编程很可能会非常痛苦，除了没有所见即所得的设计（各种隐式操作），期间还有复杂的内存管理规则要适应。多数时候更是要<strong>连蒙带猜</strong>。不过如果能耐心坚持到成功写出一个解释器，也许对内存管理的理解会上升一个台阶。</p><p>新的理解也包括<a href="https://www.yinwang.org/blog-cn/2016/09/18/rust" target="_blank" rel="noopener">也许除了垃圾回收（GC）和引用计数（RC），内存管理没有其它更好更简单的办法</a>。</p><hr><h3 id="Rust-编程环境设置"><a href="#Rust-编程环境设置" class="headerlink" title="Rust 编程环境设置"></a>Rust 编程环境设置</h3><p>简单的代码可以直接先去官网的 <a href="https://play.rust-lang.org/" target="_blank" rel="noopener">Rust Playground</a> 在线运行。这样不用进行任何配置和安装，最方便。之后的正式学习，建议使用友好的 <a href="https://code.visualstudio.com" target="_blank" rel="noopener">VS Code</a> 来运行 <strong>Rust</strong> 代码。</p><p>以 <strong>MacOS</strong> 操作系统为例，先<a href="https://doc.rust-lang.org/book/ch01-01-installation.html" target="_blank" rel="noopener">安装 Rust</a> ：</p><pre><code class="lang-bash">## 官方推荐的安装方式，适用于 Linux 和 MacOS$ curl --proto &#39;=https&#39; --tlsv1.2 https://sh.rustup.rs -sSf | sh## 如果有 Homebrew ，也可以使用它安装 Rust$ brew install rust## 安装完后调用下面的 rustc 命令应该能正确查看版本号$ rustc --versionrustc 1.77.2 (25ef9e3d8 2024-04-09) (Homebrew)</code></pre><p>最后参考<a href="/2018/05/25/vscode-intro/">上手 Visual Studio Code</a> 把 <strong>VS Code</strong> 软件安装设置完成即可。</p><p>如果想方便地一键格式化自己写的代码，比如设置 <code>TAB</code> 键的空格数量等，可以继续安装 <a href="https://github.com/rust-lang/rustfmt" target="_blank" rel="noopener">rustfmt</a> </p><pre><code class="lang-bash">## 通过上面官方推荐方式 curl 安装的 Rust ，才有 rustup 这个命令$ rustup component add rustfmt## 如果是 Homebrew 安装的 Rust ，就要用 Homebrew 来安装 rustfmt$ brew install rustfmt</code></pre><p>完成安装之后根据 <a href="https://rust-lang.github.io/rustfmt/" target="_blank" rel="noopener">rustfmt 文档</a>新建 <code>rustfmt.toml</code> 文件设置好想要的格式，即可在 <strong>VS Code</strong> 中右键点击 <code>Format Document</code> 或是快捷键：<code>option</code> + <code>shift</code> + <code>F</code> 来格式化代码。注意，<code>rustfmt.toml</code> 文件里的设置项分为 stable 和 unstable ，如果要开启 unstable 的设置项，需要使用 <a href="https://rust-lang.github.io/rustup/concepts/channels.html" target="_blank" rel="noopener">Nightly</a> 版本的 Rust ，即最不稳定版。</p><p>也可以在终端中调用 <code>rustfmt</code> 命令来格式化：</p><pre><code class="lang-bash">$ rustfmt demo.rs</code></pre><hr><h3 id="Rust-的基本操作"><a href="#Rust-的基本操作" class="headerlink" title="Rust 的基本操作"></a>Rust 的基本操作</h3><p>每次接触新的编程语言，基本都可以从「<strong>变量定义</strong>」，「<strong>函数调用</strong>」，「<strong>条件分支</strong>」，「<strong>类型</strong>」和「<strong>常见数据结构</strong>」这几个方向入手快速熟悉。至于语言的一些特有的特性，之后再根据需要补充学习即可。</p><p>由于 <strong>Rust</strong> 代码需要编译，加上期间产生的各式各样的文件，最好专门建一个文件夹 <code>demo</code> 来进行下面的编程操作。以便管理。</p><p>在文件夹 <code>demo</code> 中新建后缀为 <code>.rs</code> 的文件，比如 <code>demo.rs</code> ，之后编辑完代码，就能用 <strong>VS Code</strong> 里的 <strong>Code Runner</strong> 来一键调用上面安装的 <code>rustc</code> 完成编译并运行。关于 VS Code 的具体操作和设置参见<a href="/2018/05/25/vscode-intro/">上手 Visual Studio Code</a> 。</p><pre><code class="lang-rust">// 这部分 allow 代码是消除 rust 编译器警告的信息// 这样就能只看到代码打印出的结果，没有多余视线干扰// 注意这不是全局生效的，对每一个需要的函数，都要写一次#[allow(unused_variables)]#[allow(dead_code)]#[allow(unused_mut)]#[allow(unused_imports)]#[allow(unused_parens)]// 和 Java 类似，Rust 需要一个 main 函数作为入口来运行其中的代码// fn 相当于 function ，是定义函数的关键词fn main(){  let x = 2 * 3;  // 格式化字符串中的变量有时可以写在花括号里，有时不行  // 所以统一写到外面比较好，统一视觉，避免写 &quot;x = {x}&quot;  println!(&quot;x = {}&quot;, x);    // Rust 是需要写类型的，i32 代表 32 位带符号的整数，上面 x 没写是因为有类型推导  // 「类型推导」其实是错误的语言设计，应该在定义处直接标记类型。方便阅读，且提高代码的表达能力  // 「类型推导」会限制代码的表达能力，导致很多写法不能写，否则没法正确推导出这些写法下的数据类型  // Rust 是系统编程的语言，每个类型的尺寸（占内存的空间）都是固定的  let y: i32 = 1 + x;  println!(&quot;y = {}&quot;, y);  // 定义好的变量默认不能赋值修改  // y = &quot;9&quot;;  // error: cannot assign twice to immutable variable  // 用 mut 关键词来定义可赋值的变量（mut 表示 mutable）  let mut z = 5;  println!(&quot;first z = {z}&quot;);  // 这样的写法不好，任何变量都应该给一个初始值才对  // 设计得好的语言里面没有 variable declaration 这个概念  // let mut z;  z = 10;  println!(&quot;first z = {z}&quot;);  // 同名变量在 rust 里可以重复定义，且可以不同类型（这里同样有类型推导 type inferred）  // 注意！Rust 里，此时 y 的类型不是 String ，而是 &amp;str 类型，该类型是指向字符串的一个“引用”  let y = &quot;Hello&quot;;  println!(&quot;y = {}&quot;, y);  // 数组 - 默认也是不能更改，若要可更改则用 let mut a: [i32; 3] = [1, 2, 3]  let a: [i32; 3] = [1, 2, 3];  println!(&quot;a = {:?}&quot;, a);  println!(&quot;a[0] = {}, a[1] = {}, a[2] = {}&quot;, a[0], a[1], a[2]);  // 定义重复数组内容的方便写法 - 全是 5 的数组为例  let b = [5; 20];  println!(&quot;b = {:?}&quot;, b);  // 元组 - tuples（可以存在不同类型的内容）  // tuple 定义虽没有用 mut 关键词，但 t 的内容是可以赋值更改的：t.1 = True  let t: (i32, bool, char) = (42, false, &#39;X&#39;);  println!(&quot;t = {:?}&quot;, t);  println!(&quot;t.0 = {}, t.1 = {}, t.2 = {}&quot;, t.0, t.1, t.2);  println!(&quot;{}&quot;, (42, false, &#39;X&#39;).1);  // 匿名函数：x =&gt; x + 1  println!(&quot;(|x| x + 1)(5) = {}&quot;, (|x| x + 1)(5));  // 定义 add1 函数 - 不标记(输入和返回)类型，依赖类型推导  // Rust 是从下一行的 println! 里的调用 add1(5) 推导出来的  let add1 = |x| x + 1;  println!(&quot;add1(5) = {}&quot;, add1(5));   // 若无 add1(5)，Rust 推不出类型会报错，除非标记类型  // 标记类型的函数定义  let add2 = |x: i32| -&gt; i32 { x + 2 };  println!(&quot;add2(5) = {}&quot;, add2(5));  // 上面展示的类型推导有局限，比如 identity 函数  let id = |x| x;  println!(&quot;id(5) = {}&quot;, id(5));  // 正常输出 5  // 但下面这行会报错，因为从上面的 id(5) 推导出输入类型是 i32 ，不能是 bool  // 然而 id 函数应该是无论你输入什么类型的数据都能原封不动返回它  // println!(&quot;id(5) = {}&quot;, id(True));    // 正确实现 identity 函数，需要用到「泛型」  // 下面第 1 个 T 代表 T 是类型参数，它先会生成类似这样一个东西：  // T =&gt; fn id2(x: T) -&gt; T { return x; }  // 类型 T 作为输入，然后构造出一个具有类型标记的函数 id2  // 第 2 个 T 是输入参数 x 的类型；第 3 个 T 是函数 id2 的返回类型；  fn id2&lt;T&gt;(x: T) -&gt; T { x }  println!(&quot;id2(5) = {}&quot;, id2(5));  println!(&quot;id2(true) = {}&quot;, id2(true));  // curried functions: x =&gt; y =&gt; x + y  // 这里需要用到关键词 move 才能让 y 取到 3 这个操作数，这和 Rust 的内存管理有关  // Rust 制造了这些麻烦设计，是为了能够不用垃圾回收（Garbage Collection）这一语言特性  println!(&quot;(|x| (move |y| x + y))(2)(3) = {}&quot;, (|x| (move |y| x + y))(2)(3));  // 条件分支  let x = 3;  if x &lt; 5 {    println!(&quot;condition was true&quot;);  } else {    println!(&quot;condition was false&quot;);  }  fn fib(n: u64) -&gt; u64  {    if (n == 0)    {      return 0;    }    else if n == 1    {      return 1;    }    else    {      return fib(n - 1) + fib(n - 2);    }  }  println!(&quot;fib(8) = {}&quot;, fib(8));  // while loop  let mut total = 0;  let mut x = 1;  while x &lt;= 10 {    total += x;    x += 1;   // Rust 没有 ++ 或 -- 操作，这是个正确的设计。好的语言里不应该有这种东西，可避免一些愚蠢的写法  }  println!(&quot;total = {}&quot;, total);  // for loop  let mut a = [2, 3, 5, 7, 11, 13, 17];  // a 的类型为 [i32; 7]  // 由于数组 a 的内容是 i32 整数  // 所以定义 type_test 变量会 copy 数组内容，而不会 move ，和 i32 一样  // 如果内容是 String 字符串，那 let type_test: [String; 7] = a; 就会 move 了  let type_test: [i32; 7] = a;             for x in a {    println!(&quot;array element: {}&quot;, x);  }  // range (like Python)  for x in 1..5 {    println!(&quot;range 1..5: {x}&quot;);  }  for x in 1..=5 {    println!(&quot;range 1..5: {x}&quot;);  }  // reverse range  for x in (1..5).rev() {    println!(&quot;(1..5).rev() range: {x}&quot;);  }  // vector - 类似 Java 中的 ArrayList ，长度不固定，可添加数据（上面的数组长度固定不能添加）  // 变量 v 的类型是 Vec&lt;i32&gt;，且注意就算内容是 i32 ，也不能像上面的 a 变量那样默认 copy  // let type_test: Vec&lt;i32&gt; = v; 会发生 move  let mut v = vec![1, 2, 3, 4, 5];     // 这里如果不用 &amp;v 而采用 v ，虽然仍然能顺利输出，但会发生 move ，后续 v 变量就不能用了  for x in &amp;v {    println!(&quot;vector element: {x}&quot;);  }  // let x = &amp;v[3];   // can&#39;t borrow  let x = v[3];       // But can copy  v.push(6);  for x in &amp;v {    println!(&quot;changed vector element: {x}&quot;);  }  println!(&quot;v[3] = {}&quot;, x);  // for 循环中的 x 在循环结束后就没了，这里的 x 是上面的 let x = v[3];  // access by index - 下标访问  println!(&quot;v[2] = {}&quot;, v[2]);  // 标记类型的 vector  let mut v2: Vec&lt;String&gt; = vec![&quot;a&quot;.to_string(), &quot;b&quot;.to_string(), &quot;c&quot;.to_string()];  // let x = v2[1];  // 这样写会报错；和 Rust 内存管理有关 - cannot move out of index of `Vec&lt;String&gt;`  let x = &amp;v2[1];    println!(&quot;Vec&lt;String&gt; v2[1] = {}&quot;, x);  // hash map - 数据结构，属于库函数，所以先要用 use 来加载一下，相当于 Java 的 import  println!(&quot;----- hash map -----&quot;);  use std::collections::HashMap;  // 注意这里没有声明 table 类型  // Rust 会从后面的 table.insert(&quot;one&quot;, 1); 推导出 table 的类型  // table 的完整类型是 HashMap&lt;&amp;str, i32&gt;  // 为什么整数部分是 i32 而不是 i64 ？其实 Rust 编译器无法确切地知道是 i32 还是 i64  // Rust 编译器会根据上下文和已知的类型信息尝试找到最适合的类型，以满足所有 insert 的值的类型  // 下方 insert 的值 1 、2 、3 通常在 Rust 中默认为 i32 类型，所以这里是 i32  // 但是如果在其他部分的代码中，插入了 i64 类型的值，那么编译器则会认为是 HashMap&lt;&amp;str, i64&gt;  // 「类型推导」是错误的设计，会限制语言的表达，正确做法应该在定义的地方显式标记类型  let mut table = HashMap::new();    table.insert(&quot;one&quot;, 1);  table.insert(&quot;two&quot;, 2);  table.insert(&quot;three&quot;, 3);  // 可以通过 key 访问 table 的值  println!(&quot;table[\&quot;one\&quot;] = {}&quot;, table[&quot;one&quot;]);  // 但如果 key 来访问的值不存在，程序会报错中断  // println!(&quot;table[\&quot;four\&quot;] = {}&quot;, table[&quot;four&quot;]);  // 所以更合理的方式是调用 get 函数配合 {:?} 来尝试取值，这样程序不会中断  println!(&quot;table[\&quot;four\&quot;] = {:?}&quot;, table.get(&quot;four&quot;));         // table[&quot;four&quot;] = None  // get 函数返回的是一个 option type 类型的值，比如这里的 Some(2)  // 这里的 option 类型表示为 Option&lt;&amp;{integer}&gt; ，意思是「有可能是 integer 或者 None（没有）」  // Rust 用这个 option 设计避免了 null pointer exception 之类的问题  // Rust 是不会出现 null pointer exception 的  println!(&quot;table[\&quot;two\&quot;] = {:?}&quot;, table.get(&quot;two&quot;));           // table[&quot;two&quot;] = Some(2)  // Tips: 直接打印 None 会报错  // println!(&quot;None: {:?}&quot;, None);   // 需要添加类型 T 即 None::&lt;T&gt; 才能顺利打印出 None: None  // 这说明 table.get(&quot;four&quot;) 得到的 None 其实是 None::&lt;i32&gt; ，编译器类型推导出了这个 T  println!(&quot;None: {:?}&quot;, None::&lt;i32&gt;);    // 处理这种 option 类型可以用 match ，对不同的取值进行不同的操作  match table.get(&quot;three&quot;)   {    Some(value) =&gt; println!(&quot;value: {}&quot;, value),   // value 在这里直接被取出    None =&gt; println!(&quot;one: not found&quot;),  }  // match 是一种程序语言里通用的构造，有点像 if 的那个分支的构造   // struct - 结构体，类似面向对象里的「对象」  struct User {    username: String,    email: String,    active: bool,  }  // struct instance  let mut user1 = User {    username: String::from(&quot;user1&quot;),    email: String::from(&quot;user1@example.com&quot;),    active: true,  };  // field access - 访问成员  println!(&quot;user1: username = {}, email = {}&quot;, user1.username, user1.email);  // field mutation - 对成员赋值  user1.email = String::from(&quot;other1@example.com&quot;);  println!(&quot;changed user1: username = {}, email = {}&quot;, user1.username, user1.email);  // struct constructor - 构造函数来创建 struct instance  fn build_user(email: String, username: String) -&gt; User   {    User {  // 注意这里没有写 return ，Rust 会自动隐式返回最后一个表达式的值            // 除非表达式有分号或者没有表达式。表达式末尾有分号就要显示地写 return        // 在 Rust 语法里，这里可以就只写 username 和 email，值也能正确对应        // 但这样并不好，还是写 username: username 这样看起来更直观逻辑更清楚        // 少打几个字，增加逻辑思考的负担，是不明智的        // username,           // email,        // active: true,        username: username,           email: email,        active: true,    }  // 这里不能加分号，否则函数 build_user 无法隐式返回，只能写 return  }  let user2 = build_user(String::from(&quot;user2@example.com&quot;), String::from(&quot;user2&quot;));  println!(&quot;user2: username = {}, email = {}&quot;, user2.username, user2.email);  // 一种可能可以提供方便的构造语法  // user3 和 user1 只有 email 的值不同，其他都相同，就可以通过这种方法构造 user3  let user3 = User {    email: String::from(&quot;user3@example.com&quot;),    ..user1  };  println!(&quot;user3 (created from user1): username = {}, email = {}&quot;, user3.username, user3.email);  // tuple struct  // 和上面的 struct 区别在于，tuple struct 的成员是没有名字的，要靠位置（下标）来访问  // tuple struct 一般用于最简单的构造，比如后续的 enum 会用到。日常还是用上面那种有成员名字的 struct  struct Color(i32, i32, i32);  struct Point(i32, i32, i32);  let black = Color(1, 2, 3);  let origin = Point(2, 3, 5);  println!(&quot;black = ({}, {}, {})&quot;, black.0, black.1, black.2);  println!(&quot;origin = ({}, {}, {})&quot;, origin.0, origin.1, origin.2);  // Unit-like struct  // 这种 struct 内部没有数据，它就是它自己而已  #[derive(Debug)]  // 给 AlwaysEqual 自动实现 Debug trait ，以便能够用 {:?} 格式化符号打印它的信息  struct AlwaysEqual;  let a = AlwaysEqual;  println!(&quot;a = {:?}&quot;, a);  // {} 和 {:?} 是 println! 两种常用的格式化符号  // {} 是默认的显示格式，用于打印实现了 Display trait 的类型，类似 .to_string() 函数  // {:?} 是调试输出格式，用于打印实现了 Debug trait 的类型，旨在提供详细输出，包含类型的更多内部细节  // 使用 #[derive(Debug)] 可以方便地实现 Debug trait ，所以类型的调试输出一般用这个  // #[derive(Debug)] 需要直接应用于每个需要它的结构体或枚举上。它不是全局性的，不能应用一次就影响整个模块或包  // 这意味着每个想用 {:?} 格式化输出的类型都要单独写一次 #[derive(Debug)]  // 注意这个 derive 只能用于 struct ，enum 和 union  // methods - Struct 的方法是定义在外面的  // 这里给 Point 这个 struct 添加（定义）方法  // 关键词 impl 表示 implementation  impl Point  {    // 注意，函数（方法）的第一个参数是 self（参数名只能是 self 不能是 this 或其他），它的类型是 &amp;Self    // 第一个参数 self: &amp;Self 也可以简写为 &amp;self ，可省略额外的类型标记    fn distance(self: &amp;Self, other: &amp;Point) -&gt; f64    {      let dx = self.0 - other.0;      let dy = self.1 - other.1;      let dz = self.2 - other.2;      ((dx * dx + dy * dy + dz * dz) as f64).sqrt()    }  }  let p1 = Point(1, 2, 3);  let p2 = Point(4, 5, 6);  println!(&quot;distance between p1 and p2 = {}&quot;, p1.distance(&amp;p2));  // enum (like abstract class in OOP, sum type in FP) -  枚举，类似 Java 中的 abstract class  // 这里定义了一个 Mybool 类型，它包含 2 个子类型 MyTrue 和 MyFalse  enum MyBool  {    MyTrue,    // Unit-like struct    MyFalse  }  let x = MyBool::MyTrue;  match x  {    MyBool::MyTrue =&gt; println!(&quot;x is true&quot;),    MyBool::MyFalse =&gt; println!(&quot;x is false&quot;)  }  println!(&quot;----- lists -----&quot;);  // // 用 enum 定义链表：  // // 注意这里用了泛型：可理解为类型 T 作为参数的一种类型函数  // // 这样不同类型就能通过 T 被传入进而得到内容类型不同的 List  // // 类似 List：T =&gt; enum List { Pair(T, List), Nil}  // // 这里意思是：List&lt;T&gt; 要么是空链表 Nil ，要么是一个 Pair 装了一个 T 类型的数据和另一个链表 List&lt;T&gt;  // // 但类似 Pair(T, List&lt;T&gt;) 这样的写法在 Rust 里是不行的，因为这里涉及了递归  // // Rust 的内存管理不知道要为递归分配多少内存空间，所以会报错  // enum List&lt;T&gt;  // {  //   Pair(T, List&lt;T&gt;),  //   Nil  // }  // 在 Rust 里，递归的部分要放在一个 Box&lt;...&gt; 里，即 Box&lt;List&lt;T&gt;&gt; ，才能正确运行  // 这个 Box 相当于其他语言里的「指针」，它的大小是固定的  // 所以这里放进去的是 T 类型的数据，和一个指向另一个 List&lt;T&gt; 的指针  // 于是 Rust 就能确定它的空间大小，从而顺利分配内存 - Rust 是系统语言，必须要知道每个东西占多少空间  enum List&lt;T&gt;  {    Pair(T, Box&lt;List&lt;T&gt;&gt;),    Nil  }  // length 函数，计算输入链表的长度  fn length&lt;T&gt;(ls: &amp;List&lt;T&gt;) -&gt; usize  {    match ls    {      List::Pair(_, tail) =&gt; 1 + length(tail),      List::Nil =&gt; 0,    }  }  let ls1 = List::Pair(1, Box::new(List::Pair(2, Box::new(List::Pair(3, Box::new(List::Nil))))));  println!(&quot;list length = {}&quot;, length(&amp;ls1));  // sum 函数，计算输入链表所有成员的和  fn sum(ls: &amp;List&lt;i32&gt;) -&gt; i32  {    match ls    {      List::Pair(head, tail) =&gt; head + sum(tail),      List::Nil =&gt; 0,    }  }  println!(&quot;list sum = {}&quot;, sum(&amp;ls1));  println!(&quot;----- calculator -----&quot;);  // enum for arithmetic expressions - 用 enum 来构造算术表达式  // 算术表达式 exp 要么是一个 Lit 要么是一个 Binop  // 同样地，递归的部分放进 Box 里  enum Exp  {    Lit(i32),    // tuple struct    Binop(char, Box&lt;Exp&gt;, Box&lt;Exp&gt;)  }  // calculator  fn calc(exp: Exp) -&gt; i32  {    match exp    {      Exp::Lit(n) =&gt; n,      Exp::Binop(op, e1, e2) =&gt;      {        // * 代表 dereferencing ，即读取“引用”对应的值        // 顺便说一下 &amp; 符号用于创建“引用”，而 * 符号用于“解引用”，获取其所指向的值        // 注意，我把所有的「引用」和「指针」都打了引号，代表 Rust 的引用和 C 语言、C++ 的引用（指针）概念不一样        // &amp; 和 * 只能暂时近似理解为「创建引用」和「解引用」的效果，不能认为是等同的概念        // 之后会有例子暴露 Rust 的问题：&amp;&amp;String 和 &amp;String 的类型是否一样        // 准确的理解应该抛弃 C 语言的指针思维，进一步还得查看 Rust 官方文档关于 ownership 的说明        // https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html        // 由于这里的 e1 和 e2 都是 Box&lt;Exp&gt; ，上面提到 Box 其实是“指针”，所以要通过 * 把对应的值取出来        let v1 = calc(*e1);          let v2 = calc(*e2);        match op        {          &#39;+&#39; =&gt; v1 + v2,          &#39;-&#39; =&gt; v1 - v2,          &#39;*&#39; =&gt; v1 * v2,          &#39;/&#39; =&gt; v1 / v2,          _ =&gt; panic!(&quot;Unknown operator&quot;)        }      }    }  }  let exp1 = Exp::Binop(&#39;*&#39;, Box::new(Exp::Lit(2)), Box::new(Exp::Lit(3)));  println!(&quot;2 * 3 = {}&quot;, calc(exp1));  let exp2 = Exp::Binop(&#39;+&#39;, Box::new(Exp::Lit(1)), Box::new(Exp::Binop(&#39;*&#39;, Box::new(Exp::Lit(2)), Box::new(Exp::Lit(3)))));  println!(&quot;1 + 2 * 3 = {}&quot;, calc(exp2));  // 下面是另一个版本的计算器 calc2  // 主要区别在于表达式的定义。  // 上面的表达式 Exp 是 tuple struct ，里面的成员没有名字  // 而下面的 NamedExp 则是常见的 struct ，里面的成员是有名字的  // 推荐写法还是下面这种有名字的 struct ，也就是 NamedExp  // 注意两者的括号类型也有区别  // 可以具体观察对比 exp1 和 exp3 的定义内容  // with named fields  enum NamedExp  {    Lit { n: i32 },    Binop { op: char, e1: Box&lt;NamedExp&gt;, e2: Box&lt;NamedExp&gt; }  }  fn calc2(exp: NamedExp) -&gt; i32  {    match exp    {      NamedExp::Lit { n } =&gt; n,      // free ordering of fields      NamedExp::Binop { e1, e2, op }=&gt;      {        let v1 = calc2(*e1);        let v2 = calc2(*e2);        match op        {          &#39;+&#39; =&gt; v1 + v2,          &#39;-&#39; =&gt; v1 - v2,          &#39;*&#39; =&gt; v1 * v2,          &#39;/&#39; =&gt; v1 / v2,          _ =&gt; panic!(&quot;Unknown operator&quot;)        }      }    }  }  let exp3 = NamedExp::Binop { op: &#39;*&#39;, e1: Box::new(NamedExp::Lit { n: 2 }), e2: Box::new(NamedExp::Lit { n: 3 }) };  println!(&quot;2 * 3 = {}&quot;, calc2(exp3));  // option types (already defined in Rust standard library)  // enum Option&lt;T&gt; {  //   Some(T),  //   None,  // }  // 前面提到的 Option 类型其实也就是一个 enum ，这里我们自己定义一个 MyOption 感受一下  enum MyOption&lt;T&gt; {    Some(T),    None,  }  let x: MyOption&lt;i32&gt; = MyOption::Some(5);  let y: MyOption&lt;i32&gt; = MyOption::None;  println!(&quot;----- MyOption -----&quot;);  match x {    MyOption::Some(n) =&gt; println!(&quot;x = {}&quot;, n),    MyOption::None =&gt; println!(&quot;x is None&quot;),  }  match y {    MyOption::Some(n) =&gt; println!(&quot;y = {}&quot;, n),    MyOption::None =&gt; println!(&quot;y is None&quot;),  }}</code></pre><hr><h3 id="Rust-的内存管理"><a href="#Rust-的内存管理" class="headerlink" title="Rust 的内存管理"></a>Rust 的内存管理</h3><p><strong>Rust</strong> 最重要的功能就是「<strong>内存管理</strong>」。它和其他语言（比如 <strong>Java</strong>）不一样。因为它没有<a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)" target="_blank" rel="noopener">垃圾回收(GC)</a> 。它是靠编译器的静态检查来实现内存管理的。<strong>Rust</strong> 可以静态地保证大部分的内存不会出问题。</p><p><strong>Rust</strong> 的内存管理导致有很多代码写法上的限制，使得 <strong>Rust</strong> 写一些复杂的代码会有点痛苦。这就是为啥这个语言<strong>很</strong>不适合作为初学者的第一门语言。因为太多这个内存管理的东西夹在里面。你就没法思考你的那些逻辑。写一个链表都要想想 <code>Box</code> 。</p><p>总的来说，核心思路有 3 个：</p><ul><li><p>拥有数据所有权 <strong>ownership</strong> 的变量，才能确保数据不会随便失效；borrow 来的数据，别人失效了，你就失效了</p></li><li><p><code>move</code> 转移 <strong>ownership</strong> 会让原变量失效，<code>borrow</code> 不会，要思考是否希望（允许）原变量失效</p></li><li><p>要注意什么情况下会 <code>move</code> ，什么情况下只是 <code>borrow</code> ，以及这两种情况下数据如何读取、如何修改</p></li></ul><pre><code class="lang-Rust">  // ......  // ...... 下面这些代码是接着上文的代码写在 main 函数的函数体里的  // ......  // ---------------------------- Ownership ----------------------------  println!(&quot;--------------- Ownership ---------------&quot;);  let x = 5;  let y = x;  // copy (because i32 is Copy)  println!(&quot;x: {}, y: {}&quot;, x, y);  // Example 1: String  let s1 = String::from(&quot;hello&quot;);  let s2 = s1;                     // move - move 之后变量 s1 就失效了  println!(&quot;s2: {}&quot;, s2);  // error: value borrowed here after move  // println!(&quot;s1: {}&quot;, s1);  // Rust 里的传递基本都是 move ，只有专门标记 &amp; 才是 borrow  // 函数调用的操作数也是发生 move ，例如  f(s2) 后，s2 就失效了（下文有描述）  // 因为你把值传递给函数的参数，本质和变量定义没有差别  // clone  println!(&quot;----- clone -----&quot;);  let s1 = String::from(&quot;hello&quot;);  let s2 = s1.clone();  println!(&quot;s1: {}&quot;, s1);  println!(&quot;s2: {}&quot;, s2);  // borrow  println!(&quot;----- borrow -----&quot;);  let s1 = String::from(&quot;hello&quot;);  let s2 = &amp;s1;  println!(&quot;s1: {}&quot;, s1);  println!(&quot;s2: {}&quot;, s2);  // function that takes ownership  fn take_ownership(s: String)  {    println!(&quot;take_ownership: {}&quot;, s);  }  let s = String::from(&quot;hello&quot;);  take_ownership(s);  // error: value borrowed here after move  // println!(&quot;s: {}&quot;, s);  // function that gives ownership  fn give_ownership() -&gt; String  {    let s = String::from(&quot;hello&quot;);    println!(&quot;give_ownership: {}&quot;, s);    return s;  }  let s = give_ownership();  println!(&quot;s: {}&quot;, s);  fn take_and_give_back(s: String) -&gt; String  {    println!(&quot;take_and_give_back: {}&quot;, s);    return s;  }  let s = String::from(&quot;hello&quot;);  let s1 = take_and_give_back(s);  println!(&quot;s1: {}&quot;, s1);  // borrow of moved value: `s`  // println!(&quot;s: {}&quot;, s);  // function that borrows  fn borrow(s: &amp;String)  {    println!(&quot;borrow: {}&quot;, s);  }  let s = String::from(&quot;hello&quot;);  borrow(&amp;s);  println!(&quot;s: {}&quot;, s);  // mutable borrow  fn mutate(s: &amp;mut String)  {    s.push_str(&quot;, world&quot;);  }  let mut s = String::from(&quot;hello&quot;);  mutate(&amp;mut s);  println!(&quot;after mutatable borrow, s: {}&quot;, s);  // only one mutable borrow is allowed  // let s1 = &amp;mut s;  // let s2 = &amp;mut s;  // println!(&quot;s1: {}, s2: {}&quot;, s1, s2);  // cannot borrow `s` as mutable more than once at a time  let s1 = &amp;mut s;  println!(&quot;s1: {}&quot;, s1);  // can borrow because s1 is no longer used later  let s2 = &amp;mut s;  println!(&quot;s2: {}&quot;, s2);  // println!(&quot;s1: {}&quot;, s1);  // can&#39;t have immutable and mutable borrows at the same time  // let s1 = &amp;s;  // let s2 = &amp;mut s;  // println!(&quot;s1: {}, s2: {}&quot;, s1, s2);  // fn dangle() -&gt; &amp;String {  //   let s = String::from(&quot;hello&quot;);  //   return &amp;s;  // }  // string slice is borrowed reference  let s = String::from(&quot;hello&quot;);  let slice1 = &amp;s[0..2];  // will not compile with this line  // let s1 = s;  println!(&quot;slice1: {}&quot;, slice1);  // Generics  println!(&quot;----- Generics -----&quot;);  // revisit id function  fn id3&lt;T&gt;(x: T) -&gt; T { x }  println!(&quot;id3(5) = {}&quot;, id3(5));  println!(&quot;id3(true) = {}&quot;, id3(true));  // Two arguments must be the same time  fn second1&lt;T&gt;(x: T, y: T) -&gt; T  {    return y;  }  println!(&quot;second1(1, 2) = {}&quot;, second1(1, 2));  println!(&quot;second1(true, false) = {}&quot;, second1(true, false));  // error: mismatched types  // println!(&quot;second1(1, true) = {}&quot;, second1(1, true));  // Two arguments can be different types  fn second2&lt;T, U&gt;(x: T, y: U) -&gt; U  {    return y;    // Change to return x will not compile    // return x;  }  println!(&quot;second2(1, 2) = {}&quot;, second2(1, 2));  println!(&quot;second2(true, false) = {}&quot;, second2(true, false));  println!(&quot;second2(1, true) = {}&quot;, second2(1, true));  // Lifetime (very similar to generics)  // Lifetime is a way to specify relationship between references  println!(&quot;----- Lifetime -----&quot;);  // Won&#39;t compile without lifetime specifier (why?)  // fn second_string1(s1: &amp;String, s2: &amp;String) -&gt; &amp;String  // {  //   return s2;  // }  // broad lifetime (not knowing exact which one is returned)  fn second_string2&lt;&#39;a&gt;(s1: &amp;&#39;a String, s2: &amp;&#39;a String) -&gt; &amp;&#39;a String  {    return s2;  }  let s1 = String::from(&quot;s1&quot;);  let s2 = String::from(&quot;s2&quot;);  let s3 = second_string2(&amp;s1, &amp;s2);  // s1 moved here, but compiler doesn&#39;t know s3 is not referring to s1  // compiler thinks s3 could refer to both s1 and s2  // let s4 = s1;  println!(&quot;s3: {}&quot;, s3);  // This one works because we know s3 refers to s2, not s1  fn second_string3&lt;&#39;a,&#39;b&gt;(s1: &amp;&#39;a String, s2: &amp;&#39;b String) -&gt; &amp;&#39;b String  {    return s2;    // Change to return s1 will not compile    // return s1;  }  let s1 = String::from(&quot;s1&quot;);  let s2 = String::from(&quot;s2&quot;);  let s3 = second_string3(&amp;s1, &amp;s2);  // s1 moved here, but compiler konws know s3 is not referring to s1  let s4 = s1;  println!(&quot;s3: {}&quot;, s3);  // We don&#39;t know which is longer string  // so lifetime of returned reference could be either of s1 or s2  fn longer_string&lt;&#39;a&gt;(s1: &amp;&#39;a String, s2: &amp;&#39;a String) -&gt; &amp;&#39;a String  {    if s1.len() &gt; s2.len()    {      return s1;    }    else    {      return s2;    }  }  let s1 = String::from(&quot;hello&quot;);  let s2 = String::from(&quot;world!&quot;);  let s3 = longer_string(&amp;s1, &amp;s2);  // s1 moved here, and compiler knows s3 could refer to s1 or s2  // so uncommenting either of the following lines will not compile  // let s4 = s1;  // let s4 = s2;  println!(&quot;longer string: {}&quot;, s3);  // Lifetime in struct  println!(&quot;----- Lifetime in struct -----&quot;);  // Error: missing lifetime specifier  // struct Person {  //   name: &amp;String,  //   email: &amp;String  // }  // Struct 里标记 lifetime 是 Rust 复杂多余的设计  // 这意味着这个 Struct 只能临时用一下  // 一旦出了 name1 和 email1 的作用域，p1 就用不了了  // 正常的 Struct 都应该是内部成员的 owner 而不是 borrow  // 这和函数参数的 lifetime 是不一样的  // GitHub 上的 Rust 项目，只有【极少数】的 Struct 里存在这种 reference  // 所以建议 struct 的成员不使用 &amp; ，即不使用 reference 这样的引用成员  struct Person&lt;&#39;a&gt; {    name: &amp;&#39;a String,    email: &amp;&#39;a String  }  let name1 = String::from(&quot;name1&quot;);  let email1 = String::from(&quot;email1&quot;);  let p1 = Person { name: &amp;name1, email: &amp;email1 };  // name1 moved here, compiler knows p1 contains reference to name1 and email1  // so uncommenting either of following lines will not compile  // let name2 = name1;  // let email2 = email1;  println!(&quot;p1: name = {}, email = {}&quot;, p1.name, p1.email);  // Lifetime of hashmaps  println!(&quot;----- Lifetime of hashmaps -----&quot;);  let mut table = HashMap::new();        // 这里 HashMap 的类型应为 HashMap&lt;String, String&gt;  // 但 Rust 是通过下面的 table.insert(key1, value1); 推导出这个类型的  // 这是个错误的设计，不应该从调用的地方反推 HashMap 类型，应该在定义的时候就写清楚  // 逻辑上，类型标记本来就是要检查后续数据是否正确使用，而现在却要从后续数据的使用推导，万一后续数据用错了呢？  // 此外，定义的时候不写类型，就要用人脑来推导一下才能理解代码，大大降低了代码可读性，增加理解难度  let key1 = &quot;key1&quot;.to_string();  let value1 = &quot;value1&quot;.to_string();  table.insert(key1, value1);  // Can no longer use key1 and value1  // println!(&quot;key1: {}&quot;, key1);  // println!(&quot;value1: {}&quot;, value1);  // boxes  println!(&quot;----- boxes -----&quot;);  let x = 5;  let y = Box::new(5);    // Box 相当于指针，Box::new(5) 效果相当于创造一个指向 5 的指针：&amp;5  // let y = &amp;x;          // also work  println!(&quot;y: {}&quot;, y);  // 被 box 封装的数据无法在其他位置被更改，只能在所有权变量处更改，无法从其他变量访问更改  // 因为如果从其他变量修改，那原始变量就会失效  // box 独占封装的数据，不能像 Rc 引用计数那样共享数据，比如 2 个 box 实现的 list 无法共享其中部分数据  // 比如 box 实现的 ls1 中一部分是 ls2 ，则 ls2 会发生 move 转移 ownership ，这将使 ls2 变量失效不可用  // assert_eq! 接受两个参数（表达式），比较它们是否相等。若不相等，程序将 panic，并显示两个不匹配值的信息  // 主要用于测试中，确保代码在开发和维护过程中符合预期行为  assert_eq!(5, x);  assert_eq!(5, *y);  // Box 会转移所有权（ownership） ，即 move 操作  // 下面 Box::new(s) 使得 s 的所有权转移给了 Box ，b 这个 Box 是 &quot;hello&quot; 的新 owner  // 所以下一行 move s 给 s1 的操作就会报错  // 后续的 Rc (Reference Counted) 也是同样的这个行为，Rc::new(x) 也会拥有 x 的数据  let s = String::from(&quot;hello&quot;);  let b = Box::new(s);  // let s1 = s;  // error: use of moved value: `s`  // Define smart pointer - 可以认为 Box 和 Rc 都是 Smart Pointer 和 C++ 的原理一样  // 提示：MyBox 是上文提到的 tuple struct ，里面只存有一个数据，通过下标来访问，如 mb.0  struct MyBox&lt;T&gt;(T);  impl&lt;T&gt; MyBox&lt;T&gt; {      fn new(x: T) -&gt; MyBox&lt;T&gt; {          MyBox(x)      }  }  let x = String::from(&quot;hello&quot;);  let y = MyBox::new(x);      // 这行把 x 数据 move 给了一个 MyBox ，然后这个 MyBox 的 owner 则是 y  // let z = x;               // error: use of moved value: x  // 使用 C++ 的代码里的 unique_ptr 可以实现同样的效果  // 不过 C++ 中要明确写出是在 move ，即 move(x) ，而 Rust 中默认就是 move 操作  // unique_ptr&lt;string&gt; x = make_unique&lt;string&gt;(&quot;hello&quot;);  // unique_ptr&lt;string&gt; z = move(x);  let x = 5;  let y = MyBox::new(x);  // let z = MyBox(x);    // also work  // 直接使用 MyBox(x) 构造实例的方式直接通过类型的构造器初始化，适用于简单的包装或当不需要额外逻辑处理的情况。  // 这通常更简单，但功能上可能较为有限，主要用于简单地包装或转换类型。  // MyBox::new(x) 是一个更常见的构造函数模式，其中 new 是一个静态方法，用于创建并初始化类型的实例。  // 这种方式可以包含更复杂的初始化逻辑。如设置默认值、进行验证或其他必要的设置步骤。  use std::ops::Deref;  // Deref Trait - trait 相当于 Java 中 interface 的概念，即要求实现 interface 中规定的方法，如 get 和 add 等  impl&lt;T&gt; Deref for MyBox&lt;T&gt; {    type Target = T;   // 指定 Target 为 T 类型    // Self::Target 是 Deref trait 的一个关联类型，表示被解引用时得到的目标类型，即 self.0 的类型    // 所以，这里 deref 函数返回的 &amp;self.0 是 &amp;Self::Target 类型，&amp; 代表它是个引用的类型    fn deref(&amp;self) -&gt; &amp;Self::Target {        &amp;self.0    }    // C++ 中类似的 smart pointer 定义    // T&amp; operator * () const { *return m_ptr; }    // T* operator -&gt; () const { return m_ptr; }  }  // 当使用 * 符号的时候，其实就是在调用这个 deref 函数  // 所以 *y 相当于 y.deref() ，从上面的代码得知此时返回的是一个引用，即 &amp;self.0  // 然后 Rust 又会再自动地隐式解引用一次，于是得到嘞 self.0 ，也就是真正的值  assert_eq!(5, x);  assert_eq!(5, *y);  // equiv to *(y.deref()) , *y is &amp;i32 type  assert_eq!(5, *(y.deref()));  fn foo(x: &amp;i32) {    println!(&quot;x: {}&quot;, x);  }  foo(&amp;y);  // Drop trait  println!(&quot;----- Drop trait -----&quot;);  struct Pointer {    data: String,  }  // 这个 drop trait 相当于 C++ 里的 destructor  impl Drop for Pointer {    fn drop(&amp;mut self) {      // drop 出了作用域后就会打印这些信息作为 debug 信息，让人知道确实 drop 掉了      println!(&quot;Dropping Pointer with data `{}`!&quot;, self.data);    }  }  let a = Pointer {    data: String::from(&quot;a&quot;),  };  {    let b = Pointer {        data: String::from(&quot;b&quot;),    };  }  drop(a);  let c = Pointer {      data: String::from(&quot;c&quot;),  };  let d = Pointer {      data: String::from(&quot;d&quot;),  };  println!(&quot;Pointers created.&quot;);  // Rc (Reference Counted) - 引用计数  println!(&quot;----- Rc -----&quot;);  // shared list can&#39;t work with Box - Box 的链表实现无法共享数据  // let a = List::Cons(2, Box::new(List::Cons(3, Box::new(List::Nil))));  // let b = List::Cons(5, Box::new(a));  // a moved here  // let c = List::Cons(8, Box::new(a));  // can&#39;t use a again  // Rc 的主要功能就是共享数据，也就是 Rc::clone 这个操作  // Rc::clone 不会复制数据，只会复制一个引用  // Rc::clone 的参数类型也必须是一个 Rc 类型  use std::rc::Rc;  enum List2 {    Cons(i32, Rc&lt;List2&gt;),    Nil,  }  let a = Rc::new(List2::Cons(2, Rc::new(List2::Cons(3, Rc::new(List2::Nil)))));  let b = Rc::new(List2::Cons(5, Rc::clone(&amp;a)));    // Rc::clone(arg) 接收的参数类型 arg 必须是一个 Rc 的引用：&amp;Rc&lt;_&gt;  let c = Rc::new(List2::Cons(8, Rc::clone(&amp;a)));    // 这里 a 是一个 Rc ，所以 &amp;a 就是一个 &amp;Rc&lt;_&gt;  println!(&quot;a&#39;s ref count: {}&quot;, Rc::strong_count(&amp;a));  // 查看变量 a 的引用次数  println!(&quot;b&#39;s ref count: {}&quot;, Rc::strong_count(&amp;b));  println!(&quot;c&#39;s ref count: {}&quot;, Rc::strong_count(&amp;c));  drop(b);  drop(c);  // 释放 b 和 c 之后，a 的引用次数减少  println!(&quot;a&#39;s ref count after dropping b, c: {}&quot;, Rc::strong_count(&amp;a));    // 虽然 Rc::clone 可以让我们在多个地方共享数据，但它并不提供数据的内部可变性  // 以下面这个 struct 为例，使用 Rc 之后，无法更改成员 name 的值  #[derive(Debug)]  struct TestRc  {    name: String,    age: i32,  }  let mut tr1 = TestRc   {    name: String::from(&quot;user1&quot;),    age: 19,  };  println!(&quot;original tr1: {:?}&quot;, tr1);  tr1.name = String::from(&quot;guest&quot;);   // 可更改 tr1 内部成员 name 的内容  println!(&quot;changed tr1: {:?}&quot;, tr1);  // 套上 Rc 封装之后，就无法更改 tr1 内部数据的内容了  // 注意这里 tr1 发生 move 了，tr1 失效，新 owner 是 Rc ，而 Rc 的 owner 是变量 rc_tr1  let rc_tr1 = Rc::new(tr1);  // rc_tr1.name = String::from(&quot;guest_2nd&quot;);   // cannot assign to data in an `Rc  // *rc_tr1.name = String::from(&quot;guest_3rd&quot;);  // mismatched types  // 如果希望用 Rc::clone 共享数据的同时，还能够改变变量内部数据，就要配合 RefCell 使用  // RefCell - 本质相当于 Reader-Writer Lock（读写锁）  // 可以有 2 个（多个）immutable 的 borrow（Reader）  // 但只能有 1 个 mutable 的 borrow（Writer）  println!(&quot;----- RefCell -----&quot;);  use std::cell::RefCell;  // Reader-Writer Lock（读写锁）是一种常用的同步机制，用来解决多个线程同时访问同一资源（如数据或文件）时的并发问题。  // 读写锁非常适合那些读操作远多于写操作的场景，因为它允许多个读线程同时访问资源，而写线程则需要独占访问。  // 与读写锁并列的还有互斥锁（mutex）等  let value = RefCell::new(42);  // 可修改的 mut_borrow 相当于 writer  // 如果一个 writer 把一个对象锁掉了，那所有的 reader 就都没法读取了  let mut mut_borrow = value.borrow_mut(); // 调用 .borrow_mut 函数，并加关键词 mut 来定义  println!(&quot;value: {}&quot;, *mut_borrow);  *mut_borrow = 9;                         // 改变指针（引用） mut_borrow 所指向的数据  println!(&quot;value: {}&quot;, *mut_borrow);  drop(mut_borrow);   // 释放 mut_borrow 后，下面才能调用 .borrow() ，因为读写锁不能同时读和写  // 不可修改的 imm_borrow 相当于 reader  // 同理，如果一个 reader 拿到了锁，那 writer 就拿不到这个锁（没法写入）  // 但是其他的 reader 也能拿到这个锁  let imm_borrow1 = value.borrow();  println!(&quot;value: {}&quot;, *imm_borrow1);  let imm_borrow2 = value.borrow();  println!(&quot;value: {}&quot;, *imm_borrow2);  // Rc 配合 RefCell 可以让我们既可以 Rc::clone 共享数据，又可以 .borrow_mut 来改变数据  // 这对复杂一点的数据结构来说是必要而实用的工具，比如解释器里的数据结构  // 不过新手也许还有个疑问：封装到底是谁包裹谁？是 Rc&lt;RefCell&lt;_&gt;&gt; 还是 RefCell&lt;Rc&lt;_&gt;&gt; ？  // 其实从上面 Rc 部分的例子就能知道，我们可以改动 tr1 ，但无法改动 Rc&lt;tr1&gt;  // 对于 RefCell&lt;Rc&gt; ，当我们调用 .borrow_mut() 之后，拿到的就是 Rc&lt;_&gt; ，而我们无法改动 Rc&lt;_&gt;  // 对于 Rc&lt;RefCell&lt;_&gt;&gt; ，调用 .borrow_mut() 后拿到的是数据，可以被更改  // 所以正确的封装顺序应该是 Rc&lt;RefCell&gt;  println!(&quot;----- Rc with RefCell -----&quot;);  let tr2 = TestRc     // 这里定义 tr2 不需要 mut  {    name: String::from(&quot;user2&quot;),    age: 17,  };  let tr2_rfrc = Rc::new(RefCell::new(tr2));  // tr2 发生 move 转移所有权，新 owner 是 RefCell  println!(&quot;tr2_rfrc: {:?}&quot;, tr2_rfrc.borrow());  // tr2_rfrc: TestRc { name: &quot;user2&quot;, age: 17 }  tr2_rfrc.borrow_mut().name = String::from(&quot;admin&quot;);  // 改变 name 成员（field）的值  println!(&quot;changed tr2_rfc: {:?}&quot;, tr2_rfrc.borrow());  // tr2_rfrc: TestRc { name: &quot;admin&quot;, age: 17 }  // 有了 RefCell 和 Rc，我们还可以造出一个「环」来：  // A -&gt; B -&gt; A（ A 指向 B ，B 又指向 A ）  // 这样内存就可能会泄露了，因为 Rc（Reference Counting）互相指来指去就不会为 0 了  // 这会使得内存就会无法释放，导致泄露（Memory Leak）  // 不过正常的垃圾回收机制可以正确地处理这类「循环引用」导致的问题  // reference cycles  println!(&quot;----- reference cycles -----&quot;);  struct Node {    value: i32,    next: Option&lt;Rc&lt;RefCell&lt;Node&gt;&gt;&gt;,  }  // 定义 node1 和 node2 两个被 Rc 和 RefCell 封装包裹的 Node  let node1 = Rc::new(RefCell::new(Node {      value: 1,      next: None,  }));  // 这里 Node2 的成员（field）next 通过 Rc::clone 指向了 node1  let node2 = Rc::new(RefCell::new(Node {      value: 2,      next: Some(Rc::clone(&amp;node1)),  }));  // 由于有 RefCell ，所以可以使用 borrow_mut  // 这里 borrow_mut 取得一个指向 node1 数据且可以改变这些数据的东西  // 然后 .next = Some(Rc::clone(&amp;node2)) 让 node1 中本来为 None 的值换成了 Node2  // 这样 node1 和 node2 就相互指向了  // creating cycle  node1.borrow_mut().next = Some(Rc::clone(&amp;node2));  // node2 也可以指向自己  node2.borrow_mut().next = Some(Rc::clone(&amp;node2));} // &lt;--- 这个是 main 函数的花括号</code></pre><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Programming Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上手 Java</title>
      <link href="/2024/03/23/java-basics/"/>
      <url>/2024/03/23/java-basics/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.java.com" target="_blank" rel="noopener">Java</a> 是一门非常成熟的工业级静态类型语言。对于新手来说，它是<strong>体验</strong>了解「静态类型系统」的绝佳语言之一。</p><p>所谓<a href="https://en.wikipedia.org/wiki/Type_system" target="_blank" rel="noopener"><strong>静态类型</strong></a>，就是对程序中各数据的类型进行<strong>严格规范</strong>的一种语言特性。比如在 <strong>Java</strong> 中，<strong>所有</strong>变量在定义的时候都需要声明标记它的数据类型。这会让代码看起来有点“啰嗦”，不够简洁。但好处是，代码可以无需运行就能通过类型不匹配提前发现问题，保证代码可靠性（静态类型检查）。此外，标记类型也让编译后的程序不用每次都询问一下数据的类型而减小了计算开销，提高程序性能。比如 <strong>Java</strong> 比非编译执行的语言 <strong>Python</strong> 就快 30 多倍。</p><p>静态类型的语言也使得 IDE（集成开发环境，比如下文介绍的 IntelliJ IDEA）能更好地支持它，比如可以实现精准的<strong>语义跳转</strong>和<strong>重构</strong>（比如可靠的变量换名）等操作。</p><p>通过 <strong>Java</strong> 还可以体验面向对象（<a href="https://en.wikipedia.org/wiki/Object-oriented_programming" target="_blank" rel="noopener">OOP</a>）的设计精髓：面向对象主要不在于节省代码、重用代码——这些其他非面向对象语言也能做到——而在于<strong>表达各种类型之间的关系</strong>（其实就是数学上集合的包含关系）。</p><blockquote><p>它本来这种类型它不是这种集合的包含关系，他还去继承一下。就因为他能省…少打一点代码。结果后来就越弄越复杂。看不懂了。</p><footer><strong>Ian</strong></footer></blockquote><p>还有就是面向对象的设计把各种函数以它的方式整理起来（使用类似 <code>object.method</code> 这样的方式访问），让函数更有“组织性”：</p><ul><li>都是访问 <code>e1</code> 的内容，对比 <code>binopE1(exp)</code> 和 <code>binop.e1</code> 这两种表达方式，后者阅读上会更加直观一点</li></ul><hr><h3 id="Java-编程环境"><a href="#Java-编程环境" class="headerlink" title="Java 编程环境"></a>Java 编程环境</h3><p><a href="https://www.java.com" target="_blank" rel="noopener">Java</a> 是一个需要<strong>编译</strong>才能运行的语言，不像其他一些语言那样 <code>.py</code> <code>.js</code> 等文件写好了直接就能运行。在学习和开发的时候，最好能打开一个命令行窗口（Ternimal），进行相关操作才比较方便。</p><ul><li><p>安装 <strong>JDK</strong><br><a href="https://www.oracle.com/hk/java/technologies/downloads/#jdk22-mac" target="_blank" rel="noopener">JDK</a>（Java Development Kit）是用于开发 Java 应用程序的软件包，提供了运行 Java 代码所需的工具和库，比如编译器（javac）。通过 <a href="https://formulae.brew.sh/formula/openjdk" target="_blank" rel="noopener">Hombrew</a> 来安装。完成后就可以在终端命令行里使用 <code>java</code> 和 <code>javac</code> 了：</p><pre><code class="lang-bash">## 东西比较多，注意保持网络通畅$ brew install openjdk## brew install java## 安装的是由 Apple 或者 Apple 授权的 Java 版本，通常是 Oracle JDK## brew install openjdk ## 安装的是由 OpenJDK 项目提供的开源 Java 版本，与 Oracle JDK 功能上是兼容的## 不同的是 OpenJDK 是由社区维护的## 安装完成之后，应该要能用这个命令查看 Java 的版本$ java --versionopenjdk 21.0.2 2024-01-16OpenJDK Runtime Environment Homebrew (build 21.0.2)OpenJDK 64-Bit Server VM Homebrew (build 21.0.2, mixed mode, sharing)</code></pre><p><code>Tips：新手推荐在下文 IntelliJ IDEA 的 onboarding tour 教学过程中安装 JDK，省去各种复杂的配置</code></p></li><li><p>安装 <strong>IntelliJ IDEA</strong><br><a href="https://www.jetbrains.com/help/idea/creating-and-running-your-first-java-application.html" target="_blank" rel="noopener">IntelliJ IDEA</a> 是 <a href="https://www.jetbrains.com" target="_blank" rel="noopener">JetBrains</a> 公司推出的集成开发环境（IDE）。对 <strong>Java</strong> 编程来说，使用上比 <a href="https://code.visualstudio.com" target="_blank" rel="noopener">VS Code</a> 更加方便一些。对于初学者，下载安装 <strong>IntelliJ IDEA Community Edition</strong> 这个<strong>免费的</strong>版本就够用了。</p><p><img src="IntelliJ.png" alt="Welcome to IntelliJ IDEA" style="width: 800px; height: auto;"></p><p>可以看到，<strong>IntelliJ IDEA</strong> 有极其友好的 onboarding 入门教程。点击 <strong>Start Tour in Java</strong> 试试吧。<br>这个 <strong>Quick onbording tour</strong> 的过程还可以根据提示，非常方便地安装 <strong>JDK</strong> 。</p></li></ul><hr><h3 id="开始编程"><a href="#开始编程" class="headerlink" title="开始编程"></a>开始编程</h3><p>先来简单地走一遍完整流程，了解一下整个 Java 编程作业的大体过程。</p><ul><li><p><strong>新建 <code>.java</code> 文件：</strong></p><pre><code class="lang-bash">  ## 打开 Terminal，进入到要进行编程的目录  $ cd ~/Documents/prog  ## 创建新的工作目录  $ mkdir lesson9  $ cd lesson9/  ## 在这个目录下建立一个 .java 文件  ## 注意这里文件名第一个字母要大写，因为后续文件里要写一个类 class Lesson9  $ touch Lesson9.java</code></pre><p>  对代码的分散管理是 Java 的特点。这也导致了 Java 编程的过程中会产生很多文件。所以通常会建立一个工作目录来进行作业。这里 <code>.java</code> 文件的名字是有命名规则要求的，这是 Java 语言的一个规范：</p><ol><li>若文件中有公共类 <code>public class</code> ，则文件名<strong>必须</strong>和该类的名字一样，一个文件<strong>只能有一个</strong>公共类；</li><li>若无公共类，则文件名无要求，但最好用易理解可维护的名字，如此处用代表性类的名字 <code>Lesson9</code>；</li></ol></li><li><p><strong>编辑上述文件写入 <code>Java</code> 代码：</strong></p><pre><code class="lang-Java">  // Lesson9.java   class Lesson9  {    public static void main(String[] args)    {      System.out.println(&quot;Magnifique！&quot;);    }  }</code></pre><p>  <strong>Lesson9.java</strong> 文件里定义了一个类 <code>Lesson9</code> 。类里则定义了一个函数 <code>main</code> 。该函数接收一个参数 <code>args</code> 。其中 <code>String[]</code> 标记了参数 <code>args</code> 的类型。它是一个存储字符串对象的<strong>数组类型</strong>。<code>void</code> 代表这个函数没有返回值，也可以认为该函数的返回类型是 <strong>void</strong> 。<strong>main</strong> 函数里是个打印语句，打印出字符串 <code>&quot;Magnifique&quot;</code>。</p><p>  <code>public</code> 表示 <strong>main</strong> 函数在 <strong>Lesson9</strong> 这个类的外面也可以被访问和调用。与之相对的是 <code>private</code> ，表示只能在类内部才能访问调用这个函数。如果两者都没有，那这个函数就有<strong>另外的作用范围</strong>。</p><p>  <code>static</code> 表示 <strong>main</strong> 是一个<strong>普通的函数</strong>（function），而不是类中的<strong>方法</strong>（method），它的调用方式是 <code>main(args)</code> 。如果没有 <code>static</code> 标记，它的调用方式就是 <code>(New Lesson9()).main(args)</code> 了。<br>  Java 默认所有的函数都是方法（method）。方法存在一个内部可用的参数是 <code>this</code> ，用 <code>static</code> 标记的普通函数则没有 <code>this</code> 这个参数。</p><p>  <code>public</code> 和 <code>static</code> 的位置可以互换。</p></li></ul><ul><li><p><strong>编译和运行：</strong><br>  <code>.java</code> 文件里的代码写好之后，需要先用 <code>javac</code> 命令将其编译成 <code>.class</code> 文件（字节码 bytecode）。然后再用 <code>java</code> 命令来运行编译好的 <code>.class</code> 文件。使用 <code>java</code> 命令运行的时候，只需写文件名就行，不用写 <strong>.class</strong> 这个后缀。<br>  比如下面的例子里，<code>java Lesson9</code> 就能运行。</p><pre><code class="lang-bash">  ## 切换回 Terminal  $ pwd  ~/Documents/prog/lesson9  ## 可以看到，当前目录下只有一个上面编辑好的文件  $ ls  Lesson9.java  ## 编译 .java 文件 - javac 这个命令代表 java compiler  $ javac Lesson9.java  ## 可以看到，当前目录下多了个 .class 文件  $ ls  Lesson9.class     Lesson9.java  ## 运行 .class 文件，打印出字符串 &quot;Magnifique！&quot;  $ java Lesson9  Magnifique！</code></pre><p>为什么要把编译和运行分开，而不是像解释器那样直接运行代码？因为直接运行会有很多重复的操作（主要是反复询问程序的结构和类型，比如问这是一个 if 吗？是的话就要计算 condition 表达式的值。编译之后就不用问，而是到这步直接计算 condition 的值）。如果先编译再运行，它会去掉很多重复的操作。这样代码就会快很多。这就是为啥一般这种工业化的语言它都会稍微编译一下。</p></li></ul><hr><h3 id="更顺手的-IntelliJ"><a href="#更顺手的-IntelliJ" class="headerlink" title="更顺手的 IntelliJ"></a>更顺手的 IntelliJ</h3><p>当需要频繁使用 Java 写些严肃点的东西时，上面的方式就不那么好用了。使用 <a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noopener">IntelliJ IDEA</a> 编程会更加高效。跟着 IntelliJ 的 onboarding 入门教程走一遍就能很快上手，这里主要记录一下常用快捷键和技巧：</p><p><strong>快捷键：</strong></p><ul><li><strong>编译并运行</strong>代码：<code>control + R</code>（ MacOS 系统）；</li><li>快速<strong>排版</strong>（格式化）所有代码：<code>cmd + option + L</code>（ MacOS 系统）；</li><li><strong>注释/取消注释</strong>代码（选中后按）：<code>cmd + /</code>（ MacOS 系统）；</li><li>显示光标位置代码可能的改善操作（常用于处理 warning）：<code>option + Return</code>（ MacOS 系统）；</li><li>搜索（若有选中的内容，则它会自动进入搜索框）：连续按 <strong>2</strong> 次 <code>Shift</code> 键；</li></ul><p><strong>技巧：</strong></p><ul><li>设置缩进空格数：<code>Preferences</code> -&gt; <code>Editor</code> -&gt; <code>Code Style</code> -&gt; <code>Java</code> -&gt; <code>Tabs and Indents</code> -&gt; 设置 <code>Indents</code> 空格数；</li><li>设置 <strong>if-else</strong> 另起一行：<code>Preferences</code> -&gt; <code>Editor</code> -&gt; <code>Code Style</code> -&gt; <code>Java</code> -&gt; <code>Wrapping and Braces</code> -&gt; <code>&#39;if()&#39; statement</code> -&gt; 勾选 <code>&#39;else&#39; on new line</code>；</li><li>关闭类型、变量名等提示：<code>Preferences</code> -&gt; <code>Editor</code> -&gt; <code>Inlay Hints</code> -&gt; 取消勾选 <code>Code vision</code>、<code>Parameter names</code> 和 <code>Types</code>；</li><li><strong>Run with Coverage</strong> 功能可以检查测试代码的覆盖率</li></ul><hr><h3 id="Java-语言基本知识"><a href="#Java-语言基本知识" class="headerlink" title="Java 语言基本知识"></a>Java 语言基本知识</h3><ul><li><p>Java 的文件里要有一个 main 函数</p></li><li><p>语法上，若你的 if 里只有一行，可以不打花括号，但这不是一个好的做法。好一点的编程规则都要求打上花括号，哪怕只有一行。</p></li><li><p>Java 的类要用关键词 <code>new</code> ，这是一个好设计。比如 <code>new Dog()</code> 如果写成 <code>Dog()</code> ，就和普通函数混淆了。加一个 <code>new</code> 就能知道不是普通函数，而是一个类，或者某种构造函数。</p></li><li><p>如果你的值，它的实际的类型是这个变量标记类型的子类型，你就可以用这个父类的变量指向一个子类的对象：<code>Animal dog = new Dog();</code></p></li><li><p>为了通用，变量的类型一般都尽可能标记成上层的父类型（写高一点），这样后期更改实现就简单很多</p></li><li><p>在 Java 中，类的名称通常遵循一种命名约定，即类名的首字母应该大写。这是一种广泛接受的编程规范，被称为“大驼峰命名法”（PascalCase）。按照这个规范，类名的每个单词的首字母都要大写，而单词之间不使用下划线或其他分隔符。</p></li><li><p>虽然在 Java 中，类名的首字母一般应该大写，但从语法上讲，类名的首字母也可以小写。但是，强烈建议遵循命名约定，使用大写字母开头的类名，以便与变量名（小驼峰命名法）等其他命名约定区分开来，并且符合 Java 社区的编程习惯和规范。这样可以增加代码的可读性和可维护性，使代码更符合行业标准。</p></li><li><p>Java 里面，所有不是整数之类那种特别小的类型的，凡是你用 <code>new</code> 创建的那些对象——虽然你没有写那个指针的符号——它全都是指针。Java 里面几乎全都是 <strong><a href="https://www.ibm.com/docs/en/i/7.4?topic=calls-pass-by-reference" target="_blank" rel="noopener">Pass by Reference</a></strong> ，除了 <code>int</code> 之类的它拷贝了一下。</p></li></ul><hr><h3 id="Java-基本数据类型"><a href="#Java-基本数据类型" class="headerlink" title="Java 基本数据类型"></a>Java 基本数据类型</h3><ul><li><p>整数 - <strong>int</strong></p><pre><code class="lang-java">// TO DO</code></pre></li><li><p>浮点数 - <strong>float</strong><br>整数和浮点数在电脑里是有差别的，整数和浮点数混合计算会被转化为浮点数，结果也是浮点数</p><pre><code class="lang-java">// TO DO</code></pre></li><li><p>字符串 - <strong>string</strong><br>可以用单引号 <code>&#39;hello&#39;</code> ，也可以用双引号 <code>&quot;hello&quot;</code><br>一个常用的字符串方法：<a href="https://docs.python.org/3/library/stdtypes.html#str.split" target="_blank" rel="noopener"><code>str.split()</code></a></p><pre><code class="lang-java">// TO DO</code></pre></li><li><p>布尔类型 - <strong>bool</strong></p><pre><code class="lang-java">// TO DO</code></pre></li></ul><hr><h3 id="基本的数据结构"><a href="#基本的数据结构" class="headerlink" title="基本的数据结构"></a>基本的数据结构</h3><ul><li><p>列表 - <strong>List</strong></p><pre><code class="lang-java">// TO DO</code></pre></li></ul><hr><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><pre><code class="lang-java">// TO DO</code></pre><hr><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><pre><code class="lang-java">// TO DO</code></pre><hr><h3 id="条件分支-if-语句"><a href="#条件分支-if-语句" class="headerlink" title="条件分支 - if 语句"></a>条件分支 - if 语句</h3><pre><code class="lang-java">static int fib(int n){  if (n == 0)  {    return 0;  }  else if (n == 1)  {    return 1;  }  else  {    return fib(n - 1) + fib(n - 2);  }}</code></pre><hr><h3 id="异常-Exception"><a href="#异常-Exception" class="headerlink" title="异常 - Exception"></a>异常 - Exception</h3><pre><code class="lang-java">// // 运行时的 Exception（RuntimeException）表示类型系统不会检查它public T get(int index)  // 这行没写 throw IndexOutOfBoundsException ，因为这是运行时的 Exception{  if (index &gt;= size)  {    throw new IndexOutOfBoundsException(&quot;Input index: &quot; + index + &quot; is out of bound. &quot;);  }  else  {    return this.data[index];  }}</code></pre><p>RuntimeException 就是你无能为力的一些事情，所以不需要去 try-catch 它。</p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Programming Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>针对 Scheme 的 Emacs 编程环境设置</title>
      <link href="/2022/05/16/emacs-setup/"/>
      <url>/2022/05/16/emacs-setup/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.gnu.org/software/emacs/" target="_blank" rel="noopener">GNU Emacs</a> 是开源社区中 <a href="https://www.gnu.org" target="_blank" rel="noopener">GNU</a> 操作系统的一款古老而嚣张的编辑器。软件的上手涉及一些麻烦的初始设置，对新手来说不算友好。但之所以要用它，主要是为了更好地用 <a href="https://schemers.org" target="_blank" rel="noopener">Scheme</a> 语言来编程。相比对于新手最友好的上手软件 <a href="https://racket-lang.org" target="_blank" rel="noopener">Racket</a> 来说，Emacs 可以通过设置，方便地（其实刚开始也没有特别方便）使用由 <strong>R. Kent Dybvig</strong> 设计的、当今性能和可靠性都最强的 <a href="https://github.com/cisco/ChezScheme" target="_blank" rel="noopener">Chez Scheme</a> 来运行我们的代码。</p><blockquote><p>I am the principal developer of the now open-source Chez Scheme, a highly reliable, highly efficient dynamic language and implementation.</p><footer><strong>R. Kent Dybvig</strong></footer></blockquote><p>本文内容将以 MacOS 系统为例进行讲解，其他系统的操作是类似的。</p><hr><h3 id="安装使用-Chez-Scheme"><a href="#安装使用-Chez-Scheme" class="headerlink" title="安装使用 Chez Scheme"></a>安装使用 Chez Scheme</h3><p><a href="https://github.com/cisco/ChezScheme" target="_blank" rel="noopener">Chez Scheme</a> 的安装在<a href="https://github.com/cisco/ChezScheme/blob/main/BUILDING" target="_blank" rel="noopener">介绍页面</a>中的描述看似很复杂（对新手算是不友好的），实际则十分简单：</p><pre><code class="lang-bash">## 这里准备将 Chez Scheme 安装在 ~/apps 这个目录下## 打开终端 terminal 输入 cd 命令进入该目录（你也可以选择其他的目录安装）$ cd ~/apps## 运行 git clone 命令，将 Chez Scheme 下载到当前目录中## 内容大小 1.48 GB 左右，确保你的网络畅通，不然下载过程容易出错$ git clone git@github.com:cisco/ChezScheme.git## 下载完成后进入文件夹，准备运行安装命令$ cd ChezScheme/$ pwd               # pwd 会显示当前所在目录~/apps/ChezScheme## 如果你电脑的 CPU 是 x86_64 架构的，直接运行这个配置命令（程序）即可## 确保网络畅通，配置过程需要下载相关依赖库$ ./configure## 如果你的电脑是 Apple Silicon 的 Mac ，比如 CPU 是 M1 的 Mac## 那么就要在上面这个配置命令（程序）前面加上 arch -x86_64## 这是强制让 M1 Mac 的 arm 架构的 CPU 模拟 x86_64 架构来运行配置命令（程序）$ arch -x86_64 ./configure## 上面的配置命令成功结束后，就可以运行下面的命令进行安装了## 这个环节需要输入电脑的密码进行授权## Chez Scheme 自编译速度很快，整个过程不会超过 1 分钟（一般是 30 秒内）$ sudo make install## 安装完成后就能在终端中使用 scheme 命令来运行代码文件了（scheme 代码的文件名常用后缀是 .scm）## 运行（加载）文件后会进入 REPL 的交互解释器模式。测试完代码后，可以用 (exit) 退出$ scheme ~/Documents/prog/demo.scmChez Scheme Version 9.5.9Copyright 1984-2022 Cisco Systems, Inc.Hello World ! &gt; words&quot;Hello World&quot;&gt; punctuation&quot;!&quot;&gt; (+ 2 3)5&gt; (exit)      ## 调用函数 (exit) 退出 REPL 交互模式</code></pre><p>实际上，如果只是要用 <a href="https://github.com/cisco/ChezScheme" target="_blank" rel="noopener">Chez Scheme</a> 来运行我们的代码，完全可以<strong>只使用</strong>终端来运行。搭配你自己喜欢的编辑器来写代码即可，不一定非要用对新手不友好的 <a href="https://www.gnu.org/software/emacs/" target="_blank" rel="noopener">Emacs</a> 。比如我就用 <a href="https://racket-lang.org" target="_blank" rel="noopener">DrRacket</a> 作为主力编辑器写 Scheme 代码。有需要再在终端里用 <code>scheme</code> 命令运行。</p><pre><code class="lang-bash">## 注意，终端不像 DrRacket 那样会自动输出结果，## 如果要在代码文件中实现输出，得用 printf 函数## 可以看一下上文 demo.scm 文件中的代码内容$ cat ~/Documents/prog/demo.scm(define words &quot;Hello World&quot;)(define punctuation &quot;!&quot;)(printf &quot;~a ~a ~n&quot; words punctuation)</code></pre><hr><h3 id="Emacs-安装"><a href="#Emacs-安装" class="headerlink" title="Emacs 安装"></a>Emacs 安装</h3><p>Emacs 的安装<strong>并不难</strong>，从<a href="https://emacsformacosx.com" target="_blank" rel="noopener">官网</a>下载 <code>.dmg</code> 文件到本地正常安装即可。它对于新手的<strong>主要障碍</strong>在于后续的配置和软件的使用。</p><hr><h3 id="开始使用-Emacs"><a href="#开始使用-Emacs" class="headerlink" title="开始使用 Emacs"></a>开始使用 Emacs</h3><p>刚安装好的 Emacs <strong>十分简陋</strong>。需要对它进行配置，才能<strong>勉强</strong>达到一个稍微好用的状态。但是从顺序上来说，<strong>先</strong>知道如何使用，后续配置的过程才会更加游刃有余。首次打开 Emacs 界面如下图：</p><img src="/2022/05/16/emacs-setup/emacs-interface-01.jpeg" title="emacs default welcome interface"><p>上图中我标注了 Emacs 的一些<strong>基本概念</strong>术语，这样后续你就会知道这些名词分别是在说什么区域：</p><ul><li><strong style="color:rgb(108, 27, 44);">红色</strong>标注区的 <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Echo-Area.html" target="_blank" rel="noopener">Echo Area</a>：显示你的各种输入，进行简单的交互，比如查找文件，查找关键词；</li><li><strong style="color:rgb(62, 93, 34);">绿色</strong>标注区的 <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Mode-Line.html" target="_blank" rel="noopener">Mode Line</a>：显示当前 <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Basics.html" target="_blank" rel="noopener">Buffer</a> 的状态信息。后期可以自行定义显示内容；</li><li><strong style="color:rgb(98, 0, 169);">紫色</strong>标注区的 <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Windows.html" target="_blank" rel="noopener">Window</a>：内容区。显示当前 <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Basics.html" target="_blank" rel="noopener">Buffer</a> 的内容。</li><li><strong style="color:rgb(108, 191, 167);">青色</strong>标注区的 <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Frames.html" target="_blank" rel="noopener">Frame</a>：一个 <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Frames.html" target="_blank" rel="noopener">Frame</a> 内部区域可以分割成多个 <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Windows.html" target="_blank" rel="noopener">Window</a>，这样可以<strong>同时</strong>看多个 <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Basics.html" target="_blank" rel="noopener">Buffer</a>；</li></ul><p>除了上述四个描述用户界面的概念，Emacs 里还有个重要概念是 <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Basics.html" target="_blank" rel="noopener">Buffer</a> 。对新手来说，现阶段只需要把 <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Basics.html" target="_blank" rel="noopener">Buffer</a> 简单理解为「<strong>任务</strong>」就行了。比如，你打开了 3 个文件，就相当于有了 3 个 <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Basics.html" target="_blank" rel="noopener">Buffer</a> ，每个文件对应一个；浏览器开了 2 个页面，就有 2 个 <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Basics.html" target="_blank" rel="noopener">Buffer</a> ……所以，在不同 <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Basics.html" target="_blank" rel="noopener">Buffer</a> 之间切换，就相当于在你的 3 个文件之间、2 个浏览器页面之间切换，然后 <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Basics.html" target="_blank" rel="noopener">Buffer</a> 的内容会显示在你的 <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Windows.html" target="_blank" rel="noopener">Window</a> 区域里。</p><p>接下来就是「<strong>操作</strong>」了。虽然也能用鼠标，但 Emacs 的<strong>主流</strong>操作是以<strong>键盘快捷键</strong>为主的。因为它多数情况下比鼠标效率高，尽管这也增加了新手的学习成本。</p><p>Emacs 的<strong>快捷键组合</strong>多数会配合 <code>Ctrl</code> 和 <code>Meta</code> 这两个按键。这两个键分别会用大写字母 <code>C</code> 和 <code>M</code> 来表示。比如 <code>Ctrl + G</code> 这样的组合按键会写成 <code>C-g</code> ，表示同时按键盘上的 <code>Ctrl</code> 键和字母 <code>G</code> 键。同理，<code>M-x</code> 表示同时按键盘上的 <code>Meta</code> 键和字母 <code>X</code> 键。<code>C-x C-s</code> 表示先按 <code>C-x</code> 组合键，再按 <code>C-s</code> 组合键。现在再看上文的界面图，就能知道 <strong>echo area</strong> 区域在提示你可以用快捷键 <code>C-x C-s</code> 来查看更多信息。</p><p>苹果电脑的键盘上没有 <code>Meta</code> 按键，默认会用 <code>Option</code> 按键来替代（可自定义）。</p><p>下面是最基础的快捷键，耐心适应后，会感觉还算好用：</p><ul><li><code>C-g</code> ：这个是<strong>撤销</strong>操作。比如你快捷键输入到一半错了想撤销就按它；</li><li><code>C-x C-f</code> ：<strong>打开</strong>文件的操作。在 <strong>echo area</strong> 输入文件路径后如果文件不存在就会<strong>新建</strong>；</li><li><code>C-x C-s</code> ：<strong>保存</strong>当前文件。不过在 MacOS 下，你也可以直接用 <code>cmd + S</code> 这样通用的保存操作；</li><li><code>C-x C-w</code> ：将当前文件另存为。相当于<strong>复制</strong>文件的操作；</li><li><code>C-x b</code> : <strong>切换</strong> Buffer 。可以用 <code>Tab</code> 键来自动补全或查看当前可切换的 Buffer ；</li><li><code>C-x C-c</code> : <strong>关闭</strong> Emacs 编辑器；</li></ul><p>掌握了上述基础操作后，就可以进行下一个部分的配置了。其他额外知识可以随着 Emacs 的使用慢慢掌握，我们<strong>首要目标</strong>是能尽快地写 Scheme 代码和运行它。</p><hr><h3 id="配置-Emacs"><a href="#配置-Emacs" class="headerlink" title="配置 Emacs"></a>配置 Emacs</h3><p>这里只需要做 <strong>3 个</strong>关键设置即可。建议直接使用 Emacs 来做各种编辑操作，这样能更快熟悉它。为了简单，我将直接列出<strong>可执行</strong>的步骤，<strong>不会深入</strong>讲解其中的原理。新手在最初的 Emacs 使用中也<strong>无须</strong>过度探索，确保<strong>尽快</strong>进入 Scheme 编程阶段。扩展知识我都给了链接，之后再慢慢深入。</p><ul><li><p><strong>第 1 步</strong>：<br>编辑 Emacs 的初始化文件 <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html" target="_blank" rel="noopener"><code>init.el</code></a> 。刚安装好的 Emacs 没有这个文件，需要我们自己新建。我们还需要<strong>删除</strong>原始的初始化文件 <code>~/.emacs</code> ，避免它的内容覆盖我们之后设置好的 <code>init.el</code><br>使用快捷键 <code>C-x C-f</code> <strong>新建</strong>并打开文件 <code>~/.emacs.d/init.el</code> ，然后将下面的代码复制进去保存：</p><pre><code class="lang-lisp">(add-to-list &#39;load-path &quot;~/.emacs.d/scheme&quot;)(autoload &#39;paredit-mode &quot;paredit&quot;  &quot;Minor mode for pseudo-structurally editing Lisp code.&quot;  t)(require &#39;parenface)(set-face-foreground &#39;paren-face &quot;DimGray&quot;);;;;;;;;;;;;;; Yin&#39;s Scheme Configuration;;;;;;;;;;;;(require &#39;cmuscheme)(setq scheme-program-name &quot;scheme&quot;) ;; 指定用 Chez Scheme ，若用 Racket 就写 &quot;racket&quot;;; bypass the interactive question and start the default interpreter(defun scheme-proc ()  &quot;Return the current Scheme process, starting one if necessary.&quot;  (unless (and scheme-buffer               (get-buffer scheme-buffer)               (comint-check-proc scheme-buffer))    (save-window-excursion      (run-scheme scheme-program-name)))  (or (scheme-get-process)      (error &quot;No current process. See variable `scheme-buffer&#39;&quot;)))(defun switch-other-window-to-buffer (name)    (other-window 1)    (switch-to-buffer name)    (other-window 1))(defun scheme-split-window ()  (cond   ((= 1 (count-windows))    ;;(split-window-vertically (floor (* 0.68 (window-height))))    (split-window-horizontally (floor (* 0.68 (window-width))))    (switch-other-window-to-buffer &quot;*scheme*&quot;))   ((not (member &quot;*scheme*&quot;               (mapcar (lambda (w) (buffer-name (window-buffer w)))                       (window-list))))    (switch-other-window-to-buffer &quot;*scheme*&quot;))))(defun scheme-send-last-sexp-split-window ()  (interactive)  (scheme-split-window)  (scheme-send-last-sexp))(defun scheme-send-definition-split-window ()  (interactive)  (scheme-split-window)  (scheme-send-definition))(add-hook &#39;scheme-mode-hook  (lambda ()    (paredit-mode 1)    (define-key scheme-mode-map (kbd &quot;&lt;f5&gt;&quot;) &#39;scheme-send-last-sexp-split-window)    (define-key scheme-mode-map (kbd &quot;&lt;f6&gt;&quot;) &#39;scheme-send-definition-split-window)))</code></pre><p>之所以用 <code>~/.emacs.d/init.el</code> 而不是传统的 <code>~/.emacs</code> 来作为初始化文件是为了「<strong>模块化管理</strong>」。后续所有关于 Emacs 的配置文件都将<strong>集中</strong>存放在 <code>~/.emacs.d</code> 文件夹中，便于管理。比如关于 Scheme 代码的设置文件我就在 <code>.emacs.d</code> 文件夹下建立了一个子文件夹 <code>scheme</code> 来存放。顶层只放初始化文件。</p></li><li><p><strong>第 2 步</strong>：<br>下载 <a href="http://mumble.net/~campbell/emacs/paredit.el" target="_blank" rel="noopener"><code>paredit.el</code></a> 文件，将它放到 <code>~/.emacs.d/scheme</code> 目录下。可用快捷键 <code>C-x C-w</code> 来将文件复制（另存为）到该目录。你可能会对 <a href="http://mumble.net/~campbell/emacs/paredit.el" target="_blank" rel="noopener"><code>paredit.el</code></a> 文件中 <code>^L</code> 这样的内容感到奇怪，不用管它，参见<a href="https://stackoverflow.com/questions/1576887/what-does-l-in-emacs-lisp-source-code-mean" target="_blank" rel="noopener">这里</a>。<br><a href="http://mumble.net/~campbell/emacs/paredit.el" target="_blank" rel="noopener"><code>paredit.el</code></a> 文件提供了<strong>高效可靠</strong>的括号操作，提升我们 Scheme 代码的编辑体验。</p></li><li><p><strong>第 3 步（可选）</strong>：<br>这步是把代码的括号颜色调淡，不做也不影响我们编辑、运行代码。但因为简单，推荐做一下。<br>下载 <a href="https://www.dropbox.com/s/v0ejctd1agrt95x/parenface.el" target="_blank" rel="noopener"><code>parenface.el</code></a> 文件，并将其放在 <code>~/.emacs.d/scheme</code> 目录下。同样可用 <code>C-x C-w</code> 快捷键操作。</p></li></ul><hr><h3 id="使用-Emacs-来写-Scheme-代码"><a href="#使用-Emacs-来写-Scheme-代码" class="headerlink" title="使用 Emacs 来写 Scheme 代码"></a>使用 Emacs 来写 Scheme 代码</h3><p>相信现在你已基本熟悉 Emacs 的快捷键 <code>C-x C-f</code> 了。就用它来新建文件 <code>~/Documents/length.scm</code> ，看看如何编辑运行 Scheme 吧。</p><p>还是写我们的老朋友 <code>length</code> 函数：</p><pre><code class="lang-scheme">(define length  (lambda (l)    (cond [(null? l) 0]          [else (+ 1 (length (cdr l)))])))(length &#39;(1 2 3))(length `(4 ,(+ 5 6) 7))</code></pre><p>我们上面的配置中把 <code>F5</code> 这个按键设置为了「<strong>运行光标所在处的前一个表达式</strong>（scheme-send-last-sexp）」。所以我们先把光标移动到第一个 <code>define</code> 表达式的<strong>最末尾</strong>，按一下 <code>F5</code> 。这时你可以看到 Emacs 出现了一个新的 <strong>Window</strong> ，开启了 <strong>REPL</strong> 交互模式，并且成功运行了我们的 <code>define</code> 表达式。</p><p>同理，我们分别把光标移动到后面两个表达式的末尾，按 <code>F5</code> ，就能分别得到这两个表达式的值了：</p><img src="/2022/05/16/emacs-setup/emacs-interface-02.jpeg" title="emacs scheme code interface"><p>多数时候，我们的代码很多，依次运行一个个表达式太麻烦。这时，可先按 <code>cmd + A</code> 全选内容，然后用 Emacs 的快捷键 <code>C-c C-r</code> 来向 <strong>REPL</strong> 载入所选内容（scheme-send-region）。这样，整个文件的内容就都被送到 Chez Scheme 里了。然后，你就可以用 <code>F5</code> 一个个地运行测试你的表达式了。</p><p>你也可以用 <code>C-c C-l</code> 来载入（运行）某个文件（scheme-load-file）。总的来说，在用 <code>F5</code> 依次运行表达式之前，要先确保各种变量都已完成定义。</p><p>编辑 Scheme 文件时的常用快捷键：</p><ul><li><code>C-c C-k</code>：scheme-compile-file               </li><li><code>C-c C-l</code>：scheme-load-file </li><li><code>C-c C-r</code>：scheme-send-region          </li><li><code>C-c C-e</code>：scheme-send-definition</li><li><code>C-x C-e</code>：scheme-send-last-sexp</li><li><code>Control + 右箭头</code>：paredit-forward-slurp-sexp 括号向右<strong>扩展</strong>，<strong>吃掉</strong>右边最近的一个表达式</li><li><code>Control + 左箭头</code>：paredit-forward-barf-sexp  括号向左<strong>收缩</strong>，<strong>吐出</strong>左边最近的一个表达式</li></ul><p>本<strong>节</strong>参考资料：</p><ul><li><a href="https://alexott.net/en/writings/emacs-devenv/EmacsScheme.html" target="_blank" rel="noopener"><em>Support for the Scheme programming language</em></a></li><li><a href="https://www.cs.ucf.edu/~leavens/ui54/WWW/scheme.shtml" target="_blank" rel="noopener"><em>Running Scheme</em></a></li><li><a href="https://doc.endlessparentheses.com/Fun/inferior-scheme-mode.html" target="_blank" rel="noopener"><em>Emacs Online Documentation</em></a></li></ul><hr><h3 id="更多的-Emacs-操作和技巧（待完善）"><a href="#更多的-Emacs-操作和技巧（待完善）" class="headerlink" title="更多的 Emacs 操作和技巧（待完善）"></a>更多的 Emacs 操作和技巧（待完善）</h3><blockquote><p>Emacs 是一个好的操作系统，它只是缺少一个好的编辑器。</p><footer><strong>Ian</strong></footer></blockquote><p>常用内容编辑快捷键：</p><ul><li><code>C-p</code> : 光标向<strong>上</strong>移动；</li><li><code>C-n</code> : 光标向<strong>下</strong>移动；</li><li><code>C-f</code> : 光标向<strong>前</strong>移动；</li><li><code>C-b</code> : 光标向<strong>后</strong>移动；</li><li><code>C-e</code> : 光标向移动到这一段文字的<strong>末尾</strong>；</li><li><code>C-a</code> : 光标向移动到这一段文字的<strong>开头</strong>；</li><li><code>C-k</code> : 删除并复制光标处开始后面的这一段文字（类似<strong>剪切</strong>操作）；</li><li><code>C-y</code> : 于光标处粘贴最近一次被 <code>C-k</code> 复制的内容（类似<strong>粘贴</strong>操作）；</li><li><code>M-y</code> : 在 <code>C-y</code> 操作后，切换 <code>C-k</code> 复制的内容（ <code>C-k</code> 复制的内容都被储存在 <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Kill-Ring.html" target="_blank" rel="noopener">kill ring</a> 里）；</li></ul><p>……<br>……</p><p>TODO</p><p><strong>本文</strong>参考与拓展资料：</p><ul><li>对新手相当<strong>不</strong>友好的<strong>过于简洁</strong>的教程：<a href="http://www.yinwang.org/blog-cn/2013/04/11/scheme-setup" target="_blank" rel="noopener"><em>Scheme 编程环境的设置</em></a></li><li>对新手<strong>勉强算</strong>友好的<strong>过于全面</strong>的教程：<a href="https://systemcrafters.net/emacs-essentials/absolute-beginners-guide-to-emacs/" target="_blank" rel="noopener"><em>The Absolute Beginner’s Guide to Emacs</em></a></li><li><strong>官方</strong>文档（有关 Emacs 初始化配置文件的位置）：<a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html" target="_blank" rel="noopener"><em>The Emacs Initialization File</em></a></li><li>作者 Pavinberg 吐槽 Emacs 中文社区的教程质量不高于是<strong>亲自专栏</strong>：<a href="https://www.zhihu.com/column/c_1440829147212279808" target="_blank" rel="noopener"><em>专业 Emacs 入门教程系列</em></a></li></ul><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Mac Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scheme 的基本语法和编程操作</title>
      <link href="/2022/03/24/scheme-basics-and-IDE/"/>
      <url>/2022/03/24/scheme-basics-and-IDE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Lisp_(programming_language" target="_blank" rel="noopener"><strong>Lisp</strong></a> 这个语言的家族里包括了 <a href="https://schemers.org" target="_blank" rel="noopener">Scheme</a> 、<a href="https://racket-lang.org" target="_blank" rel="noopener">Racket</a> 、<a href="https://en.wikipedia.org/wiki/Common_Lisp" target="_blank" rel="noopener">Common Lisp</a> 、<a href="https://en.wikipedia.org/wiki/Emacs_Lisp" target="_blank" rel="noopener">Emacs Lisp</a> 等各式各样以「<strong>括号</strong>」、「<strong>lambda</strong>」和「<strong>链表</strong>（list）」为特征的语言。</p><p><a href="https://en.wikipedia.org/wiki/Daniel_P._Friedman" target="_blank" rel="noopener">Daniel Paul Friedman</a> 算是 <strong>Scheme</strong> 的带头人物，尽管 <a href="https://en.wikipedia.org/wiki/History_of_the_Scheme_programming_language" target="_blank" rel="noopener">Scheme</a> 最初不是他发明的。然后这个 <a href="https://racket-lang.org" target="_blank" rel="noopener">Racket</a> 其实本身是属于一种 <a href="https://schemers.org" target="_blank" rel="noopener">Scheme</a> 的（即 <strong>Racket</strong> 应算是 <strong>Scheme</strong> 语言的一个实现）。但是呢，<a href="https://racket-lang.org/plt.html" target="_blank" rel="noopener">PLT</a> 这帮人他们现在不承认他们是 <strong>Scheme</strong> 了，就另外起了一个名叫 <strong>Racket</strong> （以前的名字叫 <strong>PLT Scheme</strong>，改名试图脱离 Scheme 的阴影。实际上，好像并没有比 Scheme 超出多少）。反正这帮人的头目应该就是 <a href="https://mitpress.mit.edu/books/little-schemer-fourth-edition" target="_blank" rel="noopener"><em>The Little Schemer</em></a> 的第二作者、同时也是 <a href="https://en.wikipedia.org/wiki/Daniel_P._Friedman" target="_blank" rel="noopener">Dan Friedman</a> （也许是最厉害）的学生：<a href="https://felleisen.org/matthias/" target="_blank" rel="noopener">Matthias Felleisen</a> 。</p><img src="/2022/03/24/scheme-basics-and-IDE/mit-dnj-2.png" title="Matthias Felleisen"><p>早期的 <strong>Lisp</strong> 语言的函数就是一个符号链表，它不会自带一个 <code>env</code>（解释器中的闭包环境，或者说上下文语境），会出现严重的问题：<a href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scope_vs._dynamic_scope" target="_blank" rel="noopener">Dynamic Scoping</a> 。<strong>Scheme</strong> 不是第一个实现针对该问题的 <a href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scope_vs._dynamic_scope" target="_blank" rel="noopener">Lexical Scoping</a> 特性的编程语言，但确实是第一个实现 <a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)" target="_blank" rel="noopener">Closure</a>（闭包）的 <strong>Lisp</strong> 语言。</p><p><strong>Scheme</strong> 语言有一个很好的特征，就是你可以把你的「<strong>代码</strong>」，用很简单的方式就变成「<strong>数据</strong>」，这将非常适合用来实现各种语言和语言特性。如果用其他编程语言，比如 <a href="https://www.javascript.com" target="_blank" rel="noopener">JavaScript</a> ，来做这件事的话，那种数据结构的形式（ <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" target="_blank" rel="noopener">AST</a> 抽象语法树）会让人写得很痛苦，看起来也不像正常的代码。</p><p>其他搜索时的八卦：</p><ul><li>经 <a href="https://github.com/melp" target="_blank" rel="noopener">melp</a> 同学提醒，Racket 从 8.0 版本开始，默认实现（implementation）会变成 <a href="https://blog.racket-lang.org/2021/01/racket-status.html" target="_blank" rel="noopener">Racket on Chez Scheme (Racket CS) </a></li><li>查资料的时候还发现一篇关于 Racket 和 Chez Scheme 的文章：<a href="https://beautifulracket.com/appendix/racket-and-chez-scheme.html" target="_blank" rel="noopener"><em>Thoughts on Racket &amp; Chez Scheme</em></a> 。该文章出自 <a href="https://beautifulracket.com" target="_blank" rel="noopener"><em>Beautiful Racket by Matthew Butterick</em></a> 这本书</li><li><p>还搜到一个 2014 年写的 <a href="https://the-little-schemer.readthedocs.io/zh_CN/latest/index.html#" target="_blank" rel="noopener"><em>The Little Schemer 笔记</em></a> ，作者 <a href="http://chenjiee815.github.io" target="_blank" rel="noopener">chenjiee815</a> 似乎也很久没<a href="https://readthedocs.org/profiles/chenjiee815/" target="_blank" rel="noopener">更新</a>了，2014 年后也不再活跃。由于好奇，尝试继续深入了一下，发现 chenjiee815（<a href="https://www.linkedin.com/in/杰-陈-b55a2285/?originalSubdomain=cn" target="_blank" rel="noopener">陈杰</a>）这家伙 2009 年从南京的中国药科大学毕业，本科专业居然是「中药学」。毕业后工作，一年后考计算机研究生失败，转行进行计算机行业在南京某公司当个 IT 小讲师，然后是 IT 团队小领导（这篇笔记就是做小领导期间写的）。南京公司被阿里巴巴收购后，陈到杭州阿里工作。一年多后进入华为回到南京，至今仍在华为。从中药学到计算机，真是个急速扩张的人生。不过 09 年大学毕业，意味着「华为」、「35岁」双关键词达成。加上这个时代「疫情」、「战争」、「金融去杠杆」等新关键词之后，希望他能加强危机意识，一切顺利。看来我也要抽空去更新一下我的 LinkedIn 了。</p></li><li><p>陈杰 2014 年的这篇笔记在很多地方都被引用，这让我想起自己第一次知道这本书也是 2014 年（李路肯定不知道他的热情分享对我影响很大，他应该不记得我了）。看来 TLS 的出圈时间节点很可能就是 2014 。另一个有意思的细节是，<a href="https://www.yinwang.org/blog-cn/2012/07/04/dan-friedman" target="_blank" rel="noopener"><em>GTF - Great Teacher Friedman</em></a> 的第一版似乎是在 2012 年写的。</p></li></ul><img src="/2022/03/24/scheme-basics-and-IDE/li_lu_promotes_TLS.jpg" title="Li Lu promotes TLS"><img src="/2022/03/24/scheme-basics-and-IDE/Li_Lu_s_kindness.jpeg" title="Li Lu and Wang"><hr><h3 id="编程软件-DrRacket"><a href="#编程软件-DrRacket" class="headerlink" title="编程软件 - DrRacket"></a>编程软件 - DrRacket</h3><p>直接去 <strong>Racket</strong> 的<a href="https://racket-lang.org" target="_blank" rel="noopener">官网</a>下载对应的安装包到本地即可双击安装。支持 Windows 和 MacOS 。</p><p>常用快捷键：</p><ul><li><strong>运行</strong>代码：<code>cmd + R</code>（ MacOS 系统）；</li><li>快速<strong>缩进排版</strong>所有代码（Reindent All）：<code>cmd + I</code>（ MacOS 系统）；</li><li><strong>注释</strong>代码（块）：<code>control + esc + ;</code>（ MacOS 系统）；<code>Ctrl + Alt + ;</code>（ Win 系统）；</li><li>显示代码整体<strong>轮廓</strong>（Show Program Contour）：<code>cmd + U</code>（ MacOS 系统）；</li><li><strong>取消</strong>注释代码（块）：<code>control + esc + =</code>（ MacOS 系统）；<code>Ctrl + Alt + =</code>（ Win 系统）；</li><li>将<strong>输出</strong>窗口显示在<strong>右侧</strong>，使编辑窗口的区域更大：<code>cmd + shift + L</code>（ MacOS 系统）；<br>也可以通过选择 <code>View</code> -&gt; <code>Use Horizontal Layout</code> 实现；</li><li>在输出窗口测试的时候，调出<strong>上一个</strong>运行的代码：<code>esc + P</code>（ MacOS 系统）；</li><li>在输出窗口测试的时候，调出<strong>下一个</strong>运行的代码：<code>esc + N</code>（ MacOS 系统）；</li><li>光标定位到一个变量，<strong>重命名</strong>所有这个变量（会根据 Scope 来而不是简单的同名）：<code>control + X + M</code>（ MacOS 系统）；</li></ul><p>其他快捷键组合还可以打开 <strong>Keybindings</strong> 窗口查询：<code>Edit</code> -&gt; <code>Keybindings</code> -&gt; <code>Show Active Keybindings</code><br>查询表中 <strong>s:</strong> 代表 <code>Shift</code> 、<strong>c:</strong> 代表 <code>Control</code> 、<strong>a:</strong> 代表 <code>Option</code> 、<strong>m:</strong> 代表 <code>Meta</code> 、<strong>d:</strong> 代表 <code>Command</code> <a href="https://gist.github.com/spdegabrielle/89de48580126592264f3741c4240e917" target="_blank" rel="noopener">……</a></p><p>MacOS 系统里可在 <code>Preferences</code> -&gt; <code>Editing</code> -&gt; <code>General Editing</code> 里勾选 <strong>Treat alt key as meta</strong> ，这样就可以使用 <code>option</code> 键来代替 <code>esc</code> 键。比如上述操作困难的 <code>control + esc + ;</code> 快捷键组合就会变成稍微好点的 <code>control + option + ;</code></p><p>更多使用使用小技巧可参考 <a href="https://rebelsky.cs.grinnell.edu/Courses/CSC151/2018S/handouts/drracket-tips" target="_blank" rel="noopener">Some tips and tricks for DrRacket</a> ，或者查看 <a href="https://docs.racket-lang.org/guide/index.html" target="_blank" rel="noopener"><em>The Racket Guide</em></a> 和 <a href="https://plt.cs.northwestern.edu/snapshots/current/pdf-doc/drracket.pdf" target="_blank" rel="noopener"><em>DrRacket: The Racket Programming Environment</em></a></p><hr><h3 id="编程软件-Emacs"><a href="#编程软件-Emacs" class="headerlink" title="编程软件 - Emacs"></a>编程软件 - Emacs</h3><p>Emacs 可以通过配置，方便地（也没有特别方便啦）使用由 <strong>R. Kent Dybvig</strong> 设计的、当今性能和可靠性都最强的 <a href="https://github.com/cisco/ChezScheme" target="_blank" rel="noopener">Chez Scheme</a> 来运行我们的代码。</p><p>但无论是配置的过程，还是使用的过程，Emacs 的操作对<strong>新手</strong>来说始终不是特别友好。Racket 更适合广大计算新人。而且上文已经说了，Racket 的默认实现今后会变成 <a href="https://blog.racket-lang.org/2021/01/racket-status.html" target="_blank" rel="noopener">Racket on Chez Scheme </a>。</p><p>所以目前的建议是，新手就用 <a href="https://racket-lang.org" target="_blank" rel="noopener">DrRacket</a> 作为主力编辑器写 Scheme 代码。有需要再在终端里用 <a href="https://github.com/cisco/ChezScheme" target="_blank" rel="noopener">Chez Scheme</a> 运行<code>.scm</code> 代码文件。</p><p>如果仍然想使用 Emacs ，可以看我写的<a href="/2022/05/16/emacs-setup/"><em>针对 Scheme 的 Emacs 编程环境设置</em></a>，里面也提到了如何安装和使用 <a href="https://github.com/cisco/ChezScheme" target="_blank" rel="noopener">Chez Scheme</a> 。</p><hr><h3 id="Scheme-常用的语法"><a href="#Scheme-常用的语法" class="headerlink" title="Scheme 常用的语法"></a>Scheme 常用的语法</h3><p>编程语言 Scheme 采用的是前缀表达式的语法。即处于第一位置的就是「操作符」，之后位置的就是「操作数」。计算的<strong>优先级</strong>由「括号」来确定。括号内部的最先计算。具体顺序为：先对括号中的每一个表达式求值，然后再将操作符作用在操作数上，对整个括号的表达式求值。</p><ul><li><p><strong>前缀表达式</strong></p><pre><code class="lang-scheme">(+ 2 3)        ;; 分别对 + 、2 、3 这三个表达式求值，再将 + 的值（操作符）作用在 2 和 3 上(* 1 (+ 3 5))</code></pre></li><li><p><strong>函数</strong></p><pre><code class="lang-scheme">;; 语法为：(lambda (参数1 参数2 ...) 表达式)(lambda (x) (* x x x))  ;; x =&gt; x * x * x(lambda  (a b)  (+ a b))     ;; (a, b) =&gt; a + b</code></pre></li><li><p><strong>定义</strong></p><pre><code class="lang-scheme">;; 定义变量(define x 2);; 定义 square 函数(define square (lambda (x) (* x x)));; 调用 square 函数(square x)        ;; 输出 4</code></pre></li><li><p><strong>赋值操作</strong></p><pre><code class="lang-scheme">;; 语法：;; (set! variable-name expression)(set! x 6)(square x)        ;; 输出 36</code></pre></li><li><p><strong>逻辑操作符</strong></p><pre><code class="lang-scheme">(and (&lt; 2 3) (&gt; 5 4))(or (&lt; 2 3) (&gt; 5 4))(not #f)(not &#39;(1 2))</code></pre></li><li><p><strong>条件分支</strong></p><pre><code class="lang-scheme">;; 普通的 if 语句在 scheme 中和其他前缀表达式的形式相同，由 1 个“操作符”搭配后面 3 个操作数;; scheme 中 true 和 false 分别用 #t 和 #f 来表示;; 语法为：(if pred true-exp false-exp)(if (&lt; 3 5) #t #f);; 另一种条件分支的写法是 cond;; 语法如下：;;(cond;;  [pred1 exp1];;  [pred2 exp2];;  [else;;   exp3]);; cond 的例子 fact 和 fib：;; scheme 中不需要写 == 了，因为 scheme 中没有赋值语句，所以符号 = 没有被占用;; 现代的 scheme 也允许使用方括号 [] ，在 cond 语句中用方括号逻辑结构会看得更清楚;; 求 n 的阶乘的函数 fact(define fact  (lambda (n)    (cond [(= n 0) 1]          [else           (* n (fact (- n 1)))])));; 求斐波那契数列中第 n 个数的函数 fib(define fib  (lambda (n)    (cond [(= n 0) 0]          [(= n 1) 1]          [else           (+ (fib (- n 1))              (fib (- n 2)))])));; 比较两个数字可以用 =(= 1 2)          ;; 输出 #f;; 比较两个符号（symbol）或字符串（String）则要用 eq? 或者 equal?(eq? &#39;x &#39;y)      ;; 输出 #f(eq? &#39;x &#39;x)      ;; 输出 #t(equal? &#39;x &#39;y)   ;; 输出 #f;; 比较两个字符串（String）的大小(string&gt;? &quot;x&quot; &quot;y&quot;)  ;; 输出 #f(string&lt;? &quot;x&quot; &quot;y&quot;)  ;; 输出 #t(string=? &quot;x&quot; &quot;x&quot;)  ;; 输出 #t - 这里字符串的相等等价于使用 eq?;; 比较两个符号（Symbol）的大小，可先转成字符串再比较;; 若是判断两个符号（Symbol）是否相等，直接用 equal? 或 eq? 就行，不必转换后用 string=?(string&lt;? &quot;x&quot; (symbol-&gt;string &#39;y)) ; 输出 #f</code></pre></li><li><p><strong>数据结构 pair 及其操作</strong>： pair 属于编程语言里最简单而又最重要的数据结构。</p><pre><code class="lang-scheme">;; 在 scheme 中专门有一组操作符函数来实现 pair 的构造和对它内部负载的访问(define p1 (cons 2 3));; 也可以这么构造&#39;(2 . 3);; car 和 cdr 能分别取出 pair 结构的第一个和第二个「有效负载」;; 因为早期计算机的寄存器就叫 car 和 cdr - 参见 SCIP 的解释(car (cons 3 4))(cdr (cons 3 4));; 使用 pair? 来判断一个东西是不是 pair(pair? p1)(pair? null)</code></pre></li><li><p><strong>链表</strong>（list）：有了 pair 结构，很自然地就会有链表结构</p><pre><code class="lang-scheme">;; 在 scheme 中专门有一组操作符函数来实现 pair 的构造和对它内部负载的访问(cons 1 (cons 2 cons (3 (cons 4)))&#39;(1 2 3 4)(define ls1 (list 1 2 3 4))(car (cdr (cdr ls1)))   ;; 3</code></pre></li><li><p><strong>quote 操作</strong>：quote 可以把代码变成数据，这将便于运行和测试「语言的实现（implementation）」</p><pre><code class="lang-scheme">(quote (+ 1 (* 2 3)))  ;; 输出 (+ 1 (* 2 3))&#39;(+ 1 (* 2 3))         ;; 上面的 quote 的操作可以用单引号 &#39; 来更简洁地实现。两者等价。运行输出 (+ 1 (* 2 3));; quote 和 &#39; 都可以将代码变成 symbol ，你可以使用 symbol? 来询问判断一个东西是不是 symbol;; 注意，symbol（符号）和 string（字符串）是两种不同的数据类型(symbol? &#39;(1 2 3))      ;; #f(symbol? &#39;x)            ;; #t;; 对于数字，则可以用 number?(number? 2)</code></pre><p>下面这串有趣的测试可以运行尝试一下，会对 quote 有深入理解：</p><pre><code class="lang-scheme">(quote ())            ;; 输出 &#39;()&#39;(quote ())           ;; 输出 &#39;&#39;()&#39;&#39;()                  ;; 这个和上面的代码等价。运行输出 &#39;&#39;()(pair? &#39;&#39;())          ;; 输出 #t - 这东西是个 pair(length &#39;&#39;())         ;; 输出 2 - 这东西包含 2 个「有效负载」(car &#39;&#39;())            ;; 输出 quote - 这个 pair 的第一个「有效负载」是 quote(symbol? (car &#39;&#39;()))  ;; 输出 #t - 第一个「有效负载」 quote 是 symbol(cdr &#39;&#39;())            ;; 输出 &#39;(()) - 第二个「有效负载」是 null&#39;(1 quote ())         ;; 输出 &#39;(1 quote ())&#39;(quot ())            ;; 输出 &#39;(quot ())</code></pre><p><strong>解答</strong>：<code>&#39;()</code> 其实就是 <code>(quote ())</code> 。当 DrRacket 在输出一个链表时，如果是 <strong>(1 2 3)</strong> 这种普通链表，那就会输出 <code>(1 2 3)</code> 。如果输出的链表中包含 <a href="https://docs.racket-lang.org/guide/quote.html" target="_blank" rel="noopener">quote</a> ，那么，它的输出可能不会显示 <code>(quote ())</code> 这样直观能看到「有效负载」的链表，而是会显示简化后的 <code>&#39;()</code> 。</p><p>这点可以通过观察 <code>&#39;(quote ())</code> 和 <code>&#39;(quot ())</code> 这两个代码的输出结果进一步理解：由于 quot 不再是关键词 identifier ，于是输出结果回复直观显示「有效负载」的 <code>(quot ())</code> 。</p><p>这里涉及到 Scheme 里面字符号（Symbol）和符串（String）两个概念的区别。具体来说 <code>&#39;quote</code> 和 <code>&quot;quote&quot;</code> 这两个表达式的输出结果是不一样的。前者是符号后者是字符串。</p></li><li><p><strong>quasiquote 和 unquote 操作</strong>：如果想读取变量的值，就需要用到 <a href="https://docs.racket-lang.org/guide/qq.html" target="_blank" rel="noopener">quasiquote</a> 操作了</p><pre><code class="lang-scheme">(define x 6) ;; 定义变量 x 为 6&#39;(1 2 3 x)   ;; 运行输出 (1 2 3 x)`(1 2 3 x)   ;; 运行输出 (1 2 3 x)`(1 2 3 ,x)  ;; 运行输出 (1 2 3 6)</code></pre></li><li><p><strong>构造类型 struct</strong>：和下面的模式匹配 <code>match</code> 配合使用很厉害。使用 <code>struct</code> 构造数据结构和类型是有好处的，因为是专用的。符号链表（list）构造的类型还是太<strong>通用</strong>，容易弄混淆，尤其是配合 <code>match</code> 的时候。</p><pre><code class="lang-scheme">;; 构造闭包类型（结构） closure - 相当于其他语言里定义一个对象;; 闭包包含一个函数 f 和它被创造时的上下文环境 env(struct Closure (f env));; 构造函数类型（结构） - 函数包含一个参数部分 param 和一个函数体 body(struct Fun (param body));; 构造二元操作类型（结构）(struct Binop (op e1 e2));; 使用上面的类型创建实例（instance）(Closure (Fun &#39;x (Binop &#39;+ 2 &#39;x)))(define b1 (Binop &#39;+ 2 3));; 取出 struct 里的内容(Binop-op b1)  ;; 输出 &#39;+(Binop-e1 b1)  ;; 输出 &#39;+(Binop-e2 b1)  ;; 输出 &#39;3</code></pre></li><li><p><strong>模式匹配</strong>（Pattern Matching）：<a href="https://docs.racket-lang.org/reference/match.html" target="_blank" rel="noopener">match</a> 是属于 <strong>Racket</strong> 特有的，<strong>Scheme</strong> 本身是没有模式匹配的，尽管它可以用宏来实现这个语言特性。</p><pre><code class="lang-scheme">;; 模式匹配的基本语法(match val-expr clause ...)</code></pre><p>其中 <code>val-expr</code> 代表要匹配的表达式，而 <code>clause</code> 语法的内容如下</p><pre><code class="lang-scheme">;; pat 代表 pattern ，用来判断是否和表达式 val-expr 的值匹配;; 若 pat 和 val-expr 匹配成功，就会对表达式 body 求值，并以它的值作为整个 match 的值clause    =   [pat body ...+]          |   [pat #:when cond-expr body ...+]</code></pre><p>下面举例说明上述 <strong>clause</strong> 中 <code>pat</code> 位置的常用语法，更多相关语法可查看文档：<a href="https://docs.racket-lang.org/reference/match.html" target="_blank" rel="noopener">9 Pattern Matching</a></p><pre><code class="lang-scheme">;; [(? number? v) v] 这行的 pat 部分用到的语法为 (? pred pat ...);; 该语法的意思是，如果表达式 (pred val-expr) 值为真，就匹配 pat 这个模式;; [(? number? v) v] 会先对表达式 (number? exp) 求值，;; 若值为 #t ，就用变量 v 来匹配 exp，然后输出 v 的值（即 exp 的值）;; [exp #:when (boolean? exp) &quot;boolean&quot;] 这分支的语法为;; [pat #:when cond-expr body ...+];; 意思是，如果表达式 cond-expr 值为真，就匹配 pat 这个模式;; 应该尽量用 #:when 而不是 (? ...) ，这样 pat 看起来就简洁很多;; 不然 pattern 本身里面嵌套了复杂的判断，看起来就不直观了，pattern 的意义就失去了;; 同理 [(? list? `(,lvp1 ,lvp2 ,lvp3)) lvp3] 会在 (list? exp) 的值为 #t 之后，;; 匹配 `(,lvp1 ,lvp2 ,lvp3) ，然后会输出 lvp3 的值;; [`(+ ,e1 ,e2) (+ (calc e1) (calc e2))] 这行的 pat 部分用到的语法为 (list lvp ...);; 符号 ` 和 , 分别是上文介绍到的 quasiquote 和 unquote 操作;; 由于 `(+ ,e1 ,e2) 是一个含有 3 个元素、且第一个元素是 symbol（符号） + 的 list ，;; 所以程序会先检查 exp 是不这样的 list，即是否是 (list + lvp2 lvp3);; 如果是，则匹配成功，此时，exp 这个 list 的元素 lvp2 和 lvp3 的值就会分别被赋予 e1 和 e2 ，;; 然后在 body 部分 (+ (calc e1) (calc e2)) 就能使用变量 e1 和 e2 进行求值;; 示例：使用 match 实现简易二元操作的计算器 calc(define calc(lambda (exp)  (match exp    [(? number? v) v]                          ; 难以直观看出 pattern 是什么    [exp #:when (boolean? exp) &quot;boolean&quot;]      ; 所以应尽量用 #:when 而不是 (? ...)    [`(+ ,e1 ,e2) (+ (calc e1) (calc e2))]     ; quasiquote 和 unquote 写的 pattern    [`(- ,e1 ,e2) (- (calc e1) (calc e2))]    [(list &#39;* e1 e2) (* (calc e1) (calc e2))]  ; list 写的 pattern    [(list &#39;/ e1 e2) (/ (calc e1) (calc e2))]    [(? list? `(,lvp1 ,lvp2 ,lvp3)) lvp3]    [else     (error &quot;Error: unsupported operation or illegal expression!&quot;)])))(calc &#39;(+ 1 (* 9 3)))     ; 输出 28(calc &#39;(9 19 29))         ; 输出 29 - 匹配到了倒数第 2 分支(calc #f)                 ; 输出 &quot;boolean&quot;</code></pre><p><code>match</code> 和 <code>struct</code> 配合可以实现很强大的表达</p><pre><code class="lang-scheme">;; 创建 shoe 和 hat 这两个结构(struct shoe (size color))(struct hat (size style));; 这块代码输出 &quot;top&quot; ；可以看到匹配成功之后，输出了表达式部分的值 &quot;top&quot;(match (hat 23 &#39;bowler) [(shoe 10 &#39;white) &quot;bottom&quot;] [(hat 23 &#39;bowler) &quot;top&quot;]);; 这块代码输出 23 ；可以看到 sz 这个变量成功匹配捕获到了 23 这个数据(match (shoe (hat 23 29) &#39;bowler)  [(shoe (hat sz stl) col) sz]  [else &quot;something else.&quot;])</code></pre></li><li><p><strong>注释</strong>：用 <code>;</code> 来注释代码（comment out）。DrRacket 中推荐用快捷键：<code>control + esc + ;</code>（MacOS）</p><pre><code class="lang-scheme">; 代码「行」注释#|代码「块」注释|#</code></pre></li><li><p><strong>输出与显示</strong><br>在 DrRacket 里，输出代码的结果不需要专门写类似 <code>console.log</code> 的函数，它会在窗口自行显示各表达式的值。但在 Debug 的时候，有可能需要在代码中间显示各种变量的值，这时候下面这些输出函数就很有用了</p><pre><code class="lang-scheme">(newline)           ; 空行（换行）(display &quot;\n&quot;)      ; &quot;\n&quot; 代表换行;; 连续 display 的话，内容之间是连在一起的，没有换行显示(display &quot;1st line&quot;)(display &quot;2nd line&quot;);; 运行输出：;; 1st line2nd line;; 加上 ln 之后的 displayln 会在显示内容完毕后换行，即自动另起一行(displayln &quot;1st line&quot;)(displayln &quot;2nd line&quot;);; 运行输出：;; 1st line;; 2nd line;; 使用 println 会把引号也显示出来(println &quot;1st line&quot;)(println &quot;2nd line&quot;);; 使用 fprintf 可以格式化输出;; 其中 ~a , ~s 和 ~v 分别是 write , display 和 print 的效果;; \n 代表换行。下面例子放在末尾，则代表末尾换行(fprintf (current-output-port)         &quot;~a as a string is ~s, ~a, ~v.\n&quot;         &#39;(3 4)         &quot;(3 4)&quot;         &quot;(3 4)&quot;         &quot;(3 4)&quot;);; 运行输出：;; (3 4) as a string is &quot;(3 4)&quot;, (3 4), &quot;(3 4)&quot;.</code></pre><p>关于输出的更多详细介绍，可以查阅 Racket 的文档 <a href="https://docs.racket-lang.org/reference/Writing.html" target="_blank" rel="noopener">13.5 Writing</a></p></li><li><p><strong>抛出异常</strong></p><pre><code class="lang-scheme">(error &quot;Error: illegal expression!&quot;)  ; 运行会报错，显示 &quot;Error: illegal expression!&quot;(error &quot;Error: &quot; x (+ 2 x))           ; 还可以输入表达式，显示表达式的值，运行显示 &quot;Error: 6 8&quot;</code></pre></li><li><p><strong>call/cc</strong>：这个“奇怪”却影响深远的东西<strong>最早</strong>也是由本篇开头提到的 <a href="https://en.wikipedia.org/wiki/Daniel_P._Friedman" target="_blank" rel="noopener">Daniel Paul Friedman</a> 想出来的，相关 paper 叫 <a href="https://legacy.cs.indiana.edu/ftp/techreports/TR133.pdf" target="_blank" rel="noopener"><em>A Scheme for a Higher-Level Semantic Algebra</em></a>。后来 <a href="https://en.wikipedia.org/wiki/Gerald_Jay_Sussman" target="_blank" rel="noopener">Gerald Susman</a>（SICP 的作者之一） 给了它一个名字 <a href="https://en.wikipedia.org/wiki/Call-with-current-continuation" target="_blank" rel="noopener">call-with-current-continuation</a> ，从那以后 <a href="https://en.wikipedia.org/wiki/Daniel_P._Friedman" target="_blank" rel="noopener">Friedman</a> 的名字就再也没有和 <strong>call/cc</strong> 被人联系在一起过了。之后更先进的 <strong>shift / reset</strong> 这类 <a href="https://en.wikipedia.org/wiki/Delimited_continuation" target="_blank" rel="noopener">Delimited Continuation</a> 则是 Friedman 的学生弄的。</p><p><a href="https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29" target="_blank" rel="noopener">call/cc</a> 虽然没有更先进的 <a href="https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29" target="_blank" rel="noopener">shift / reset</a> 好用，会逐渐退出历史舞台（参见 <a href="https://okmij.org/ftp/continuations/against-callcc.html" target="_blank" rel="noopener"><em>An argument against call/cc - Oleg Kiselyov</em></a>），但蜡烛和 LED 灯在各自的年代都为人类照亮了方向。何况如果没有 <a href="https://docs.racket-lang.org/reference/cont.html#%28def._%28%28lib._racket%2Fprivate%2Fmore-scheme..rkt%29._call%2Fcc%29%29" target="_blank" rel="noopener">call/cc</a> ，估计也没有 <a href="https://docs.racket-lang.org/reference/cont.html#%28form._%28%28lib._racket%2Fcontrol..rkt%29._reset%29%29" target="_blank" rel="noopener">shift / reset</a> 了。所以我觉得 <a href="https://en.wikipedia.org/wiki/Call-with-current-continuation" target="_blank" rel="noopener">call/cc</a> 应该算里程碑式的东西。</p><pre><code class="lang-scheme">;; call/cc 会接收一个单参数函数，该函数的参数 k 会取得当前位置的 continuation;; 这里涉及到一个对新人陌生的概念：continuation 是什么东西？它有什么用？;; 关于这个，会新开一篇文章专门介绍。目前简单地理解，continuation 就是接下来要做的所有计算;; 调用这个 k ，程序会丢弃上下文;; 例子：(* 3 (+ 1 (call/cc (lambda (k) (+ 1 (k 2)))))) ;; 输出 9 - 内部的 (+ 1 ... ) 被丢弃了;; 通常会定义一个变量来存放 call/cc 捕获的 continuation ，共后续调用;; 例子：(define saved-k #f)(* 3 (+ 1 (call/cc (lambda (k) (set! saved-k k) (+ 1 (k 2))))))  ;; 输出 9 (saved-k 1)          ;; 输出 6 - 此时的 saved-k 相当于函数: (lambda (x) (* 3 (+ 1 x)))(+ 9 (saved-k 1))    ;; 输出 6 - (+ 9 ...) 这个上下文被忽略了</code></pre></li><li><p><strong>宏（Macro）</strong>：宏特别容易被滥用。<strong>第一</strong>使用原则是，你的宏不应该<strong>显著改变</strong>当前编程语言的语义，尽量都只做简单的重新排列组合动作。另一个基本的原则是，如果一个宏它实际上做的是函数的事情，那你都应该尽量使用函数，而不是宏，除非宏相比函数能实现某种<strong>效果更好</strong>的「封装打包」。</p><pre><code class="lang-scheme">;; 这里又涉及到一个对新人陌生的概念：Macro（宏）是什么东西？;; 简单地说 Macro 是一个语法转换器（Syntax Transformer）;; 宏接收一个 syntax object（语法对象），返回新的 syntax object ，相当于翻译（替换）操作;; 于是你可以通过宏定义的自己语法，这些语法是 Scheme 中原本没有的;; 比如你可以有 (my-lambda ...) 这样的表达，它和函数的区别是，省略号部分的参数不会被求值;; 因为转换（翻译）过程是在 compile time（程序编译阶段），而不是 run time（程序运行阶段）;; Macro 有点像在解释器里添加一个分支来支持的新语法，这时，当前语言相当于被扩展了;; 从这个意义上，Macro 像个小型解释器;; 更多关于 Macro 的概念和作用，可参见本节末尾 Greg Hendershott 的文章;; 我稍后也会写一篇关于 Macro 的应用的文章;; 宏会标记（接收）一串语法，然后根据定义转换成另一串语法返回;; 举例来说，下面的 define-syntax 会定义一个名字为 foo 的宏;; 当代码中出现 (foo ...) 这样的表达式，程序会根据名字 foo 判断出这是个宏，需要转译整个表达式;; 然后表达式 (foo ...) 会在 compile time 先被转换成我们在宏 foo 中所定义的表达式;; 即 (foo ...) 被替换成 (syntax &quot;I am foo&quot;);; (syntax &quot;I am foo&quot;) 会在接下来的 run time 阶段被求值(define-syntax (foo stx)  (syntax &quot;I am foo&quot;));; 对返回的 (syntax &quot;I am foo&quot;) 求值，输出 &quot;I am foo&quot;(foo (+ 1 2));; 宏的定义也可以写成 lambda 形式;; 我倾向于这样写，这样子可以清楚区分“参数” stx 和宏的名字，更加「模块化」(define-syntax show-stx  (lambda (stx)    (println (syntax-&gt;datum stx))  ;; stx 的内容是个 syntax ，把它转化成数据后显示出来    (datum-&gt;syntax stx             ;; 这里第一个参数先不用管，目前只需知道有它才能顺利转换                   (cadr (syntax-&gt;datum stx))))) ;; 宏最终都需要返回一个 syntax object;; 第一个输出是 &#39;(show-stx (+ 1 2));; 第二个输出是 3(show-stx (+ 1 2));; 第一个输出是 (println ...) 的输出，代表 stx 中所装载的内容;; 第二个输出过程如下：;; (syntax-&gt;datum stx) 会转换语法对象 stx 的内容，得到 &#39;(show-stx (+ 1 2));; 用 cadr 取得“参数”部分 &#39;(+ 1 2);; 然后通过 datum-&gt;syntax 把它转成了语法对象 (syntax (+ 1 2)) 作为宏 show-stx 的结果返回;; 最后，程序会计算 (syntax (+ 1 2)) 的值，得到结果 3;; 总结：;; (show-stx (+ 1 2)) 会在编译过程中被翻译（替换）成 (+ 1 2);; (println ...) 是宏 show-stx 的副作用，输出参数 stx 的内容#&#39;(+ 1 2)     ;; (syntax ...) 像 (quote ...) 一样可简写，这里等价于 (syntax (+ 1 2))(eval #&#39;(+ 1 2))   ;; 对该语法对象（树）求值，输出 3;; 通过上面的例子知道了 stx 装的大概就是个链表的结构（主要因为 scheme 的语法也是链表的形式）;; 链表的结构，自然会希望有个模式匹配的功能，毕竟定义新语法的常规操作就是重新组合调整各个部分;; 虽然能用上面提到的 match ，但是宏的转译是在编译过程中，编译过程默认是看不到 match 的;; 于是就有了专门针对宏的模式匹配 syntax-case ，用来匹配第一个参数 stx 的内容;; 下面这个例子我们自定义了一个 if 的表达式，功能和 scheme 的 if 一样;; 不用函数来实现 if 的原因是函数在调用时会对所有参数求值，但条件分支的俩分支不应该被同时求值;; 这里也显示了宏的一个常见用法，就是你需要「惰性求值」的时候就可以考虑使用宏(define-syntax my-if-sc  (lambda (stx)    (syntax-case stx ()             ;; 第二个参数暂时不用管，目前只需知道给个 () 就行      [(_ pred true-exp false-exp)  ;; 用 _ 来匹配并忽略 stx 中首位的 my-if-sc       (syntax        (cond [pred true-exp]       ;; my-if-sc 所在表达式被转译成了相应的 cond 表达式              [else false-exp]))]))) (my-if-sc (&lt; (* 7 8) 9) &quot;true&quot; &quot;false&quot;)   ;; 输出 &quot;false&quot;;; 另一个更好用的写法是 syntax-rules ，它更像 match ，所以更便于阅读，推荐优先使用;; 在 syntax-case 中，返回的表达式要用 syntax 之类的方式转成一个 syntax object（语法对象）;; 而用 syntax-rules 只需直接写要返回的表达式就行了，它在后台会自行帮你转换成 syntax object(define-syntax my-if-sr  (syntax-rules ()    [(_ pred true-exp false-exp)     (cond [pred true-exp]           [else false-exp])]))(my-if-sr (&lt; 2 3) &quot;true&quot; &quot;false&quot;)  ;; 输出 &quot;true&quot;</code></pre></li></ul><p>Macro（宏）和 Continuation 是两个对新手来说看似难理解，但实际很简单的概念。关于宏除了<a href="https://docs.racket-lang.org/guide/macros.html" target="_blank" rel="noopener">官方文档</a>之外，官方还推荐了另一篇有趣的文章来介绍：<a href="https://www.greghendershott.com/fear-of-macros/index.html" target="_blank" rel="noopener"><em>Fear of Macros - by Greg Hendershott</em></a></p><hr><h3 id="DrRacket-IDE-里的一些常用库"><a href="#DrRacket-IDE-里的一些常用库" class="headerlink" title="DrRacket IDE 里的一些常用库"></a>DrRacket IDE 里的一些常用库</h3><p>在 Racket 里你可以使用 <a href="https://docs.racket-lang.org/guide/module-require.html" target="_blank" rel="noopener">require</a> 来载入各种 <a href="https://docs.racket-lang.org/guide/module-basics.html" target="_blank" rel="noopener">Module</a>（模块/库）。相当于其他语言的 <code>import</code> 操作。你可以自己创造 Module ，不过这里主要介绍一些 DrRaket 自带的常用 Module：</p><ul><li><p>有关数据结构的 Module - 队列 <a href="https://docs.racket-lang.org/data/Imperative_Queues.html" target="_blank" rel="noopener">Queues</a> </p><pre><code class="lang-scheme">;; 调用 require 载入库 data/queue(require data/queue);; (make-queue) 可以创建一个空队列（empty queue）- 队列创建后开始是空的，之后可往里加东西;; 定义一个队列 q1(define q1 (make-queue));; (enqueue! queue value) 可将元素添加到队列的【末尾】;; 往队列 q1 中依次添加数字 1 、2 和 3(enqueue! q1 1)(enqueue! q1 2)(enqueue! q1 3);; (enqueue-front! queue value) 可将元素添加到队列的【开头】;; 往队列 q1 的开头添加数字 9(enqueue-front! q1 9);; 调用 queue-&gt;list 可以把队列转换成链表（list）(queue-&gt;list q1)          ;; 输出 &#39;(9 1 2 3);; (dequeue! queue) 可以将 queue 中的第一个位置的元素移除，并返回(dequeue! q1)             ;; 输出 9</code></pre></li><li><p><a href="https://en.wikipedia.org/wiki/Delimited_continuation" target="_blank" rel="noopener">Delimited Continuation</a> - <strong>shift / reset</strong></p><pre><code class="lang-scheme">;; 调用 require 载入库 racket/control - 这样就能使用 reset 和 shift 了(require racket/control);; shift 后面的 k 的内容也是当前位置的 continuation(reset (shift k (k 1)))  ;; 输出 1 - k 是之后要做的事，之后啥也没做，所以 k 相当于 identity 函数，(k 1) 作为 (reset (shift k ...)) 的结果输出(reset (shift k 1))      ;; 输出 1 - 没有调用 k ，于是上下文被丢弃，1 作为 (reset (shift k ...)) 的结果输出(reset (* 3 (+ 1 (shift k (+ 1 (k 2))))))         ;; 输出 10 - 这里内部的 (+ 1 ...) 没被丢弃，可以对比一下 call/cc(reset (* 3 (+ 1 (shift k (set! saved-k k) 2))))  ;; 输出 2 - 丢弃了 reset 到 shift 之间的计算（上下文）- 没有调用 k ，k 所代表的的上下文也就被抛弃了(saved-k 3)              ;; 输出 12 - 此时的 saved-k 相当于函数: (lambda (x) (* 3 (+ 1 x)))(reset (* 3 (+ 1 (shift k1 (+ 17 (shift k2 (k2 2)))))))    ;; 输出 19 - k1 代表前面的操作，算出的 19 作为了前面 reset shift 的值(reset (* 3 (+ 1 (shift k1 (+ 9 (shift k2 (k2 (k1 2)))))))) ;; 输出 18 - 可以看到，调用 k1 并不会丢弃第二个调用 k2;; 如果单独用 reset 则 (reset exp)会正常输出表达式 exp 的值;; 如果单独使用 shift 则此时的 shift 和 call/cc 类似，调用 k 会丢弃 shift 内部的上下文;; 强烈不建议单独使用 shift ，因为程序会出现不符合预期的奇怪行为，reset 和 shift 要成对使用(+ 1 (* 2 (shift k (k 3))))       ;; 输出 7 - 这里的 k 相当于 (lambda (x) (+ 1 (* 2 x)))(+ 1 (* 2 (shift k (+ 4 (k 3))))) ;; 输出 7 - 内部的 (+ 4 ...) 被丢弃了</code></pre></li></ul><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Programming Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杨一工连载第 4 话：最高端的地方</title>
      <link href="/2022/02/21/yang-yi-gong-series-4/"/>
      <url>/2022/02/21/yang-yi-gong-series-4/</url>
      
        <content type="html"><![CDATA[<p><strong>哪里是「最高端的地方」？</strong></p><blockquote><p>定理：家里的装修风往往会趋近主人自认为见过最高端的地方。</p><footer><strong>Stephen Chu</strong></footer></blockquote><hr><p><strong>这篇讲装修吗？这可是个复杂的活，先说一下普通玩家从哪里开始吧。</strong></p><p>和买保险类似，从一个发人深省的问题开始：「业主的命值多少钱？」</p><hr><p><strong>这么毛骨悚然干嘛？你就直接说「先确定预算」嘛。</strong></p><p>预算 = 时间 + 精力 + 钱，而不简单只是「钱」。</p><p>玩家们对生活的不同观念导致了投入的差异，这个很好理解。不过对于预算，通常的理解只<strong>局限</strong>于「钱」，比如每平米 700 元。其实在装修上，最影响效果的还是<strong>时间和精力</strong>的投入。「钱」是最简单的，也是最偷懒的。因为装修的过程中，有太多<strong>用钱买不到</strong>的东西了。</p><p>整个装修的作业都要围绕着「<strong>预算</strong>」来进行，以它为中心。</p><hr><p><strong>用钱还买不到？比如？</strong></p><p>比如「<code>知道自己要什么</code>」就是花钱也解决不了的。</p><hr><p><strong>是说要确认装修过程中的各种供应商吗？瓷砖、门窗、柜子……</strong></p><p>也许会更加地抽象，关系到玩家们心中「什么才是<strong>真正的</strong>自由？」</p><p>实际上，玩家们的<strong>需求</strong>并不那么显而易见，需要耐心地去探索和挖掘，甚至对市场进行调研。每当了解到<strong>新的信息</strong>之后，需求还会<strong>进化</strong>。只有知道自己<strong>想</strong>要什么，<strong>能</strong>要什么，才能更顺利地确认各家供应商：要不要封窗？买哪家的窗？哪家的瓷砖？什么颜色？哪家的白电……</p><p>之后还要<strong>协调</strong>这些供应商，负责他们之间的<strong>对接和沟通</strong>工作。比如规划何时进场、尺寸多少等等。<br>总之，装修的主要精力会消耗在<strong>确认需求</strong>这个环节。该环节很可能会贯穿装修的<strong>全程</strong>。</p><blockquote><p>一大解千愁。费用换大一点的户型，比任何装修上的花费舒适度更高。厨房大了拐角拉篮这种特殊五金也用不上了，卧室距离远了隔音门也用不上了，多几个卫生间以后四分离也不用做了，连定制化产品都能变的不需要那么定制化了……你首先值得拥有更大的房子，装修这种锦上添花的事情，人间不值得。</p><footer><strong>王大喵</strong></footer></blockquote><hr><p><strong>会不会弄得太复杂了？施工队的项目负责人经验那么丰富，让他帮忙搞定全部这些就好啦。</strong></p><p>装修行业鱼龙混杂，需要<strong>做足功课</strong>才能找到靠谱的施工队。</p><hr><p><strong>做功课？听起来要消耗很多精力？</strong></p><p>家装行业的平均专业水准还没高到能让人可以偷懒的程度。</p><p>实在嫌麻烦可以直接就在第一家做。<strong>不对比</strong>就不会有<strong>伤害</strong>。装修这东西，<strong>知道得越少越容易感到幸福</strong>。找大品牌，服务通常足以保障各环节没啥<strong>大</strong>问题。</p><p><strong>柜子设计师</strong>出图后，交给施工队就行了。如果不想给钱，就凭借记忆回忆<strong>柜子设计师</strong>的布局，描述给施工队听。然后就耐心等待完工、付尾款、入住。</p><hr><p><strong>实在不想花时间做功课的话，怎么找施工队？</strong></p><p>比较靠谱的是用「工艺筛选法」，也就是一叶知秋。具体来说就是看施工队<strong>默认</strong>的施工工艺是否属于那些<strong>困难麻烦的工艺</strong>。这意味着他们习惯于处理<strong>复杂</strong>。比如看墙面工艺是否会<strong>默认</strong>采用冲筋找平，或者贴砖工艺是否<strong>默认</strong>瓷砖粘接剂薄贴等等。如果他们对某项<strong>高难度</strong>工艺是<strong>默认</strong>就会做的，而不是所谓的“加钱也可以做”，这样的施工队大概率靠谱。</p><blockquote><p>「加钱可以做」的意思其实就是「你出学费我们可以试试」。</p><footer><strong>王大喵</strong></footer></blockquote><p>那当然啦，靠谱的施工队价格也会很高，各位玩家量力而行。但始终推荐低预算的施工也争取让靠谱施工队来进行。</p><p>普通住的话，事情就简单。个性化需求越多（如全屋智能、美学追求）才会越折腾，要找专业的<strong>住宅</strong>设计师。这对<strong>预算</strong>有更高要求。预算 = 时间 + 精力 + 钱，而不简单只是「钱」。</p><hr><p><strong>怎么判断一个设计师是否优秀？</strong></p><p>「<code>对所有装修作业环节、各主流产品使用体验及其供应商渠道、施工工艺都十分了解</code>」的<strong>住宅</strong>设计师可以算优秀。出图纸、出效果只是<strong>非常基础</strong>的操作。而那些能让业主在省心供应链的同时，做到把钱花在刀刃上的<strong>强预算控场</strong>设计师，<strong>才值得</strong>掏钱。否则还是全屋制定的<strong>免费</strong>设计师划算。</p><p>市场上极少有<strong>单个人</strong>具备如此全面的综合能力，一般是一个团队才能做到。这也是为什么优秀的设计价格高昂的原因：整个团队的成员都要吃饭。</p><blockquote><p>……客户需求是什么？设计难点在哪？怎么化解这些难点？动线为什么这样规划？为什么这个非常重要？为什么那个更重要……所谓设计的本质，就是用不同的手法复刻一些好的空间体验……</p><footer><strong>王大喵</strong></footer></blockquote><p><a href="https://weibo.com/u/5838373206?refer_flag=1005055013_" target="_blank" rel="noopener">@大喵一号M</a> 是我见过最接近「全栈」的硬核<strong>住宅</strong>设计师（是的，史老师和本间老鬼之流也差点意思）。虽然她偶尔表达上让人困惑（也许是强者缺少耐心？也许干脆就是她认知错误？）、虽然一年只做 7 个项目<strong>令人讨厌</strong>（或者说令人放心？）、虽然异地项目 200 平米起让人不适（或者说慈悲为怀？），不过你可以把她理解为装修设计界的<strong>壁挂马桶</strong>，瑕不掩瑜。各位<strong>高预算</strong>玩家可以从<strong>刷</strong>她的微博开始你们的折腾。各位马上就能体会到预算<strong>不只是钱</strong>。</p><p>其实<strong>市场上</strong>基本不存在真正「全栈」的家装设计师，这里的必然性是由「<a href="/2019/02/04/yang-yi-gong-series-1/">广度优先</a>」的技能树策略所固有的<strong>超高门槛</strong>决定的。能跨越这个门槛的“设计师”不会以「设计」谋生。从这个意义上，王大喵应该算是为中国最强的住宅设计师之一，鲜有对手（史老师和本间老鬼之流都差点意思）。</p><blockquote><p>……相比那些花了钱就能提升生活品质的设备和电器，你的生活其实没那么需要「设计」这个东西…………</p><footer><strong>王大喵</strong></footer></blockquote><p>值得注意的是，乔布斯时代的苹果公司能请得起设计师和工程师，彼时的诺基亚微软<strong>也</strong>请得起。这很大程度上暗示了玩家们<strong>自身的水平</strong>限制了他们装修效果的上限。其中部分原因是玩家自己是什么水准，能找到的最强设计师就是什么水准。另外的原因是，如果人生的密度过低，别说王大喵，你就是请来王大喵她爹，最终也是惨不忍睹。</p><p>所以，装修过程中请保持轻松，不必苛求。苛求它人，很可能就是在抱怨自己的水准。^_^</p><blockquote><p>我认为自己并不只是在说房子、在讲装修……我见过太多的房子……我所追寻的“美丽的家”，不过百之一二……即使有了更大的房子、更豪华的装修、更科学的设计，也不过只是拥有了升级版的“硬件”，它永远无法替代“软件”——居住者本身。</p><footer><strong>逯薇</strong></footer></blockquote><hr><p><strong>好的我总结下：普通玩家找全屋制定+施工队即可。省心的方式就是不去对比，对吧？</strong></p><p>对。装修要追求<strong>挚爱</strong>，而不是寻求<strong>共识</strong>。不必去羡慕其他玩家。</p><hr><p><strong>不对比的话，我花的钱会不会因此比别人多一些？感觉让施工队全权负责的话，他们会占我一些便宜？</strong></p><p>有什么问题吗？你花的时间精力<strong>少</strong>呀。相当于多花些钱购买了<strong>宝贵</strong>的生命。其他玩家的<strong>命贱</strong>呀，所以他们只能用<strong>廉价</strong>的生命去换取“省钱”又“满意”的效果啦。普通玩家要做的就是<strong>平衡</strong>消耗的资源精力和满意程度。归根结底还是个「<strong>预算</strong>」问题。</p><p>（预算 = 时间 + 精力 + 钱；而不简单只是「钱」）</p><hr><p><strong>我倒是觉得他们的生命不仅不贱，还特别值钱。正是因为生命价值高、密度高，他们才愿意多花时间精力来改善住宅，提高生产力和生活质量。</strong></p><p>你这个观点很容易得罪他人。</p><hr><p><strong>总之，想花钱少，就要多花时间精力；想少折腾，就要多花钱；都想少，只能靠运气；这么理解对吗？</strong></p><p><code>不太对。</code></p><p><strong>多</strong>花时间精力<strong>并不能</strong>让你<strong>少</strong>花钱，很可能会让你花<strong>更多</strong>的钱。这就是为什么<strong>知道得越少</strong>越容易<strong>感到</strong>幸福。</p><p>多花时间精力的唯一好处是让<strong>自己的需求</strong>逐渐清晰明朗，能把钱花在<strong>刀刃</strong>上。坏处就是“刀刃”容易<strong>增加</strong>很多。</p><hr><p><strong>好的。我先开干，有情况再来交流。</strong><br>一切顺利哈。</p><hr><ul><li></li><li></li><li></li><li></li><li></li><li></li></ul><hr><p><strong>唉~随便找了个柜子设计师就发现有太多细节需要操心了。先不说硬装的乳胶漆、瓷砖、门窗等等要选，家里各种影响水电点位和空间尺寸的设备已经让我头大。什么中央空调、分体空调、风管机、燃热、电热、洗碗机、集成灶……涉及的项目略多，每项还对应诸多品牌，让人眼花缭乱。都选顶级，钱又不够了。</strong></p><p>你对自己生命的「估值」是不是有点<strong>虚高</strong>了？至于这么全方位地呵护吗？</p><p><strong>知道得越少，越容易感到幸福</strong>。人生不只是「装修」，听设计师和施工队的建议买就行，省下来的精力去做更重要的事。</p><p>你说的这些“困难”只要拉一下预算表格，排一下优先级，自然就能直观地做出选择。如果你觉得不直观，就要去<strong>反思</strong>自己的<strong>需求</strong>、欲望和能力，或者投入精力想想「该怎样才能<strong>买得起</strong>？怎样才能<strong>兼得</strong>熊掌和鱼？」</p><p>先确定全屋的软装和设备更有利于统筹全局开支，避免「硬装」阶段花钱过多，导致直接影响生活的「软装」和「电器设备」则只好将就。</p><p>还是最开始那个话题：<strong>预算</strong>。了解和探索自己的<strong>需求</strong>是个消耗<strong>大量精力</strong>（预算）的过程。预算少可以不必<strong>过多</strong>地探索自己的需求。</p><blockquote><p>放弃幻想，轻装前行。</p><footer><strong>Stephen Chu</strong></footer></blockquote><hr><p><strong>还是想严肃地大干一场。全方位地教教我吧。</strong></p><p>前面已提到过，从「全屋定制」出发，让设计师在前期就介入规划空间是最好的。若是反过来，让全屋制定介入太晚，会很容易和<strong>已装好的设备</strong>（电位、水位、空调等）出现各种空间上的冲突。</p><p>这里要说一下成品家具。「<strong>成品家具</strong>」比「<strong>全屋制定家具</strong>」要更便宜、更好看，各项指标基本都优于「全屋制定」。选择全屋制定的玩家通常有 <strong>2 个</strong>优势：第一、家里的<strong>空间利用率</strong>能达到最佳水平。第二、有“免费”设计师提供布局图纸和全程相关咨询。不过选择成品家具需要自己全权负责搜索和把关，这又是一个关于时间精力，或者说关于预算，的话题了。</p><p>通过挑选你<strong>感觉合得来</strong>的设计师来确定全屋制定的供应商。因为装修<strong>全程</strong>你都需要和该设计师配合，所以只要感到设计师没耐心，建议就直接换人，不然彼此全程相互折磨，没有必要。</p><blockquote><p>……我也很欣赏这种诗和远方的设计理念，但是，XX、XXX、XXXX等等等，都是打起十二分精神也不一定能永久解决掉的苟且……说出来可能有点丧，住宅设计的本质是对居住其中的人负责，而不是对设计负责。</p><footer><strong>1988之王大喵</strong></footer></blockquote><hr><p><strong>人家就想问你嘛。分享一下工地开工之后你的操作呗？</strong></p><p><a href="https://weibo.com/u/5838373206?refer_flag=1005055013_" target="_blank" rel="noopener">王大喵</a>推荐了一些靠谱的施工方供各位无脑信任：</p><pre><code>1. 性价比窗帘商家：大胜-ID-WSWJWJT88-上海闵行；2. 湖南长沙通过南玻筛出来的靠谱封窗商家：方旭系统门窗服务商-ID-Fx8886zszp-湖南娄底-132-97471234；3. 北京靠谱工长：高健-ID-falajma-北京朝阳；4. 深圳靠谱工长：麦工-ID-mc130509-广东深圳；5. 吉博力排水靠谱供应商：Danny-ID-dannycys-上海闵行-淘-美好人生mhrs；</code></pre><p>若是你的设计规划图纸已经完成，即全屋「<strong>需求和预算</strong>」已经完全清楚。那确实到了正式开工的时刻：</p><ul><li><h4 id="打拆「砌墙」阶段"><a href="#打拆「砌墙」阶段" class="headerlink" title="打拆「砌墙」阶段"></a>打拆「砌墙」阶段</h4><p><strong>1、</strong>制定需要时间。<strong>封窗</strong>供应商进场量尺下单。规划燃热排气孔、新风管道口（避开燃热排气）、厕所排气扇、各房间开扇数量、类型以及玻璃（如磨砂）配置。飘窗的<strong>【上】沿窗框</strong>需要预留足够宽度，不然开扇会碰到吊顶。飘窗的<strong>【下】沿窗框</strong>也要预留足够宽度。因为台面可能铺垫子占用一些高度，然后窗帘不触碰垫子、玻璃要高于窗帘以提高遮光效果又要占一些高度。要让商家使用「<strong>耐候</strong>密封胶」而不是「结构胶」来做外框密封。阳台窗户重量每平方在 400 千克（公斤）以内。要和门窗商家确认不破坏外墙防水，尤其是换飘窗最容易破坏外墙（这也是为什么要慎换飘窗）。泥工阶段前要完成封窗；<br><strong>2、</strong>超过 16 升的大流量的热水器需要大气表。因为会排长队。所以在此阶段提前联系燃气公司更换 4 立方的<strong>燃气表</strong>（民用最大）。根据柜子布局移表。重新布置燃气管道。水电进场阶段要完成改表；<br><strong>3、</strong>邮寄需要时间。此阶段购买 HDMI 2.1 光纤线（对电视画面有追求才买）、六类网线以及信号线（调光灯具才需要的灯线）；<br><strong>4、</strong>邮寄需要时间。此阶段购买壁挂马桶的预埋水箱（如果是吉博力的水箱要注意购买 PVC 排水管配件，因为吉博力的 PE 管和 PVC 排水管由于热胀冷缩系数不同，不能混用）、龙头花洒<strong>预埋件</strong>（如果有）、前置净水器（追求水质才买，水电阶段需要安装）；<br><strong>5、</strong>水电进场阶段需要了解挂墙设备的「<strong>打孔位置</strong>」，所以最好提前购买卫浴花洒用于水电工参考走线走管；<br><strong>6、</strong>制定需要时间。此阶段购买所选<strong>灯具的预埋件</strong>（如果对灯光没需求，就没这东西。吊顶阶段需要预埋件）；<br><strong>7、热水器</strong>电控若是需要提前走线的，那么热水器在此阶段要完成型号确定，甚至完成购买；<br><strong>8、</strong>制定需要时间。<strong>入户门</strong>和隔音门此时下单。泥工阶段的最后需要安装入户门，以便完成入户区域的铺贴；<br><strong>9、</strong>调研确认全屋各处的「<strong>地漏</strong>」类型，最好能提前采购地漏给【水电进场】阶段的师傅做布管参考；<br><strong>10、</strong>购买电动晾衣杆，以便在水电阶段预留电位（地火零还是？），在吊顶阶段预留安装位置；<br><strong>11、</strong>所有进口的设备，比如卫浴、水槽等，都要提前了解到货时间。1 个月以上的都要考虑提前购买；</p></li><li><h4 id="水电「进场」阶段"><a href="#水电「进场」阶段" class="headerlink" title="水电「进场」阶段"></a>水电「进场」阶段</h4><p><strong>1、</strong>备货邮寄需要时间。此阶段购买全屋瓷砖、<strong>踢脚线</strong>、窗台石；<br><strong>2、</strong>全屋尽量采用<strong>6 分管</strong>（6/8 英寸 =19.05mm），在出水口有铜件丝扣的部分再转成 4 分管（4/8 英寸 = 12.7mm）。不用 4 分管的原因是水电工热熔管道的过程几乎是<strong>不规范</strong>的，这会使得 4 分管热熔后管的内部直径会缩小，导致水流受阻，「压降」明显。尤其是在全屋采用环路平衡接法的情况下，管道过长，热熔部位过多，水压「压降」更明显。总的来说就是提前为水电工<strong>不专业</strong>买保险。<br><strong>3、</strong>在全屋 6 分管的情况下，沟通冷热水是否能做环路平衡。环路平衡保证回水管、无死水、水压平均分配；<br><strong>4、</strong>卫生间干湿区<strong>共用</strong>「存水弯」，以便长期无水补充的干区地漏能通过「共享」，也获得存水弯隔离气味的功能；<br><strong>5、</strong>沟通<strong>二次排水</strong>施工工艺；沟通淋浴区长条地漏施工工艺；地漏要专门一条支线，不能和墙排管道的主干上，避免墙排流量过大，从地漏反水进入砂浆层。「<strong>洗衣机</strong>」排水处下水量非常大，很容易从地漏和排水管之间的缝隙漏水。所以洗衣机排水尽可能用「<strong>墙排</strong>」，地漏只适合温和排水，不适合大流量急排；<br><strong>6、</strong>若要<strong>马桶移位</strong>，最好使用墙排壁挂，排污管道做坡度。马桶排污管<strong>不能做存水弯</strong>，会堵；<br><strong>7、</strong>确保一条线管只走「<strong>一条</strong>」 HDMI 光纤线；确保 HDMI 先和网线为点对点<strong>活线</strong>而非死线；<br><strong>8、</strong>强电箱移位需要从总闸处<strong>重新拉线</strong>，保证电线的连贯完整性，不要续接。用 10 平方电线；<br><strong>9、</strong>使用标签机给每条线路<strong>打上标签</strong>，尤其是灯线回路和网线，方便后期接线找线；<br><strong>10、</strong>确保顶喷花洒的<strong>水管</strong>走线和花洒螺丝<strong>孔位</strong>不冲突；<br><strong>11、</strong>关于卫生间的「<strong>等电位联结端子</strong>」，如果浴室内全部管道都是<strong>非金属</strong>管道，只有一些孤立的金属部件（如金属毛巾架，金属扶手），则<strong>没有必要</strong>再做等电位联结，因为没有能传导危险电位的外部金属引入浴室。详细原理参考<a href="https://www.zhihu.com/question/328701277/answer/1482370146" target="_blank" rel="noopener">这里</a>。此外各个工地的现实情况十分复杂，未必严格执行施工标准，比如若开发商的等电位是「整层联结」而不是「分户独立」，那么别人家的等电位如果没做好，会让你家的等电位带电，引入危险；<br><strong>12、</strong>全屋插座尽量都确保 <strong>4 平方</strong>线，让线路功率上限在数十年生活中能保持足够的余裕；<br><strong>13、</strong>和电工沟通，接线位置尽全力保证<strong>锡焊</strong>环节（挂锡），而不是仅仅是绝缘胶布手工缠绕完事；<br><strong>14、</strong>预埋件和水管出水口埋件的时候一要确保能和<strong>贴砖后的墙面</strong>尽可能在同一平面上，避免出现热水、冷水孔深浅不一。否则后期花洒非常难装；<br><strong>15、</strong>厨房水槽下的「<strong>角阀点位高度</strong>」要根据主水龙头的管道长度来预留。建议角阀和龙头底部间的距离是龙头管道长度减 20cm 左右。有垃圾处理器时，厨房水槽<strong>不能用透明排水管</strong>，还要注意排水顺畅度问题（因为有厨余垃圾要排污）；<br><strong>16、洗衣机和干衣机</strong>的排水点位手要够得到，方便检修。两者还有<strong>微蒸烤箱</strong>的电位都不能在机子背后，手要够得到，还要方便拔插。<br><strong>17、</strong>确保镜灯的安装孔位和线管位置不冲突，以免后期打孔打坏线管；<br><strong>18、</strong>灯信号的 DALI 总线要确保每个射灯的点位都要「<strong>有进线有出线</strong>」，也就是两条线。这样总线上的每个灯孔位都是小型检修口，便于后期检修。<br><strong>19、</strong>用袋子之类的捆绑「<strong>保护线缆</strong>」，否则「泥工进场」阶段会弄脏甚至弄坏；<br><strong>20、</strong>管线机的位置要布置 <strong>2 根「线管」</strong>通到水槽底部。后期一根走连接直饮水管道，另一根走电线。管线机的电源线要拆机或剪断后重新接线，不然无法穿过线管。这 2 根线管不能有 2 个以上的拐弯，否则后期难穿电线和水管。管线机不能距离直饮水机太远，否则<strong>软管太长会有存水</strong>；<br><strong>21、</strong>根据所选设备型号和自己需求，可能要确保燃气热水器在屋内电控的信号线和点位有预留；<br><strong>22、</strong>确保各房间空调「<strong>挂机尺寸</strong>」，以便提前开槽打孔，预留隐藏电线和管道的位置；<br><strong>23、</strong>注意定位地面「<strong>门吸</strong>」的点位，线管要避开，不然后期安装门吸的时候打孔会破坏线管；<br><strong>24、</strong>水电结束后，阳台<strong>系统窗</strong>进场安装。封窗要在贴砖阶段前进场。这样铺砖阶段就可以直接收边，窗台石也可以根据窗框位置铺贴。铺砖要注意给吊机暂时空出位置，否则有压坏砖的风险。窗户安装位置不能遮盖建筑的「滴水线」。如果建筑没有滴水线，就去淘宝搜索购买自己增加。检查窗台外沿坡度是否有积水隐患，如果坡度<strong>内倒</strong>则需要重新修正坡度。修正坡度时不能堵塞<strong>型材排水孔</strong>；<br><strong>25、</strong>购买「<strong>静音棉</strong>」对卫生间等下水管道进行包管（不但要包立管，更要包横管，横管是主要噪音来源；一定要用<strong>胶带绕圈</strong>勒紧隔音棉——任何隔音措施，密封都是大前提）。最大程度减小楼上排水的噪音。泥工阶段前要完成；<br><strong>26、</strong>因为接下来是吊顶，所以此阶段结束后<strong>中央空调</strong>进场安装。并且一定要在<strong>吊顶前通电调试</strong>。不但要确定每个风机<strong>出风正常</strong>，还得确保<strong>制冷功能正常</strong>，顺便看一下<strong>冷凝水管通畅度</strong>，中奖概率要排除，不过份相信品牌，安装水平也有高下，以免发生拆顶惨剧；此外潮湿地区（比如海南），出、回风口得用 ABS 材质，金属材质的会结露；中央空调排水管尽量接入室外排水管，必须接入室内排水管，尽量接入管路自带U型弯的常用地漏/排水，日常用水就可以保证水封高度，防止浊气顺空调排水管进入室内。机器出风口视情况安装好纳米帆布（<strong>方头燕尾螺丝</strong>固定，重叠处大于 10cm），以便后期连接吊顶出风口。</p><p><code>「水电阶段」结束后，千万记得拍摄现场照片以便后续环节能随时查看线管水管点位和路径，避免破坏它们</code></p></li><li><h4 id="木工「吊顶」阶段"><a href="#木工「吊顶」阶段" class="headerlink" title="木工「吊顶」阶段"></a>木工「吊顶」阶段</h4><p><strong>1、</strong>「吊顶」在「铺砖」阶段之前是为了保护瓷砖不被梯子和各种吊顶材料弄坏。吊顶师傅会使用梯子频繁移动。<br><strong>2、</strong>确保卫生间吊顶的高度和顶喷花洒<strong>不冲突</strong>，否则花洒可能装不上；<br><strong>3、</strong>拉尺作为照片中的参考，然后<strong>拍照</strong>确定关键点位的轻钢龙骨布局，以便后期窗帘轨道、灯具、音箱安装；<br><strong>4、</strong>确认洗手间的排气方案。厨房<strong>烟管</strong>和洗手间的<strong>排气管</strong>都需要在此阶段吊顶完成前预埋；<br><strong>5、</strong>购买更好的<strong>烟道止回阀</strong>，把原始止回阀换掉。止回阀的尺寸要根据你选定的抽油烟机来选择。烟道旁边留好<strong>检修口</strong>，随时准备更换新的止逆阀。因为随着经年累月的使用，止逆阀的密封件是会老化的。而且楼顶排烟口也会年久失修，排烟口径逐年缩小，烟道内部压力也会越来越大，密封件稍微有一丝丝的老化都会止逆失效。定期更换止逆阀和督促物业定期维护排烟口双管齐下才能解决烟道污染问题。这也是为什么<strong>公共烟道</strong>的<strong>高层</strong>用户不建议做纯开放式厨房：一旦返味，封闭厨房还可以关门开窗，甚至打开油烟机，产生的油烟和噪音也不至于影响其他区域。封闭式中厨搭配开放式西厨的组合方式是最合理的。<br><strong>6、</strong>确保无边框筒射<strong>灯的预埋件</strong>按图纸说明安装；<br><strong>7、</strong>封吊顶前把自家厨卫阳台顶上的别人家的「<strong>下水检修口</strong>」检查一遍。尤其是马桶下水的检修口盖，<strong>拧紧</strong>它们。再去<strong>楼下</strong>检查下自家的「下水检修口」，<strong>拧紧</strong>它们。减少一些意料之外的不必要的麻烦。这个事故中招率还挺高的。<br><strong>8、中央空调</strong>要在吊顶阶段前进场完成内外机的安装。普通挂机空调要在吊顶阶段确定藏管藏线的方案。<br><strong>9、</strong>购买「吹尘枪」进行吊顶清洁，让灰尘量始终处于最低。吊顶师傅一般也有类似「吹尘枪」的工具；<br><strong>10、</strong>门窗进场。要千万注意旧窗户旧阳台的拆除不能破坏外墙防水，尤其是换飘窗（这也是为什么要慎换飘窗）。外墙由<strong>防水层</strong>、<strong>保温层</strong>和<strong>外立面</strong>三层构成，关键是<code>不能破坏「外墙」防水层</code>。</p></li><li><h4 id="泥工「铺砖」阶段"><a href="#泥工「铺砖」阶段" class="headerlink" title="泥工「铺砖」阶段"></a>泥工「铺砖」阶段</h4><p><strong>1、</strong>确保卫生间 3 mm 的砖缝（3 mm 缝对应 9mm 厚度的砖，砖越厚，缝隙要留得越大，这样填缝剂才能顺利<strong>填实</strong>，接触到水泥砂浆层），「地压墙（地砖压墙砖）」和「墙压地（先贴地砖，墙砖压地砖）」的铺贴方式<a href="https://weibo.com/5838373206/LCdl4uita?from=page_1005055838373206_profile&amp;wvr=6&amp;mod=weibotime&amp;type=comment#_rnd1657902177860" target="_blank" rel="noopener">各有优劣</a>，都需要填缝防止<strong>积水</strong>渗入砂浆层。地压墙更容易填缝，墙压地更容易防止地面水渗入立面的墙体导致相邻房间受潮，视觉上墙压地更好；<br><strong>2、</strong>阳台窗台处的铺贴也需要「地砖压墙砖」的铺贴方式，并且也是 3 mm 的砖缝（同样看瓷砖厚度确定缝隙）；<br><strong>3、</strong>沟通确认<strong>长条（线性）地漏</strong>安装工艺、砖的相关坡度等。地砖和地漏边缘之间也要留足缝隙便于后期填缝；<br><strong>4、</strong>和施工方确认墙砖的铺贴工艺，并根据瓷砖供应商的铺贴图确认铺贴方式（比如从房里到入户门）；<br><strong>5、</strong>沟通生活阳台坡度方向，注意洗衣机<strong>底部</strong>必须<strong>水平</strong>，不能有坡度，否则洗衣过程晃动剧烈；<br><strong>6、</strong>沟通卫生间瓷砖坡度方向，确保排水顺利，避免积水；<br><strong>7、入户门</strong>在铺砖快完成时才进场安装。要规划好进场时间，若装得早，搬砖、水泥、沙子等过程会压坏入户门，装的晚会和泥工收边进度冲突；</p></li><li><h4 id="油工「刷墙」阶段"><a href="#油工「刷墙」阶段" class="headerlink" title="油工「刷墙」阶段"></a>油工「刷墙」阶段</h4><p><strong>1、</strong>此阶段<strong>之前</strong>不能刷「墙固」，避免灰尘使其失效。墙固采用界面剂而不能是“黄墙绿地”；<br><strong>2、</strong>吊顶阴角处用马贝 112 乳液补缝材料，补完直接刷腻子。沟通避免使用用「阴角条」；<br><strong>3、</strong>制定需要时间。刷墙结束的第一时间让<strong>柜子设计进场复尺</strong>，柜子下单；<br><strong>4、</strong>制定需要时间。刷墙结束的第一时间测量<strong>全屋窗帘尺寸</strong>，窗帘下单。窗帘挂钩「<strong>顶部</strong>」要距离帘布「<strong>顶部</strong>」13mm 以上，可最大程度遮光；<br><strong>5、</strong>有淋浴房的，让<strong>淋浴房</strong>商家进场量尺。制定时要注意磨砂玻璃面的朝向。磨砂面不好清理，最好朝向不易脏的空间。淋浴房的平开门要<strong>外开</strong>。因为淋浴区封闭、高温、地面湿滑，属于晕倒、滑倒的高发区域，且淋浴区又空间狭小。一旦有人晕倒在内，会挡住<strong>内</strong>开门的开启空间，不把玻璃门拆掉无法救助，所以必须<strong>外开</strong>。如果没有外开空间，则不建议使用平开门；</p></li><li><h4 id="瓷砖「填缝」阶段"><a href="#瓷砖「填缝」阶段" class="headerlink" title="瓷砖「填缝」阶段"></a>瓷砖「填缝」阶段</h4><p><strong>1、</strong>厨房卫生间等「湿区」选<strong>深色</strong>的填缝剂，避免白色发黄变色；<br><strong>2、</strong>填缝完成后，<strong>空调</strong>进场完成最终安装和调试。确保安装师傅抽真空。1 匹空调（至少） 10 分钟，2 匹空调（至少） 20 分钟，3 匹空调（至少） 30 分钟，中央（至少）2 小时；</p></li><li><h4 id="「柜子」进场阶段"><a href="#「柜子」进场阶段" class="headerlink" title="「柜子」进场阶段"></a>「柜子」进场阶段</h4><p><strong>1、</strong>避免用柜子的默认胶。要购买专用的<strong>中性</strong>防霉玻璃胶。酸性玻璃胶防霉效果好，但不能用在金属的附近。<br><strong>2、</strong>邮寄需要时间，检查各插座点位，提前<strong>网购</strong>五金店没有的 15cm 的螺丝和 86 盒修复器；<br><strong>3、</strong>「柜子」和乳胶漆墙面之间的缝隙<strong>不能</strong>使用「玻璃胶」，要用类似马贝 112 乳液补缝材料的东西填缝；<br><strong>4、</strong>使用「吹尘枪」清洁插座点位的 86 盒内部灰尘；<br><strong>4、</strong>柜子完成后，推拉门、轨道门开始进场安装；</p></li><li><h4 id="「软装」进场阶段"><a href="#「软装」进场阶段" class="headerlink" title="「软装」进场阶段"></a>「软装」进场阶段</h4><p><strong>1、</strong>购买专用的<strong>发泡剂</strong>用于安装室内门和隔音门；<br><strong>2、</strong>「门框」和乳胶漆墙面之间的缝隙<strong>不能</strong>使用「玻璃胶」，要用类似马贝 112 乳液补缝材料的东西填缝；<br><strong>3、</strong>洗碗机的水管不能加长太长，否则使用过后，管道里存水会过多，影响水泵的排水能力；<br><strong>4、</strong>洗衣机底部不能加「增高垫」，要保持洗衣机原始标准尺寸 850mm 高。增高垫会让洗衣机不稳固，工作时晃动厉害；</p></li></ul><hr><p><strong>没想到确认完需求后，还有这么多琐碎的细节。我生平见过最高端的地方也就是「快捷酒店」。似乎还是老实当个普通玩家让施工队负责剩下的比较好呀。</strong></p><blockquote><p>……苦海无涯，不要恋战，速速通过。</p><footer><strong>王大喵</strong></footer></blockquote><p>人生不只是「装修」，有大把更精彩、更具重大意义的事值得投入。装修太完美，人生就不完美了。</p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Miscellaneous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>故事与事故-计算机科学</title>
      <link href="/2020/04/14/ian-cs-course-stories/"/>
      <url>/2020/04/14/ian-cs-course-stories/</url>
      
        <content type="html"><![CDATA[<h3 id="Javascript-的设计错误"><a href="#Javascript-的设计错误" class="headerlink" title="Javascript 的设计错误"></a>Javascript 的设计错误</h3><p>下面这个示例代码中，变量 x 和 y 由于只在函数体中可见，所以在函数外部对其求值时会显示错误。</p><pre><code class="lang-Javascript">function f(x) {return x * x;}function g(x) { var y = 2; return x * y;}f(3);  // 输出 9x;     // 输出 &quot;Can&#39;t find variable: x&quot;g(3);  // 输出 6y;     // 输出 &quot;Can&#39;t find variable: y&quot;</code></pre><p>稍微更改一下 <code>g(x)</code> ，去掉函数体中的关键字 <code>var</code> 。在调用一次 <code>g(x)</code> 之后，函数外部就能看到 y 的值了。</p><pre><code class="lang-Javascript">function g(x) { y = 2; return x * y;}g(3);  // 输出 6y;     // 输出 2</code></pre><p>这便是 <a href="https://en.wikipedia.org/wiki/JavaScript" target="_blank" rel="noopener">Javascript</a> 语言的设计错误之一：写了 var，这个变量就只在函数内部可见。否则直接写 y = …，它就是“全局可见”。这样的代码会有隐患，会在今后引起程序内部值的错误（例如若有个外部定义的变量和某个函数里的变量重名，程序运行起来就容易发生逻辑错误，因为函数里的定义覆盖了外部的定义）。</p><p>解决方案：写 Javascript 的时候应该主动忘记没有 <code>var</code> 关键词的写法，在所有变量声明语句里都写上 <code>var</code> 。</p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Programming Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>言语之曰</title>
      <link href="/2020/04/14/fun-quotes/"/>
      <url>/2020/04/14/fun-quotes/</url>
      
        <content type="html"><![CDATA[<p><strong>Ian：</strong>……它完全没有防止你什么…两个人同时写啊之类的事情。就是说，这个事情它不管的。它只管这个内存到后来要释放掉，而且只能有一个释放。你不能多次释放。差不多这样……那至于多线程的时候，你要怎么处理这种（读写）冲突事情，那就是你自己的事情了。</p><p><strong>Ian：</strong>……这个…这个有可能开头有点烧脑，但是你用惯了之后你就会发现这个实际上…挺清晰的…没有什么…不像 Rust 那个什么，你两个解引用你都不知道它在干什么。</p><p><strong>Ian：</strong>我觉得它这个设计是碰出来的。都没想清楚是怎么回事。</p><p><strong>Ian：</strong>……你不觉得这样很危险吗？就是…程序员写成什么样就应该是什么样…它自动给你加一些解引用。就是隐式的东西太多了，就容易…就不明白了。到后来你们就会…乱碰，说：“啊~这个地方…为什么加一个这个就能过了？啊？它为什么这个地方不加这个就不能过？然后呢这个把这个取掉，然后又可以编译过了…”到后来就碰来碰去碰对了，就不理解。</p><p><strong>Ian：</strong>我打算给你们加一节课，把 C++ 的这个做法讲一下。这样我们就有一个对比了。然后，有对比就有伤害了……所以在这个方面我觉得 C++ 还是做得更好一点的。</p><p><strong>Ian：</strong>我感觉它那个……看上去它好像有很多新的概念，其实它没有什么新的概念。它这些东西都是在其他语言里面有的，只不过其他语言没有设计成这个样子。</p><p><strong>Ian：</strong>……这样太难懂了，它就说，我要自动给你加一些解引用上去，让你的代码看起来简单一点。但是，那只是看起来简单一点，不等于…你就能理解你的代码了。这种自动解引用就会让你…造成你的困惑。</p><p><strong>Ian：</strong>就是它……隐含的自动干的事情太多了，我觉得这个 Rust 语言。自动做了太多的事情那个程序员他就不知道这是什么回事了对吧。所以我觉得这些东西还是应该是显式的，不应该…自动解引用。</p><p><strong>Ian：</strong>C++ 完美地解决了我对 Rust 的不满……但 C++ 有个讨厌的问题就是，出错信息太难看了。</p><p><strong>Ian：</strong>这个课听完之后你们应该会发现 <strong>Rust</strong> 的<a href="https://doc.rust-lang.org/book/title-page.html" target="_blank" rel="noopener">文档</a>其实写得很不容易理解。</p><p><strong>Ian：</strong>……如果代码都得这样写的话，你的那些函数…要把你写得很头痛。所以，这显然不是一个解决方案。只是告诉你这…这个移动这个…这个语义是怎么进行的。</p><p><strong>Ian：</strong>你要付出表达能力的代价，来满足…来达到它可以好像自动把类型都给你推导出来的这种幻觉。结果你的代码为了能够表达你想要写的那个思路，你就要绕一个弯子才能写出来。所以我不觉得它的这个类型推导是个什么好东西……但是总有一些人他很迷信这个类型推导。因为他也不知道类型推导是怎么回事，他也没有实现过这些东西。他就觉得好神奇啊，我可以不写类型，多好啊。但是代价蛮大的。</p><p><strong>Ian：</strong>……就是很多本来你可以…Java 里面你可以写的代码，你到 Haskell 里面就不能写了。就是因为你那样写了它就推导不出类型。那并不是…因为你的思路有问题或者是你不应该写那样的代码，而是因为它的这个类型推导是有局限性的。它为了能够反着推出这个类型，它就规定了这样的代码、这样的代码你不能写，这种子类型关系你不能有。呵呵~</p><p><strong>Ian：</strong>……但你们不要以为这个…它这种类型推导是什么好东西。就你这里不写类型，然后它给你推导出来。这样的代价其实蛮大的。</p><p><strong>Ian：</strong>你就要找到你的 bug 在哪里。你把它修好，你这个异常就不会发生了。不会发生了你又 try-catch 它干嘛？然后你 catch 到它你又能干嘛？对吧。你啥都做不了，因为那是你的 bug 。呵呵……下标越界这个异常，你 catch 它是没有意义的。</p><p><strong>Ian：</strong>……然后呢，我不是去把这一行（代码）改对，（而是）我在这里去 catch 这个异常，然后处理这个异常，你觉得这样合理吗对吧？正确地处理下标越界的办法，就是你写出的代码就不应该下标越界。</p><p><strong>Ian：</strong>反正它们这些语言都是……有些时候它会学到一些经验教训，但是呢它又加进自己的一些误解。嗯…对，比如说 C# 。你看到它把这个（Type Erasure）改进了，学到了历史的教训，你就以为它都做对了，其实它…Java 已经做对的东西它却没有做对，对吧。就是…C# 它没有那个 checked exception 。</p><p><strong>Ian：</strong>总的说来，就是说这个 Java 的 <strong>JVM</strong> 里面它其实没有这个泛型（Generics）。只是说你这个编译器能看到这个东西。但是它运行的时候它其实是没有的。因为最初 <strong>JVM</strong> 就没有这个东西，后来可能又加不进去了。加不进去它就只有把它叫做 <strong>Type Erasure</strong> 。就是说「编译之后它（类型）就不见了」。然后你还以为它是什么很先进的功能。</p><p><strong>Ian：</strong>如果你去查这个 <a href="https://docs.oracle.com/javase/tutorial/java/generics/erasure.html" target="_blank" rel="noopener">Type Erasure</a> 的话，你还以为它是一个 feature 。但是我觉得它就是一个历史遗留局限。然后呢，被当成 feature ，哦不，呵呵，被<strong>宣传为</strong> feature 。（你）还以为 erasure 是 Java 专门实现的一种功能，它其实就是一个没有完整实现的 Generics 的系统。所以这个代码编译以后，这个 <code>T</code> 的这个东西在 <strong>JVM</strong> 里面是不存在的。</p><p><strong>Ian：</strong>……就是为什么加了这个泛型之后，它才报这个错，对吧。你没泛型的时候，它为啥就没这个错？所以这个就是一个……我感觉就是这个 Java 它这个…它的类型系统的实现…其实它并不是一个很完善的实现。因为它最初没有这些东西，后来又加进去。加进去它的 JVM 又没法改了。为了兼容它以前的代码，所以 Java 有所谓的 <a href="https://docs.oracle.com/javase/tutorial/java/generics/erasure.html" target="_blank" rel="noopener">Type Erasure</a> 就是这个原因。</p><p><strong>Ian：</strong>像 Haskell 之类的有类型的函数式语言它其实就是这个 interface （Java interface），只不过它把它叫另外一个名字（type class）。所以你不要觉得这个东西是面向对象语言才有的。它是一种……其实是一种通用的、制造抽象的思想。</p><p><strong>Ian：</strong>有些东西吸取了教训，但又加进了自己的一些误解。</p><p><strong>Ian：</strong>你看它（<a href="https://github.com/features/copilot" target="_blank" rel="noopener">Copilot</a>）好像能猜出我想写什么，我都没打 <code>fib</code> 呢，它就知道我下一步要写 <code>fib</code> 了。就这个东西比较危险啊。你打的代码它全都看去了，它还知道你下一步要打什么。</p><p><strong>Ian：</strong>语言的特性有些是通过解释器实现的，有些是通过编译器实现的。</p><p><strong>Ian：</strong>所以这个灵活的定义有好处也有坏处。坏处就是，不知道这个东西怎么用的人，他就喜欢滥用这个，对吧。</p><p><strong>Ian：</strong>有些东西它虽然提供给你了，但是你最好不要用，对吧。</p><p><strong>Ian：</strong>你把它写成这种 <code>for</code> 循环，你就每次你都要利用你对这个 <code>for</code> 循环的“深刻理解”，你才能知道，啊~这个是先执行了，然后这个判断才执行。然后实际上你还不如你就写成 <code>while</code> 这种样子。</p><p><strong>Ian：</strong>好了，这样我们的解释器应该就写完了。虽然功能特别少，但是这是一个很有原则的解释器。</p><p><strong>Ian：</strong>为什么这个函数是递归的？因为它处理的数据是递归的。为什么这个函数里面有 3 个分支？因为它处理的数据就是有 3 种情况。就是这么简单。</p><p><strong>Ian：</strong>这些练习不一定要做完的，因为考虑到让有时间的同学多练习，所以数量很多。要是你为了做完而没有学到经验，就比较不划算了。</p><p><strong>Ian：</strong>很多设计错误都是因为设计者为了“用户方便”而产生的。结果带来的麻烦比方便多很多。</p><p><strong>Ian：</strong>现在就像你们刚学开车，我先拿了一辆有点毛病的便宜车给你们先掌握基本的油门和方向盘的使用。之后换一辆毛病少点的车照样可以开。没必要去记住这车的毛病。</p><p><strong>Ian：</strong>要记得，函数是一个动作，它含有它自己所需的一切信息。很多函数的参数是一个函数，它表示“具体要做什么”。它不是一个字符串，而是一个动作自己。</p><p><strong>Ian：</strong>一旦你做过了这些题，你对函数的理解就非常深入了。因为你完全用函数来表达了自然数（及其计算）。</p><p><strong>Ian：</strong>……先写 Call 吧，（解释器）三大要素……</p><p><strong>Ian：</strong>这里有一个信息流动的方向的问题。</p><p><strong>Ian：</strong>这样写破坏了 pair 的抽象层。你可以试试用 first, second 而不要直接把 pair 作为函数调用。</p><p><strong>Ian：</strong>嗯……好像你（@拉拉拉）不用这样表达吧？你看我都已经说清楚了是什么意思然后你又非得要说一句话，然后让大家来判断你说的话对不对，好像就没有什么意义了，对吧。你现在应该已经看明白了这是什么意思嘛。嗯…好~的~</p><p><strong>Ian：</strong>嗯…好了…那个……就是说……大家…嗯…你们看明白了是怎么回事就行了。然后，就是说如果你们要用自己的语言表达出来的话，却不一定是对的。所以，尽量试图不要去用语言表达这个事情，理解了就好。</p><p><strong>Ian：</strong>嗯…到了这个阶段我觉得应该……放开一点，不要总是想独立想出来。你比如说你…你拿了别人的想法之后其实你…也没有损失什么，你也不一定要照他的做，然后也许你能发现一些……做得…做得不一样的地方然后就…就够了。然后……重头想的话，真想不出来其实…效果并不好。</p><p><strong>Ian：</strong>所以…可能将来的那些……练习啊或者是…下了课之后你们要做什么，你们…就不用有那个限制了。然后也可以…搜索引擎里面搜一下……看看网上有没有其他的内容。嗯…但是要小心就是有…有那种…就是“啊”…说“啊~我来给你讲一下这个 call/cc …”什么的，然后就…噼里啪啦打了一堆代码出来然后…结果那代码又不好。然后你就…被误导了。</p><p><strong>Ian：</strong>你可以想象这个 task …… task1 你在跑，对吧？然后到了某个时候你突然说停……停了之后你要回到哪去呢？是不是应该回到启动你的那个地方去？</p><p><strong>Ian：</strong>到现在你应该已经理解，是什么语言并不是由语法决定的。我可以有一个 Scheme 语法的 C 语言，但它仍然是 C 语言。</p><p><strong>Ian：</strong>我又开始看 <a href="https://mitpress.mit.edu/books/little-typer" target="_blank" rel="noopener"><em>The Little Typer</em></a>。发现有时候你必须已经理解它在说什么，你才能理解它在说什么。^_^</p><p><strong>Ian：</strong><a href="https://www.gnu.org/software/emacs/" target="_blank" rel="noopener">Emacs</a> 是一个好的操作系统，它只是缺少一个好的编辑器。</p><p><strong>Ian：</strong>…正好相反，真正可以发挥创造力的空间并不在底层的编译器一类的东西，而在更接近应用和现实的地方。</p><p><strong>Ian：</strong>如果你理解了句子是一个函数调用，那么你就会懂得何时该使用句号。很多中国人对句子没有清晰的概念和边界。本该是句号的地方他们却打逗号，所以你不知道他的句子到哪里结束。</p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Miscellaneous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闲聊-计算机科学基础</title>
      <link href="/2020/04/14/ian-cs-course-gossip/"/>
      <url>/2020/04/14/ian-cs-course-gossip/</url>
      
        <content type="html"><![CDATA[<h3 id="关于表达式（有返回值）和语句（通常没有返回值）"><a href="#关于表达式（有返回值）和语句（通常没有返回值）" class="headerlink" title="关于表达式（有返回值）和语句（通常没有返回值）"></a>关于表达式（有返回值）和语句（通常没有返回值）</h3><p><strong>Super喵喵玄：</strong>举手提问，在给变量赋值的时候，没有返回值但是程序也要给出一个 undefined 这个是为了告诉我们这件事成功了么？是否还有其他的意义在里面。</p><p><strong>拉拉拉：</strong>是不是和 scheme 的 void 差不多？</p><p><strong>Ian：</strong>是的。就像 scheme 的 void 。只是表示这件事做完了。</p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Programming Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研讨-计算机科学基础</title>
      <link href="/2020/04/14/ian-cs-ponderations/"/>
      <url>/2020/04/14/ian-cs-ponderations/</url>
      
        <content type="html"><![CDATA[<h3 id="研讨-1："><a href="#研讨-1：" class="headerlink" title="研讨 1："></a>研讨 1：</h3><p><strong> <code>function f(x) { return x*2; }</code> 是一个语句（statement），而 <code>(x) =&gt; { return x*2; }</code> 却是一个表达式（expression）。为什么？</strong></p><p><strong>我：</strong>这个时代的计算机会对<strong>表达式</strong>求值，于是可以认为<strong>表达式</strong>是有返回值的，进而通过是否有返回值来判断一个（串）符号，对计算机来说是否是<strong>表达式</strong>。<strong>语句</strong>只是声明一件事情，通常没有返回值（计算机一般会对语句的输入返回 <em>undefined</em> 字样，以表示没有返回值）。</p><p><code>function f(x) { return x*2; }</code> 没有返回值，且它的意思是定义（创造）一个函数，所以它是<strong>语句</strong>。<code>(x) =&gt; { return x*2; }</code> 的返回值是 <code>(x) =&gt; { return x*2; }</code> ，所以从返回值的角度它是个典型的<strong>表达式</strong>。</p><p><strong>老师：</strong>“回复 undefined 的都是语句，undefined 的意思是‘没有值’。<code>function f(x) { return x*2; }</code>等价于赋值语句。它创造了一个新的变量<code>f</code>，但这个动作本身没有值。被创造的变量<code>f</code>却是一个表达式，它有值。要区分‘创造变量的动作”和“变量本身’。”</p><p><strong>老师：</strong>“打个比方，‘鞋子’是有值的表达式，‘把鞋放进盒子里’却没有值，它是一个动作。”</p><p><code>注释1：尽管类似</code><a href="https://www.haskell.org" target="_blank" rel="noopener"><code>Haskell</code></a><code>的语言还能看到</code><a href="https://en.wikipedia.org/wiki/Lazy_evaluation" target="_blank" rel="noopener"><code>Lazy evaluation</code></a><code>这样的惰性求值设计，不过老师提到人类在走了很多弯路、踩了很多坑之后总结出的设计结论是：要先对表达式求值，之后再进行下一步计算或者传递。应当认为“活性求值”（</code><a href="https://en.wikipedia.org/wiki/Eager_evaluation" target="_blank" rel="noopener"><code>eager evaluation</code></a><code>）比惰性求值（lazy evaluation）更科学。</code></p><p><code>注释2：有些语言的语句（statement）也有返回值。比如在</code><a href="https://en.wikipedia.org/wiki/History_of_the_Scheme_programming_language" target="_blank" rel="noopener"><code>Scheme</code></a><code>语言中，语句的返回值就是 void 。之所以这样，是因为 Scheme 的设计者希望该语言中不需要区分表达式和语句，这样整个语言的语法结构就非常简洁优雅，其解释器相比其他语言的解释器会少处理很多不必要的东西。</code></p><p><code>注释3：从字符上看虽然表达式 (x) =&gt; { return x*2; } 的返回值是它本身，其实不应简单认为是它本身。真实情况是我们输入了 (x) =&gt; { return x*2; } 这一字符串（a pattern of rules），然后计算机对该字符串求值（解释），就得出这个值是一个函数，于是计算机返回这个值，即这个函数。然后这个函数的输出形式被设计成相同的字符串。就好像我们输入数字 3 ，计算机返回数字 3 ，这两个 3 不是同样的 3 ，前者是以字符形式输入的表达式，后者是值（计算机对输入解释后的结果）。老师给的一个形象的例子是，我们输入的是榨汁机的图纸，计算机给我们的是一个真正的榨汁机（求值的结果）。区别这两者会对今后的思维模型有重要的作用。</code></p><p><code>注释4：该思考题中讨论的代码用的是 Javascript 语言。</code></p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Programming Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人小练习-计算机科学基础</title>
      <link href="/2020/04/14/ian-cs-basics-assignments/"/>
      <url>/2020/04/14/ian-cs-basics-assignments/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="抱歉, 这个文章不能被校验">  <script id="hbeData" type="hbeData" data-hmacdigest="ee7975b1962e7a16a140cd4ec2b8d624de2101eb1ca62b7472f5807b2092fabc"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> Programming Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推导 Y Combinator</title>
      <link href="/2020/04/13/deriving-y-combinator/"/>
      <url>/2020/04/13/deriving-y-combinator/</url>
      
        <content type="html"><![CDATA[<p>等了好多年，终于能听 Ian 讲课了。一会儿北京时间 20:00 马上开始。这里尝试重新推导一下 Y 算子，纪念这个我一生中历史性的时刻，也顺便找找编程感觉。现在，我已经打开各种可能需要的软件准备就绪了。</p><hr><h3 id="先实现不使用-Define-的情况下能正常递归"><a href="#先实现不使用-Define-的情况下能正常递归" class="headerlink" title="先实现不使用 Define 的情况下能正常递归"></a>先实现不使用 Define 的情况下能正常递归</h3><p><strong>第一步</strong>，正常写出 <code>mylength</code> 函数作为最简单的模型。这是一个接受链表（list）作为参数，返回其长度（一个整数值，显示链表中有效负载的数量）的函数。</p><pre><code class="lang-scheme">(define mylength  (lambda (l)    (cond [(null? l) 0]          [else (+ 1 (mylength (cdr l)))])))</code></pre><p>测试 <code>mylength</code> 函数，输出正确的话就可以继续推导。</p><pre><code class="lang-scheme">(mylength &#39;(9 19 29))  ;; 输出 3 (链表有 3 个有效负载：9, 19, 29)</code></pre><p><strong>第二步</strong>，思考如果没有 <code>define</code> 来绑定函数名，我们要如何递归？于是，我们只能将上面 <code>mylength</code> 函数绑定在<strong>参数</strong>上。于是 <code>mylength</code> 函数作为参数传进去，以便能被调用。因此我们多加了一层嵌套，用这个嵌套带来的参数 <code>mylength</code> 绑定函数体内容。这样我们就可以使用它了。</p><pre><code class="lang-scheme">(  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (mylength)                           ;;    (lambda (l)                                ;;      (cond [(null? l) 0]                      ;;            [else (+ 1 (mylength (cdr l)))]))) ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (l)                                ;;    (cond [(null? l) 0]                      ;;          [else (+ 1 (mylength (cdr l)))]))  ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)</code></pre><p>但是，如果直接调用这个函数就会报错。因为第二小块代码的 <code>mylength</code> 这个变量是没有定义的。于是我们把第二步中的代码（第二小块）修改成下面这样：</p><pre><code class="lang-scheme">(  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (mylength)                           ;;    (lambda (l)                                ;;      (cond [(null? l) 0]                      ;;            [else (+ 1 (mylength (cdr l)))]))) ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (mylength)                           ;;    (lambda (l)                                ;;      (cond [(null? l) 0]                      ;;            [else (+ 1 (mylength (cdr l)))]))) ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)</code></pre><p>但这样还不够，因为两块代码要求其输入参数 <code>mylength</code> 是个函数，不能是 <code>(cdr l)</code> 这种链表。运行到 <code>(mylength (cdr l))</code> 这段的代码就会报错。于是我们再改代码，把 <code>(mylength (cdr l))</code> 改为 <code>(mylength mylength)</code> 变成下面这样：</p><p><strong>注释：<br>之所以要这么改动，除了让输入参数符合要求（输入需是个函数）之外，更重要的是让这个作为输入的函数携带足够的信息以便之后的递归。即每次运行到 <code>else</code> 这一分支，函数都会通过 <code>(mylength mylength)</code> 保存一次自己后再进行对 <code>(cdr l)</code> 的运算。而正是因为函数每次都保存了自己（的信息），所以每次都能调用自己，进而实现没有 <code>define</code> 的递归。</strong></p><p><code>PS：使用函数打包（保存）信息后，能实现各种精妙的传递、嵌套和展开，要着重关注和练习这样的数据技巧</code></p><pre><code class="lang-scheme">(  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (mylength)                                      ;;    (lambda (l)                                           ;;      (cond [(null? l) 0]                                 ;;            [else (+ 1 ((mylength mylength) (cdr l)))]))) ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (mylength)                                      ;;    (lambda (l)                                           ;;      (cond [(null? l) 0]                                 ;;            [else (+ 1 ((mylength mylength) (cdr l)))]))) ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)</code></pre><p>到这步，我们发现这一大块代码可以直接调用来计算链表（list）的长度了。和之前有 <code>define</code> 时的代码效果一样：</p><pre><code class="lang-scheme">(((lambda (mylength)  (lambda (l)    (cond [(null? l) 0]          [else (+ 1 ((mylength mylength) (cdr l)))]))) (lambda (mylength)  (lambda (l)    (cond [(null? l) 0]          [else (+ 1 ((mylength mylength) (cdr l)))]))))&#39;(9 19 29))   ;; 输出 3</code></pre><p>既然没有 <code>define</code> 代码也已能正确运行，就说明 <strong>Y</strong> 算子已经隐藏在其中了。于是我们可以开始各种调整，想办法提取整理出 <strong>Y</strong> 算子了。</p><hr><h3 id="推导-Y-算子"><a href="#推导-Y-算子" class="headerlink" title="推导 Y 算子"></a>推导 Y 算子</h3><p>我们先观察一下最早有 <code>define</code> 的时候函数的样子：</p><pre><code class="lang-scheme">(define mylength  (lambda (l)    (cond [(null? l) 0]          [else (+ 1 (mylength (cdr l)))])))</code></pre><p>我们的目标是把上一节最后看起来很多的代码转化成「一个函数的调用」，将「一块和最开始 define 的代码模式很像的代码」作为参数输入该函数。如果成功，那么该函数就是 <strong>Y</strong> 算子啦。可以用它来作用在其他更多的函数上实现递归。（如果看不明白目标，可以往下看完推导在回来看这段描述）</p><p><strong>第 1 次转换：</strong>我们看到有两小块重复的代码，于是先提取它们</p><pre><code class="lang-scheme">((lambda (f) (f f)) (lambda (mylength)  (lambda (l)    (cond [(null? l) 0]          [else (+ 1 ((mylength mylength) (cdr l)))]))))</code></pre><p>观察发现，第 1 次转换之后，代码已经很像原来有 <code>define</code> 时候的代码了。那么是不是 <code>(lambda (f) (f f))</code> 就是 <strong>Y</strong> 算子呢？不是的，因为目前还不够像。<code>(mylength mylength) (cdr l)</code> 这一块的代码和原来的 <code>(mylength (cdr l))</code> 相比，多了一次函数调用。我们要继续提取，把它变成调用次数一样的模式。也就是一个函数将 <code>(mylength mylength)</code> 想办法变成 <code>mylength</code> 。</p><p><strong>第 2 次转换：</strong>把 <code>(mylength mylength)</code> 提取出来，通过函数调用来将它传入函数体</p><pre><code class="lang-scheme">(  (lambda (f) (f f))  (lambda (mylength)    (    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;     (lambda (g)                          ;;      (lambda (l)                         ;;        (cond [(null? l) 0]               ;;              [else (+ 1 (g (cdr l)))]))) ;;    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      (mylength mylength)    )  ))</code></pre><p>我们很高兴地发现，经过第 2 次转换之后，出现了长得很像原来 <code>define</code> 阶段的代码块了（被注释符号“框”起来的那块）。赶紧将这次转换得到的代码输入计算机，看看对不对吧：</p><pre><code class="lang-scheme">(  (    (lambda (f) (f f))    (lambda (mylength)      (      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       (lambda (g)                          ;;        (lambda (l)                         ;;          (cond [(null? l) 0]               ;;                [else (+ 1 (g (cdr l)))]))) ;;      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        (mylength mylength)      )    )  )&#39;(9 19 29))   ;; 死循环</code></pre><p>我们很遗憾发现，输入上面的这段代码，对函数进行调用，计算 <code>(9 19 29)</code> 的长度时，内存溢出，函数进入了死循环。到底是怎么回事呢？</p><hr><h3 id="中场分析"><a href="#中场分析" class="headerlink" title="中场分析"></a>中场分析</h3><p>通过一步一步地拆解函数计算的过程，我们很快就找到了原因：是 <code>(mylength mylength)</code> 这个表达式将我们带入了死循环。但为什么 <code>(mylength mylength)</code> 在前面的代码中没有进入死循环，而当我们将它提取出来之后就进入死循环了呢？我们来好好看一看这个表达式的计算过程吧。</p><p>第 2 次转换之后，<code>mylength</code> 这个参数获取的代码内容变成了下面这样：</p><pre><code class="lang-scheme">;;; mylength ;;;(lambda (mylength)  (  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   (lambda (g)                          ;;    (lambda (l)                         ;;      (cond [(null? l) 0]               ;;            [else (+ 1 (g (cdr l)))]))) ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    (mylength mylength)  ))</code></pre><p>所以 <code>(mylength mylength)</code> 就变成：</p><pre><code class="lang-scheme">(;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(lambda (mylength)                      ;;  ((lambda (g)                          ;;    (lambda (l)                         ;;      (cond [(null? l) 0]               ;;            [else (+ 1 (g (cdr l)))]))) ;;    (mylength mylength)))               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(lambda (mylength)                      ;;  ((lambda (g)                          ;;    (lambda (l)                         ;;      (cond [(null? l) 0]               ;;            [else (+ 1 (g (cdr l)))]))) ;;    (mylength mylength)))               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)</code></pre><p>然后变成：</p><pre><code class="lang-scheme">((lambda (g)                           (lambda (l)                            (cond ((null? l) 0)                        (else (+ 1 (g (cdr l)))))))    (      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      (lambda (mylength)                      ;;        ((lambda (g)                          ;;          (lambda (l)                         ;;            (cond [(null? l) 0]               ;;                  [else (+ 1 (g (cdr l)))]))) ;;          (mylength mylength)))               ;;      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      (lambda (mylength)                      ;;        ((lambda (g)                          ;;          (lambda (l)                         ;;            (cond [(null? l) 0]               ;;                  [else (+ 1 (g (cdr l)))]))) ;;          (mylength mylength)))               ;;      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    ))</code></pre><p>展开到这一步我们发现了，由于计算机会<strong>优先对表达式求值</strong>，而 <code>(mylength mylength)</code> 这个表达式被提取到外部之后，每一次计算机对它求值，都会生成一个<strong>仍然处于函数体外部</strong>的表达式 <code>(mylength mylength)</code> 需要计算机求值。于是于是计算机又会对 <code>(mylength mylength)</code> 再次进行求值，结果就是出现了不断扩展的，越来越长的表达式。</p><p>而对于把 <code>(mylength mylength)</code> 提取出来之前的代码，<code>(mylength mylength)</code> 这个表达式被求值之后<strong>生成的是一个函数</strong>，没有出现<strong>暴露在函数体外部等待求值的表达式</strong>。它同样会产生表达式 <code>(mylength mylength)</code> ，只不过此时的 <code>(mylength mylength)</code> 被包裹在了所生成的函数里。更准确地说，是被包裹在了函数体中的<strong>一个条件分支</strong>里。只有计算时进入了该条分支，才会触发下一次对表达式 <code>(mylength mylength)</code> 的求值。</p><p>于是，「第 2 次转换」的前后所发生的关键性变化是 <code>(mylength mylength)</code> 表达式的求值步骤由「原来的 <code>cond</code> 条件分支内部」被提取到了「函数外部」。因此导致：</p><ul><li><strong>求值的时间点被提前了；</strong></li><li><strong>求值之后会生成新的，需要继续提前求值的，同样的表达式 <code>(mylength mylength)</code>。</strong></li><li><strong>递归的过程 <code>(mylength mylength)</code> 本来位于条件分支中，于是边界条件（Base Case）所提供的终止功能就会发挥作用：每次先要判断是否到达边界条件终止程序，然后才会进入含有递归的过程 <code>(mylength mylength)</code> 的分支中。这样避免进入死循环。</strong></li><li><strong><code>(mylength mylength)</code> 这一递归过程被提出分支之后，程序运行流就再也触碰不到边界终止条件。没有了终止条件，就会导致死循环。</strong></li></ul><hr><h3 id="继续推导-Y-算子"><a href="#继续推导-Y-算子" class="headerlink" title="继续推导 Y 算子"></a>继续推导 Y 算子</h3><p>上一节我们发现了问题所在，就是表达式 <code>(mylength mylength)</code> 被提取出来之后会导致计算机要先对它求值之后才能进行之后的步骤。而它又会在被求值后中生成新的「自己」，并且这个「自己」也需要同样被求值之后计算机才能进行之后的计算步骤。我们希望它像被提取出来前一样，「对其求值」的这一步骤能再次被放进函数的分支内。</p><p><strong>第 3 次转换：</strong>将表达式 <code>(mylength mylength)</code> 打包进一个函数来延缓对它求值的时间。这种转换被称为 <em>Eta-Expansion</em> ( <em>Eta-Conversion</em> 的反向操作)。</p><pre><code class="lang-scheme">(  (lambda (f) (f f))  (lambda (mylength)    (    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;     (lambda (g)                          ;;      (lambda (l)                         ;;        (cond [(null? l) 0]               ;;              [else (+ 1 (g (cdr l)))]))) ;;    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      (lambda (x) ((mylength mylength) x))    )  ))</code></pre><p>我们将上面转换完成的代码再次输入计算机进行测试：</p><pre><code class="lang-scheme">(  ((lambda (f) (f f))   (lambda (mylength)    (    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;     (lambda (g)                          ;;      (lambda (l)                         ;;        (cond [(null? l) 0]               ;;              [else (+ 1 (g (cdr l)))]))) ;;    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      (lambda (x) ((mylength mylength) x))    )   )  )&#39;(9 19 29) )   ;; 输出 3</code></pre><p>成功了。我们可以接着转换了（每一步转换都要保证代码能正确运行才能进行下一步）。</p><p><strong>第 4 次转换：</strong>更改变量名，让内部被注释框选的函数更像 <code>define</code> 阶段的函数（<em>Alpha-Equivalence</em>）</p><pre><code class="lang-scheme">(  (lambda (f) (f f))  (lambda (g)    (    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;     (lambda (mylength)                          ;;      (lambda (l)                                ;;        (cond [(null? l) 0]                      ;;              [else (+ 1 (mylength (cdr l)))]))) ;;    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;      (lambda (x) ((g g) x))    )  ))</code></pre><p>经过第 4 次转换（已经输入计算机测试了代码），我们得到了和 <code>define</code> 阶段几乎一样的函数。除了 <code>define</code> 的位置使用了 <code>lambda</code> 之外，其他部分几乎一样了。对比如下：</p><pre><code class="lang-scheme">;;; 使用 define 的时候 ;;;(define mylength  (lambda (l)    (cond [(null? l) 0]          [else (+ 1 (mylength (cdr l)))])));;; 没有 define 的时候 ;;;(lambda (mylength)  (lambda (l)    (cond [(null? l) 0]          [else (+ 1 (mylength (cdr l)))])))</code></pre><p><strong>第 5 次转换：</strong>把和使用 <code>define</code> 阶段的代码很像的部分提取出来</p><pre><code class="lang-scheme">(  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (y)                                  ;;    (                                          ;;      (lambda (f) (f f))                       ;;                                               ;;      (lambda (g)                              ;;        ( y                                    ;;  这个函数（块）就是 Y 算子          (lambda (x) ((g g) x))               ;;        )                                      ;;      )                                        ;;    )                                          ;;  )                                            ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   (lambda (mylength)                          ;;    (lambda (l)                                ;;      (cond [(null? l) 0]                      ;;            [else (+ 1 (mylength (cdr l)))]))) ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)</code></pre><p>第 5 次转换后（已经输入计算机测试了代码），我们最终获得 <strong>Y</strong> 算子，整理后（<em>Alpha-Equivalence</em>）如下：</p><pre><code class="lang-scheme">;;; Y 算子 ;;;(lambda (g)  ((lambda (f) (f f))   (lambda (f)     (g (lambda (x) ((f f) x))))))</code></pre><hr><h3 id="使用-Y-算子"><a href="#使用-Y-算子" class="headerlink" title="使用 Y 算子"></a>使用 Y 算子</h3><p><strong>Y</strong> 算子的使用非常简单，只需要在目标函数外再嵌套一层函数，把这层额外的函数所带来的参数名作为递归函数名就行。</p><p>比如有 <code>define</code> 的时候函数的样子：</p><pre><code class="lang-scheme">(define mylength  (lambda (l)    (cond [(null? l) 0]          [else (+ 1 (mylength (cdr l)))])))</code></pre><p>这时候我们把 <code>define</code> 改成 <code>lambda</code>（这样就去掉了 <code>define</code>）变成：</p><pre><code class="lang-scheme">(lambda (mylength)  (lambda (l)    (cond [(null? l) 0]          [else (+ 1 (mylength (cdr l)))])))</code></pre><p>然后再用 <strong>Y</strong> 算子作用于这个 <code>lambda</code> 匿名函数就可以得到相应的递归函数 <code>F</code> 了：</p><pre><code class="lang-scheme">(define Y  (lambda (g)    ((lambda (f) (f f))     (lambda (f)       (g (lambda (x) ((f f) x)))))))(define F  (Y (lambda (mylength)       (lambda (l)         (cond [(null? l) 0]               [else (+ 1 (mylength (cdr l)))])))))(F &#39;(9 19 29))  ;; 输出 3 (链表有 3 个有效负载：9, 19, 29)</code></pre><p><strong>注释:</strong><br><em>Alpha-Equivalence</em>：不同的变量名可以等价地替换。即 <code>(lambda (x) (+ x x))</code> 和 <code>(lambda (y) (+ y y))</code> 效果一样。<br><em>Eta-Expansion</em>：函数 <code>(lambda (x) (+ x 1))</code> 可以扩展为 <code>(lambda (y) ((lambda (x) (+ x 1)) y))</code>，效果一样。</p><hr><h3 id="用-Javascript-的语法来写出-Y-算子"><a href="#用-Javascript-的语法来写出-Y-算子" class="headerlink" title="用 Javascript 的语法来写出 Y 算子"></a>用 Javascript 的语法来写出 Y 算子</h3><p>在 <a href="https://www.javascript.com" target="_blank" rel="noopener">Javascript</a> 的语法下， <strong>Y</strong> 算子的定义如下，可以利用上面的经验尝试推导</p><pre><code class="lang-javascript">// Y combinator 的定义var Y = f =&gt;   (x =&gt; f(v =&gt; x(x)(v)))  (x =&gt; f(v =&gt; x(x)(v)));</code></pre><p>提示：</p><pre><code class="lang-scheme">;;; 上面推导出的 Y 算子 ;;;(lambda (g)  ((lambda (f) (f f))   (lambda (f)     (g (lambda (x) ((f f) x))))));;; 改一下变量名（Alpha-Equivalence）可以得到 ;;;(lambda (f)  ((lambda (f) (f f))   (lambda (x)     (f (lambda (v) ((x x) v))))))</code></pre><hr><h3 id="进一步推导针对-Mutual-Recursive-的-Y-算子"><a href="#进一步推导针对-Mutual-Recursive-的-Y-算子" class="headerlink" title="进一步推导针对 Mutual Recursive 的 Y 算子"></a>进一步推导针对 Mutual Recursive 的 Y 算子</h3><p>上面所推导的 <strong>Y</strong> 算子只对 <code>mylength</code> 这样的 <em>Directly Recursive</em> 函数有用，对下面这种 <a href="https://en.wikipedia.org/wiki/Mutual_recursion" target="_blank" rel="noopener"><em>Mutually Recursive</em></a> 函数就没用了：</p><pre><code class="lang-scheme">;; 这里容易下意识认为要判断 0 和 1 这两个边界，其实只需要判断 0 这一个边界即可。;; 简洁带来严密。(define odd?  (lambda (n)    (cond [(= n 0) #f]          [else (even? (- n 1))])))(define even?  (lambda (n)    (cond [(= n 0) #t]          [else (odd? (- n 1))])))</code></pre><p>根据上面的结果，我们来继续推导适用于 <a href="https://en.wikipedia.org/wiki/Mutual_recursion" target="_blank" rel="noopener"><em>Mutually Recursive</em></a> 函数的 <strong>Y</strong> 算子。</p><p><strong>分析</strong></p><p>先明确我们的目的是什么：我们的目的是在没有 <code>define</code> 的情况下实现函数 <code>odd?</code> 和 <code>even?</code> ，然后从这个实现中提取出 <strong>Y</strong> 算子。</p><p>和上面同样的思路，没有了 <code>define</code> ，我们只能将上面 <code>odd?</code> 和 <code>even?</code> 函数绑定在<strong>参数</strong>上。下面我们先来尝试实现 <code>odd?</code> 函数。</p><pre><code class="lang-scheme">(define odd?  (lambda (n)    (cond [(= n 0) #f]          [else (even? (- n 1))])))</code></pre><p><strong>推导</strong></p><p>首先我们很容易知道需要在新的 <code>odd?</code> 的函数体内储存 <code>even?</code> 函数的信息，可以得到：</p><pre><code class="lang-scheme">(  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (even?)                       ;;    (lambda (n)                         ;; (这是没有 define 的 odd? 函数)      (cond [(= n 0) #f]                ;;            [else (even? (- n 1))])))   ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (odd?)                        ;;    (lambda (n)                         ;; (这是没有 define 的 even? 函数)      (cond [(= n 0) #t]                ;;            [else (odd? (- n 1))])))    ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)</code></pre><p>然后我们要像前面的 <code>(mylength mylength)</code> 一样，设法让 <code>odd?</code> 和 <code>even?</code> 两个函数在进入递归（ <code>else</code> 分支）的时候都打包保存一次自己，以供之后的递归（ <code>else</code> 分支）可以继续保存和调用“自己”。于是代码先做如下修改：</p><pre><code class="lang-scheme">(  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (even?)                              ;;    (lambda (n)                                ;; (这是没有 define 的 odd? 函数)      (cond [(= n 0) #f]                       ;;            [else ((even? even?) (- n 1))])))  ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (odd?)                               ;;    (lambda (n)                                ;; (这是没有 define 的 even? 函数)      (cond [(= n 0) #t]                       ;;            [else ((odd? odd?) (- n 1))])))    ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)</code></pre><p>观察上面的 <code>odd?</code> 函数体内的 <code>else</code> 分支，可以看到当进入此分支，就要使用 <code>even?</code> 对 <code>(- n 1)</code> 进行计算了。而 <code>even?</code> 函数是要接收 <code>odd?</code>函数作为输入的，这样它的函数体内才有 <code>odd?</code> 函数的信息来实现它的 <code>else</code> 递归分支。所以这里的 <code>(even? even?)</code> 要改成 <code>(even? odd?)</code> ，这样 <code>odd?</code> 函数才能作为参数被输入进 <code>even?</code> ，进而实现传递（保存）。代码修改如下：</p><pre><code class="lang-scheme">(  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (even?)                              ;;    (lambda (n)                                ;; (这是没有 define 的 odd? 函数)      (cond [(= n 0) #f]                       ;;            [else ((even? odd?) (- n 1))])))   ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (odd?)                               ;;    (lambda (n)                                ;; (这是没有 define 的 even? 函数)      (cond [(= n 0) #t]                       ;;            [else ((odd? odd?) (- n 1))])))    ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)</code></pre><p>到这步后，目前的代码仍然有问题。因为现在面对的是 <a href="https://en.wikipedia.org/wiki/Mutual_recursion#Conversion_to_direct_recursion" target="_blank" rel="noopener"><em>Mutual Recursion</em></a> ，两个函数相互定义彼此。要想办法在 <code>else</code> 递归分支处保存双方信息。继续观察 <code>odd?</code>（当前正在尝试实现的是没有 <code>define</code> 的 <code>odd?</code> 函数），发现 <code>odd?</code> 函数在获得输入后，已经包含了 <code>even?</code> 函数的信息，还差它自己。所以我们修改代码，让 <code>odd?</code> 函数把包含 <code>even?</code> 的自己一起存入下一次递归，这样下一次递归就同时有了 <code>odd?</code> 和 <code>even?</code>，进而一直传递和递归调用下去，直到触碰边界条件停止。代码如下：</p><pre><code class="lang-scheme">(  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (even?)                                 ;;   ((lambda (f) (f f))                            ;; (这是没有 define 的 odd? 函数)    (lambda (odd?)                                ;;      (lambda (n)                                 ;;        (cond [(= n 0) #f]                        ;;              [else ((even? odd?) (- n 1))])))))  ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (odd?)                               ;;    (lambda (n)                                ;; (这是没有 define 的 even? 函数)      (cond [(= n 0) #t]                       ;;            [else ((odd? odd?) (- n 1))])))    ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)</code></pre><p>现在，我们得到了没有 <code>define</code> 的 <code>odd?</code> 函数。可以使用上面这个代码测试一下各种奇偶数了。于是再一次，<strong>Y</strong> 算子已经隐藏在其中，可以开始各种转化提取整理出 Y 算子了。</p><hr><h3 id="整理和提取-Y-算子-Mutual-Recursion"><a href="#整理和提取-Y-算子-Mutual-Recursion" class="headerlink" title="整理和提取 Y 算子 - Mutual Recursion"></a>整理和提取 Y 算子 - Mutual Recursion</h3><p>有了之前的经验，接下来的整理和提取轻车熟路，同样是 <em>Alpha-Equivalence</em> 和 <em>Eta-Expansion</em> 。<br>记得每一步变换都要确认代码能正确运行才继续哈。</p><p><strong>第一步</strong>，分别把 <code>(even? odd?)</code> 和 <code>(odd? odd?)</code> 提取出来：</p><pre><code class="lang-scheme">(  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (even?)                        ;;   ((lambda (f) (f f))                   ;;    (lambda (odd?)                       ;;      ((lambda (g)                       ;; (这是没有 define 的 odd? 函数)         (lambda (n)                     ;;           (cond [(= n 0) #f]            ;;                 [else (g (- n 1))])))   ;;       (even? odd?)))))                  ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (odd?)                         ;;       ((lambda (j)                      ;;          (lambda (n)                    ;;            (cond [(= n 0) #t]           ;; (这是没有 define 的 even? 函数)                  [else (j (- n 1))])))  ;;        (lambda (n) ((odd? odd?) n))))   ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)</code></pre><p><strong>第二步</strong>，分别两块很像 <code>odd?</code> 和 <code>even?</code> 函数的代码提取出来。</p><pre><code class="lang-scheme">( (lambda (even?)   ((lambda (f) (f f))    (lambda (odd?)      (    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       (lambda (j)                       ;; (很像 odd? 的代码块)         (lambda (n)                     ;;           (cond [(= n 0) #f]            ;;                 [else (j (- n 1))])))   ;;    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;       (even? odd?)))))                    (lambda (odd?)       (    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        (lambda (k)                      ;; (很像 even? 的代码块)          (lambda (n)                    ;;            (cond [(= n 0) #t]           ;;                   [else (k (- n 1))])))  ;;    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        (lambda (n) ((odd? odd?) n)))))</code></pre><p>提取后：</p><pre><code class="lang-scheme">(  (   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   (lambda (j)                             ;;     (lambda (k)                           ;;       (                                   ;;        (lambda (even?)                    ;;          ((lambda (f) (f f))              ;; (Y 算子)           (lambda (odd?)                  ;;             (j                            ;;              (even? odd?)))))             ;;                                                             ;;        (lambda (odd?)                     ;;          (k                               ;;           (lambda (n) ((odd? odd?) n))))  ;;        )))                                ;;    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;   (lambda (j)                       ;; (很像 odd? 的代码块)     (lambda (n)                     ;;       (cond [(= n 0) #f]            ;;             [else (j (- n 1))])))   ;;   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  )  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (k)                      ;; (很像 even? 的代码块)    (lambda (n)                    ;;      (cond [(= n 0) #t]           ;;             [else (k (- n 1))])))  ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)</code></pre><p><strong>第三步</strong>，修改变量名（<em>Alpha-Equivalence</em>），让 Y 算子还有 <code>odd?</code> 和 <code>even?</code> 函数都更加明显：</p><pre><code class="lang-scheme">((  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (j)                            ;;    (lambda (k)                          ;;      ((lambda (g)                       ;;         ((lambda (f) (f f))             ;; (Y 算子)          (lambda (h)                    ;;            (j (g h)))))                 ;;       (lambda (h)                       ;;         (k (lambda (x) ((h h) x)))))))  ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  (lambda (even?)                      ;; (很像 odd? 的代码块)    (lambda (n)                        ;;      (cond [(= n 0) #f]               ;;            [else (even? (- n 1))])))  ;;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  ) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; (lambda (odd?)                       ;; (很像 even? 的代码块)   (lambda (n)                        ;;     (cond [(= n 0) #t]               ;;            [else (odd? (- n 1))])))   ;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;)</code></pre><p>最终，针对 <strong>Mutual Recursions</strong> 的 <strong>Y</strong> 算子为：</p><pre><code class="lang-scheme">;;; Mutual Recursions 的 Y 算子 ;;;(lambda (j)  (lambda (k)    ((lambda (g)       ((lambda (f) (f f))         (lambda (h)          (j (g h)))))     (lambda (h)       (k (lambda (x) ((h h) x)))))))</code></pre><p>可以对比一下 <strong>Direct Recursions</strong> 的 <strong>Y</strong> 算子：</p><pre><code class="lang-scheme">;;; Direct Recursions 的 Y 算子 ;;;(lambda (g)  ((lambda (f) (f f))    (lambda (f)      (g (lambda (x) ((f f) x))))))</code></pre><p>观察这两个 <strong>Y</strong> 算子，是不是感觉 <strong>Mutual Recursion</strong> 似乎实际上就相当于两个相互定义的函数跑完（递归完？）一个「来回（周期）」之后，再进行针对这个「来回（周期）」的 <strong>Direct Recursion</strong>？</p><hr><h3 id="使用-Y-算子-For-Mutually-Recursive-Functions"><a href="#使用-Y-算子-For-Mutually-Recursive-Functions" class="headerlink" title="使用 Y 算子 - For Mutually Recursive Functions"></a>使用 Y 算子 - For Mutually Recursive Functions</h3><p>为了方便，用 <code>define</code> 来帮助定义，以减少代码符号，让演示更直观：</p><pre><code class="lang-scheme">;;; Mutual Recursions 的 Y 算子 ;;;(define Ym  (lambda (j)    (lambda (k)      ((lambda (g)         ((lambda (f) (f f))           (lambda (h)            (j (g h)))))       (lambda (h)         (k (lambda (x) ((h h) x))))))));;; 把函数的 define 换成 lambda 然后把参数名变为对方 ;;;;;; 注释：此操作可以理解为自己需要对方来定义所以对方要作为输入 ;;;(define o  (lambda (even?)    (lambda (n)                              (cond [(= n 0) #f]                           [else (even? (- n 1))]))))(define e  (lambda (odd?)    (lambda (n)                              (cond [(= n 0) #t]                           [else (odd? (- n 1))]))));;; 通过 Y 算子可以很容易得到 odd? 和 even? 函数 ;;;;;; 输入 Y 算子的先后顺序决定了函数的效果是 odd? 还是 even? ;;;(map ((Ym o) e) &#39;(0 1 2 3))          ;; odd? 函数判断是否为奇，输出 (#f #t #f #t)(map ((Ym e) o) &#39;(0 1 2 3))          ;; even? 函数判断是否为偶，输出 (#t #f #t #f)</code></pre><p>PS：<br>更多关于 <strong>Mutual Recursion</strong> 的信息可查阅维基百科 <a href="https://en.wikipedia.org/wiki/Mutual_recursion" target="_blank" rel="noopener"><em>Mutual Recursion</em></a></p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Programming Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本博客常用的 Markdown 排版语法和技巧</title>
      <link href="/2019/09/18/markdown-cheat-sheet/"/>
      <url>/2019/09/18/markdown-cheat-sheet/</url>
      
        <content type="html"><![CDATA[<p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 官方有很多帮助排版的语法，详细内容可以参见官网的 <a href="https://hexo.io/docs/tag-plugins.html" target="_blank" rel="noopener">Tag Plugins</a> 。这里列出的是常用的。</p><p>需要说明的是，由于本博客 <a href="http://cps.ninja">cps.ninja</a> 加载了 <a href="https://highlightjs.org" target="_blank" rel="noopener">Highlight.js</a> ，所以有些语法会用不了，比如给代码块添加 <code>caption</code> 和 <code>URL</code> 等等。</p><hr><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p><strong>Hexo</strong> 采用 <a href="https://hexo.io/docs/asset-folders.html" target="_blank" rel="noopener">Asset Folders</a> 的方式来管理和博客相关的各种文件，比如 <strong>CSS</strong> 文件，JavaScript 文件，图片文件等。</p><p>首先开打开这个功能，需要在 Hexo 博客文件夹的<strong>根目录</strong>下的配置文件 <code>_config.yml</code> 中加入这一段代码：</p><pre><code class="lang-bash">## ~/blog/_config.ymlpost_asset_folder: true</code></pre><p>之后，每当使用 <code>hexo new</code> 创建新的博文时，都会生成一个对应的 <strong>asset</strong> 文件夹来存放这篇博文的图片等文件<br>比如：<code>hexo new java basics</code> 在生成 <code>java-basics.md</code> 文件的同时，还会生成一个文件夹 <code>java-basics</code><br>把图片 <code>IntelliJ.png</code> 移动到 <code>java-basics</code> 里，就能在 <code>java-basics.md</code> 里使用以下代码插入这张图片：</p><pre><code class="lang-html">&lt;!-- 方法一：使用 &lt;img&gt; 标签插入图片，可设置宽度为 800 像素，高度自适应等 --&gt;&lt;img src=&quot;IntelliJ.png&quot; alt=&quot;Welcome to IntelliJ IDEA&quot; style=&quot;width: 800px; height: auto;&quot;&gt;&lt;!-- 方法二：使用辅助函数 asset_img 插入图片，此方法无法设置图片的排版，比如对齐或大小 --&gt;{% asset_img IntelliJ.png Welcome to IntelliJ IDEA %}</code></pre><p>如果多个不同的 <code>.md</code> 博客文章要共用同样的图片，就可以使用 <strong>Global Asset Folder</strong> 。该文件夹路径为 <strong>Hexo</strong> 博客根目录下的 <code>source/images</code><br>例如 <strong>Global Asset Folder</strong> 里面一张图片 <code>source/images/donate.jpg</code> ，就可以通过以下代码插入到文章中：</p><pre><code class="lang-html">&lt;img src=&quot;/images/donate.jpg&quot; alt=&quot;QR Code for donation&quot;&gt;</code></pre><hr><h3 id="列表技巧"><a href="#列表技巧" class="headerlink" title="列表技巧"></a>列表技巧</h3><p>如果希望以列表展现一大块内容，所有段落采用相同缩进即可，不需要、也不能挨着，要空一行，否则遇到代码块（code block）会显示不出代码排版。<br>代码块中的内容不能出现 <strong>2 个连续的空行</strong>，否则排版也会错误显示。</p><ul><li><p>展示列表中的大段内容排版</p><pre><code class="lang-scheme"> (define atom?  (lambda (x)    (and (not (pair? x))         (not (null? x))))</code></pre><p>这是第三段</p></li></ul><pre><code>- 展示列表中的大段内容排版  ``` scheme   (define atom?    (lambda (x)      (and (not (pair? x))           (not (null? x))))  ``` ## 说明：这是第二段代码块，段落间有且只能有一个空行  这是第三段</code></pre><hr><h3 id="带超链接的代码"><a href="#带超链接的代码" class="headerlink" title="带超链接的代码"></a>带超链接的代码</h3><p><a href="/2019/09/18/markdown-cheat-sheet/"><code>blog/source/_posts/markdown-cheat-sheet.md</code></a></p><pre><code>[`blog/source/_posts/markdown-cheat-sheet.md`](/2019/09/18/markdown-cheat-sheet/)</code></pre><hr><h3 id="带作者的引用"><a href="#带作者的引用" class="headerlink" title="带作者的引用"></a>带作者的引用</h3><blockquote><p>China is a civilization, masquerading as a nation state.</p><footer><strong>Lucian Pye</strong></footer></blockquote><pre><code>{% blockquote Lucian Pye %}China is a civilization, masquerading as a nation state.{% endblockquote %}</code></pre><hr><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>（排版要抽空修复一下，<a href="https://github.com/gaoryrt/hexo-theme-pln" target="_blank" rel="noopener">pln</a> 这个三流主题下的表格很难看）</p><div class="table-container"><table><thead><tr><th style="text-align:left">Left-Aligned</th><th style="text-align:center">Center Aligned</th><th style="text-align:right">Right Aligned</th></tr></thead><tbody><tr><td style="text-align:left">col 3 is</td><td style="text-align:center">some wordy text</td><td style="text-align:right">$1600</td></tr><tr><td style="text-align:left">col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td style="text-align:left">zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table></div><hr><h3 id="若无论如何调整-Markdown-语法都无法实现想要的排版"><a href="#若无论如何调整-Markdown-语法都无法实现想要的排版" class="headerlink" title="若无论如何调整 Markdown 语法都无法实现想要的排版"></a>若无论如何调整 Markdown 语法都无法实现想要的排版</h3><p>直接写 HTML（在 Chrome 里调整 HTML 代码直到出现满意的排版效果，然后直接复制粘贴到文章里）</p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Highlight.js 优化代码块高亮效果</title>
      <link href="/2019/03/25/add-highlightjs-to-hexo-blog/"/>
      <url>/2019/03/25/add-highlightjs-to-hexo-blog/</url>
      
        <content type="html"><![CDATA[<p>对博客的代码块（code block）部分的显示一直不是很满意，拖延到今天算起来一共是两年多了。这次总算下定决心搞一把。虽然当前是满意了，不过过程遇到各种坑让我觉得有必要写一篇博客来帮助未来的自己和其他有缘的过客。</p><hr><h3 id="为什么是-Highlight-js"><a href="#为什么是-Highlight-js" class="headerlink" title="为什么是 Highlight.js"></a>为什么是 Highlight.js</h3><p>Hexo 本身就自带高亮功能，只不过不完美，比如 <a href="https://en.wikipedia.org/wiki/Scheme_(programming_language" target="_blank" rel="noopener">Scheme</a> 这个我常用的语言它就没有高亮效果。话虽如此，这个自带的高亮功能在我所用的<a href="https://github.com/chpwang/hexo-theme-pln" target="_blank" rel="noopener">主题</a>里也比市场上的其他插件（例如 <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">Hexo-Prism-Plugin</a> ，<a href="https://github.com/Jamling/hexo-filter-highlight" target="_blank" rel="noopener">hexo-filter-highlight</a> 和 <a href="https://github.com/google/code-prettify" target="_blank" rel="noopener">Prettify</a> 这三个坑货）要好用得多。这里说的好用，主要体现在最终渲染出来的排版效果上的美观、设置上的便捷，且不会引入过多 Markdown 和 Latex 之间语法的冲突。</p><p>经过一番调研，最终我放弃安装 Plugin（插件）版本的 Highlight.js（ <a href="https://github.com/Jamling/hexo-filter-highlight" target="_blank" rel="noopener">hexo-filter-highlight</a> 就是一个基于 Highlight.js 开发的 Plugin 。这些 Plugin 虽然安装设置方便，其模块化属性也方便管理，但如果效果不好，不如不用），直接选择使用原版的 <a href="https://highlightjs.org" target="_blank" rel="noopener">Highlight.js</a> 。你可以在<a href="https://highlightjs.org/static/demo/" target="_blank" rel="noopener">官方 Demo </a>页面查看它各个语言在各个风格（Style）下的显示效果。</p><hr><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>由于 <a href="http://cps.ninja">cps.ninja</a> 使用的是<a href="https://github.com/chpwang/hexo-theme-pln" target="_blank" rel="noopener"> pln 主题</a>，所以下面的步骤将以该主题为例来设置 <strong>Highlight.js</strong> 。</p><h4 id="步骤一："><a href="#步骤一：" class="headerlink" title="步骤一："></a>步骤一：</h4><p>前往 Highlight.js 的<a href="https://highlightjs.org/download/" target="_blank" rel="noopener">官方下载页面</a>，在 <strong>Custom package</strong> 的部分勾选你希望获得高亮支持的语言（想一步到位就全选），勾选完毕后点击 Download 按钮下载，得到 <code>highlight.zip</code> 压缩包；</p><h4 id="步骤二："><a href="#步骤二：" class="headerlink" title="步骤二："></a>步骤二：</h4><p>解压刚刚的 <code>highlight.zip</code> 压缩包，得到 <code>highlight.pack.js</code> 文件和 <code>styles</code>文件夹（该文件夹中包含了各种<a href="https://highlightjs.org/static/demo/" target="_blank" rel="noopener">显示风格</a>的 CSS 文件）。接着，将 <code>highlight.pack.js</code> 文件移动到 <code>themes/pln/source/js/</code> 目录下，而 <code>styles</code> 文件夹（包括里面的所有 CSS 文件）则移动到 <code>themes/pln/source/css/highlight</code> 目录下；</p><h4 id="步骤三："><a href="#步骤三：" class="headerlink" title="步骤三："></a>步骤三：</h4><p>修改根目录下 <code>_config.yml</code> 文件中 highlight 部分的设置（主要目的是关闭它，其他设置只是顺便说明一下）：</p><pre><code class="lang-yml">highlight:  enable: false          ## 关闭 hexo 自带的 highlight   line_number: false  # auto_detect: false   ## 这里要注释掉是因为 hexo 自带的 highlight 的 auto_detect 这个属性有 bug ，且之后要被官方抛弃    tab_replace: 2</code></pre><h4 id="步骤四："><a href="#步骤四：" class="headerlink" title="步骤四："></a>步骤四：</h4><p>修改 <code>themes/pln/layout/_partial/after_footer.ejs</code> ，增加了以下两行（目的是调用第二步里我们下载的 <code>highlight.pack.js</code> 文件）：</p><pre><code class="lang-html">&lt;script src=&quot;/js/highlight.pack.js&quot;&gt;&lt;/script&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;</code></pre><p>修改 <code>themes/pln/layout/_partial/head.ejs</code> ，增加了以下一行（通过调用指定的 CSS 文件选择相应的高亮风格，下面的例子里选择的风格是 <a href="https://highlightjs.org/static/demo/" target="_blank" rel="noopener">Vs 2015</a>）：</p><pre><code class="lang-html">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/highlight/styles/vs2015.css&quot;&gt;</code></pre><hr><h3 id="其他微调"><a href="#其他微调" class="headerlink" title="其他微调"></a>其他微调</h3><ul><li><p>修改文件 <code>themes/pln/source/css/main.scss</code>，在末尾（为了覆盖前面的设置，所以加在末尾）添加 CSS 设置，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/white-space" target="_blank" rel="noopener"><code>white-space</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/word-wrap" target="_blank" rel="noopener"><code>word-wrap</code></a> 属性会分别让 Chrome 和 Safari 浏览器支持代码块（code block）左右滑动显示超出内容（overflow）：</p><pre><code class="lang-css">pre code {  white-space: pre;  /* this code line alone can make code block to slide in Chrome */  word-wrap: normal; /* add this line to make code block to slide in Safari */}</code></pre></li><li><p>修改 <code>themes/pln/source/css/highlight.scss</code> 文件里 <strong>.code-block</strong> 类的 <em>border-color</em> 属性为 <code>#2d2d2d</code> ，使得代码块的边框颜色与背景一致；</p><pre><code class="lang-css">.code-block {  // ...  border-color: #2d2d2d;  // ... }</code></pre></li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>完成上文提到的所有操作之后，使用下面代码让高亮设置生效：</p><pre><code class="lang-bash">## 生成压缩版的 css（让 pln 主题的相关设置生效）$ pwd~/Documents/blog  ## 确认当前目录，因为下面 sass 命令要输入相关路径$ sass --style compressed themes/pln/source/css/main.scss:themes/pln/source/css/m.min.css  ## 清空缓存，并重新生成文件（让 _config.yml 里的设置生效）$ hexo clean$ hexo g</code></pre><h4 id="一些心得："><a href="#一些心得：" class="headerlink" title="一些心得："></a>一些心得：</h4><ul><li><p>写文章的过程中，有时候会遇到 Markdown 和 Tex 语法冲突或者奇怪显示的情况，不要慌，只需要调整一下写法就能实现想要的效果。实在不行，还可以在 Chrome 的开发者模式下调节 html ，设定出想要的效果后直接复制 html 代码，然后粘贴在 .md 文件里；</p></li><li><p>按照以上方式挂载 Highlight.js 之后（此时，Tex 语法也已通过<a href="/2019/03/16/hexo-with-latex/">这篇介绍</a>配置支持）， Markdown 语法中在使用 <code>``` </code> 标记代码块（code block）时，其间不能有<strong>连续两个</strong>空白的行，只能有<strong>一个</strong>；</p></li><li><p>不能紧贴着 Markdown 的 list 标记内容写，之间要有一行空格。之前的「紧贴」是为了实现把代码块（code block）归属于某 list 的 bullet 的那种缩进效果。现在请直接使用 tab 来缩进；</p></li></ul><hr><h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><p>添加 Hightlight.js 参考了：</p><ul><li><a href="https://xiaobailong24.me/2017/05/26/Blog-Code-Highlightjs/" target="_blank" rel="noopener">使用 Highlightjs 为 hexo-theme-indigo 主题配置代码高亮</a></li><li><a href="https://www.ieclipse.cn/2016/08/10/Web/hexo-filter-highlight/" target="_blank" rel="noopener">Highlight.js 添加代码行号</a></li></ul><p>修复代码显示 Bug 的过程参考了：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors" target="_blank" rel="noopener">CSS Selectors - CSS：叠层样式表 | MDN</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/white-space" target="_blank" rel="noopener">white-space - CSS：叠层样式表 | MDN</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/word-wrap" target="_blank" rel="noopener">word-wrap - CSS：叠层样式表 | MDN</a></li><li><a href="https://stackoverflow.com/questions/44754987/getting-osx-safari-to-honor-css-white-space-pre" target="_blank" rel="noopener">Getting OSX Safari to honor css “white-space: pre”</a></li><li><a href="https://www.w3schools.com/cssref/css3_pr_word-wrap.asp" target="_blank" rel="noopener">CSS word-wrap property - W3Schools</a></li></ul><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让 Hexo 搭建的博客支持 LaTeX</title>
      <link href="/2019/03/16/hexo-with-latex/"/>
      <url>/2019/03/16/hexo-with-latex/</url>
      
        <content type="html"><![CDATA[<p>数学是个充斥着糟糕符号的领域，这些符号在语义上的随意性给知识的交流和传承带来了巨大的困扰，人们在参与数学活动的时候，超过一半的时间是用来尝试理解这些数学符号，而不是处理数学问题本身。尽管如此，使用这些符号来表达数学思想确实是现阶段不可避免的。</p><p><a href="https://www.latex-project.org/" target="_blank" rel="noopener">LaTeX</a> 可以让我们在博客里使用这些数学符号，它有着特定的语法。下面的教程展示了如何让<a href="/2016/10/08/how-to-blog-with-hexo/">通过 Hexo 技术搭建的博客</a>支持显示使用 LaTeX 语法所描述的数学表达式。</p><hr><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>安装 <a href="https://github.com/hexojs/hexo-math" target="_blank" rel="noopener">hexo-math</a> 插件，该插件（plugin）可支持使用 <a href="https://www.mathjax.org" target="_blank" rel="noopener">MathJax</a> 或 <a href="https://katex.org" target="_blank" rel="noopener">KaTeX</a> 来实现 LaTeX 排版系统，进而在网页上渲染出数学表达式（本文以 MathJax 为例）。</p><pre><code class="lang-bash">## 打开终端，进入 hexo 博客所在文件夹$ cd ~/blog## 安装 hexo ； --save 参数会让 npm 在安装 hexo-math 之后自动将它写入 package.json 文件里，以便之后多电脑同步时使用$ npm install hexo-math --save</code></pre><p>将 Hexo 默认的 markdown 渲染引擎 <a href="https://github.com/hexojs/hexo-renderer-marked" target="_blank" rel="noopener">hexo-renderer-marked</a> 更换为 <a href="https://github.com/sun11/hexo-renderer-kramed" target="_blank" rel="noopener">hexo-renderer-kramed</a> ，引擎是在默认的渲染引擎的基础上修改了一些 bug 而已。此处不更换也没问题，本文以更换为例。</p><pre><code class="lang-bash">## 卸载默认 markdown 渲染引擎 hexo-renderer-marked；若不卸载，会和新的引擎发生冲突（conflict）$ npm uninstall hexo-renderer-marked --save## 安装新引擎 hexo-renderer-kramed $ npm install hexo-renderer-kramed --save</code></pre><hr><h3 id="修改-kramed-配置，解决语义冲突"><a href="#修改-kramed-配置，解决语义冲突" class="headerlink" title="修改 kramed 配置，解决语义冲突"></a>修改 kramed 配置，解决语义冲突</h3><p>由于 LaTeX 与 Markdown 语法存在冲突（例如在 markdown 中，<em>斜体</em>可以用 <code>*</code> 或者 <code>_</code> 表示，而 LaTeX 也会用到 <code>_</code> ），所以我们要对 kramed 默认的语法规则进行修改，否则之后会出现很多奇怪的排版样式。</p><p>打开 <code>~/blog/node_modules\kramed\lib\rules\inline.js</code> 文件（Hexo 博客所在文件夹的根目录下的 <code>node_modules</code> 文件夹），把第 11 行的 <code>escape</code> 变量的值修改为：</p><pre><code class="lang-javascript">escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,</code></pre><p>同时把第 20 行的 <code>em</code> 变量修改为：</p><pre><code class="lang-javascript">em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</code></pre><p>改好后的代码块显示如下：</p><pre><code class="lang-javascript">// ~/blog/node_modules\kramed\lib\rules\inline.jsvar inline = {  //escape: /^\\([\\`*{}\[\]()#$+\-.!_&gt;])/,      // 注释掉的默认规则  escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,            // 新增的规则  autolink: /^&lt;([^ &gt;]+(@|:\/)[^ &gt;]+)&gt;/,  url: noop,  html: /^&lt;!--[\s\S]*?--&gt;|^&lt;(\w+(?!:\/|[^\w\s@]*@)\b)*?(?:&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;|[^&#39;&quot;&gt;])*?&gt;([\s\S]*?)?&lt;\/\1&gt;|^&lt;(\w+(?!:\/|[^\w\s@]*@)\b)(?:&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;|[^&#39;&quot;&gt;])*?&gt;/,  link: /^!?\[(inside)\]\(href\)/,  reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,  nolink: /^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,  reffn: /^!?\[\^(inside)\]/,  strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,  //em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,    // 注释掉的默认规则  em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,                               // 新增的规则  code: /^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,  br: /^ {2,}\n(?!\s*$)/,  del: noop,  text: /^[\s\S]+?(?=[\\&lt;!\[_*`$]| {2,}\n|$)/,  math: /^\$\$\s*([\s\S]*?[^\$])\s*\$\$(?!\$)/,};//...</code></pre><hr><h3 id="设置-config-yml-开启-MathJax-渲染引擎（重要）"><a href="#设置-config-yml-开启-MathJax-渲染引擎（重要）" class="headerlink" title="设置 _config.yml 开启 MathJax 渲染引擎（重要）"></a>设置 _config.yml 开启 MathJax 渲染引擎<code>（重要）</code></h3><p>在 <code>~/blog/_config.yml</code> 文件（注意，是 Hexo 博客文件夹<strong>根目录</strong>中的 <code>/_config.yml</code> 而不是主题目录下的 <code>/themes/next/_config.yml</code>）中增加 MathJax 的支持，并手动设置下面的 src（这一步很重要，使用默认的 src 会导致数学表达式渲染显示失败。这里的关键是 src 中的 <code>?config=TeX-MML-AM_CHTML</code> 这个字段）</p><pre><code class="lang-yml">......# MathJaxmath:  engine: &#39;mathjax&#39;  mathjax:    src: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML   ......</code></pre><hr><h3 id="使用-LaTeX-语法显示数学表达式"><a href="#使用-LaTeX-语法显示数学表达式" class="headerlink" title="使用 LaTeX 语法显示数学表达式"></a>使用 LaTeX 语法显示数学表达式</h3><p>经过以上所有设置后，重启 Hexo ，让各种设置生效</p><pre><code class="lang-bash">$ hexo clean   ## 清除缓存 - 让新的 markdown 渲染引擎 hexo-renderer-kramed 生效$ hexo s       ## 启动服务器 - 让 _config.yml 文件中的配置生效</code></pre><h4 id="LaTeX-的常用语法如下（更多语法请参考基本语法）："><a href="#LaTeX-的常用语法如下（更多语法请参考基本语法）：" class="headerlink" title="LaTeX 的常用语法如下（更多语法请参考基本语法）："></a>LaTeX 的常用语法如下（更多语法请参考基本语法）：</h4><ul><li><p>使用 <code>\\(</code> 和 <code>\\)</code> ，或者 <code>`$</code> 和 <code>$`</code> 来包裹一个内联（inline）的数学表达式，建议优先用后者，前者常出现语法冲突。后者有问题再换用前者。（参见 hexo-renderer-kramed 的<a href="https://github.com/sun11/hexo-renderer-kramed" target="_blank" rel="noopener">官方说明</a>了解更多 <strong>Tips</strong> ）</p><pre><code class="lang-tex hljs">`<span class="hljs-formula">$<span class="hljs-tag">\<span class="hljs-name">pi</span></span>$</span><span class="hljs-tag">`</span>`<span class="hljs-formula">$<span class="hljs-tag">\<span class="hljs-name">int_a^b f(x) dx</span></span>$</span><span class="hljs-tag">`</span><span class="hljs-tag">\<span class="hljs-name">\</span></span>(lim_{x<span class="hljs-tag">\<span class="hljs-name">rightarrow</span></span> <span class="hljs-tag">\<span class="hljs-name">infty</span></span>}<span class="hljs-tag">\<span class="hljs-name">frac</span><span class="hljs-string">{1}</span><span class="hljs-string">{\sin x}</span></span><span class="hljs-tag">\<span class="hljs-name">\</span></span>)<span class="hljs-tag">\<span class="hljs-name">\</span></span>(lim_{n<span class="hljs-tag">\<span class="hljs-name">rightarrow</span></span> <span class="hljs-tag">\<span class="hljs-name">infty</span></span>}(1+2^n+3^n)^<span class="hljs-tag">\<span class="hljs-name">frac</span><span class="hljs-string">{1}</span><span class="hljs-string">{x+\sin n}</span></span><span class="hljs-tag">\<span class="hljs-name">\</span></span>)</code></pre><p>上述代码分别显示为： <script type="math/tex">\pi</script> ，<script type="math/tex">\int_a^b f(x) dx</script> ，<script type="math/tex">lim_{x\rightarrow \infty}\frac{1}{\sin x}</script> 和 \(lim_{n\rightarrow \infty}(1+2^n+3^n)^\frac{1}{x + \sin n}\)</p></li></ul><ul><li><p>使用 <code>\\[</code> 和 <code>\\]</code> 或者一对 <code>$$</code> 来包裹一个块状（block）的数学表达式（这类表达式会在页面上居中显示）</p><pre><code class="lang-tex">$$A = \begin{bmatrix}        a_{11}    &amp; a_{12}    &amp; ...    &amp; a_{1n}\\        a_{21}    &amp; a_{22}    &amp; ...    &amp; a_{2n}\\        a_{31}    &amp; a_{22}    &amp; ...    &amp; a_{3n}\\        \vdots    &amp; \vdots    &amp; \ddots &amp; \vdots\\        a_{n1}    &amp; a_{n2}    &amp; ... &amp; a_{nn}\\    \end{bmatrix} , b = \begin{bmatrix}        b_{1}  \\        b_{2}  \\        b_{3}  \\        \vdots \\        b_{n}  \\    \end{bmatrix}$$</code></pre><p>以上代码会显示一个矩阵（居中显示）：</p><script type="math/tex; mode=display">A = \begin{bmatrix}        a_{11}    & a_{12}    & ...    & a_{1n}\\        a_{21}    & a_{22}    & ...    & a_{2n}\\        a_{31}    & a_{22}    & ...    & a_{3n}\\        \vdots    & \vdots    & \ddots & \vdots\\        a_{n1}    & a_{n2}    & ... & a_{nn}\\    \end{bmatrix} , b = \begin{bmatrix}        b_{1}  \\        b_{2}  \\        b_{3}  \\        \vdots \\        b_{n}  \\    \end{bmatrix}</script><p>下面是概率界的贝叶斯公式：</p><pre><code class="lang-tex">$$P(A_i \mid B) = \frac{P(B\mid A)P(A_i)}{\sum_{j=1}^{n}P(A_j)P(B \mid A_j)}$$</code></pre><script type="math/tex; mode=display">P(A_i \mid B) = \frac{P(B\mid A)P(A_i)}{\sum_{j=1}^{n}P(A_j)P(B \mid A_j)}</script><p><code>sign</code> 函数：</p><pre><code class="lang-tex">\begin{equation}  sign(x)=\begin{cases}        -1 &amp; \text{if $x&lt;0$},\\        0 &amp; \text{if $x=0$},\\        1 &amp; \text{if $x&gt;0$}.       \end{cases}\end{equation}</code></pre><script type="math/tex; mode=display">\begin{equation}  sign(x)=\begin{cases}        -1 & \text{if $x<0$},\\        0 & \text{if $x=0$},\\        1 & \text{if $x>0$}.       \end{cases}\end{equation}</script><p>其他看起来复杂的数学表达式：</p><pre><code class="lang-tex">$$  \begin{split}  \frac{\partial{\mathcal{E}}}{\partial{x_l}} &amp; =   \frac{\partial{\mathcal{E}}}{\partial{x_L}}\frac{\partial{x_L}}{\partial{x_l}}\\\\  &amp; = \frac{\partial{\mathcal{E}}}{\partial{x_L}}\Big(1+\frac{\partial{}}{\partial{x_l}}\sum_{i=l}^{L-1}     \mathcal{F}(x_i,\mathcal{W}_i)\Big)  \end{split}$$</code></pre><script type="math/tex; mode=display">  \begin{split}  \frac{\partial{\mathcal{E}}}{\partial{x_l}} & =   \frac{\partial{\mathcal{E}}}{\partial{x_L}}\frac{\partial{x_L}}{\partial{x_l}}\\\\  & = \frac{\partial{\mathcal{E}}}{\partial{x_L}}\Big(1+\frac{\partial{}}{\partial{x_l}}\sum_{i=l}^{L-1}  \mathcal{F}(x_i,\mathcal{W}_i)\Big)  \end{split}</script></li></ul><hr><h3 id="引用与延伸"><a href="#引用与延伸" class="headerlink" title="引用与延伸"></a>引用与延伸</h3><p>有关 Hexo 设置参考资料：</p><ul><li><a href="https://linkinpark213.com/2018/04/24/mathjax/" target="_blank" rel="noopener">MathJax - Use Math in Hexo, Just Like Tex! (Including Common Issue Solutions)</a></li><li><a href="https://www.jianshu.com/p/d95a4795f3a8" target="_blank" rel="noopener">hexo 下 LaTeX 无法显示的解决方案</a></li><li><a href="http://www.sail.name/2018/05/31/use-mathjax-in-hexo/" target="_blank" rel="noopener">在 hexo 使用 mathjax</a></li></ul><p>更多 LaTeX 语法请参考：</p><ul><li><a href="http://data-blog.udacity.com/posts/2016/10/latex-primer/" target="_blank" rel="noopener">A Primer on Using LaTeX in Jupyter Notebooks</a>（写得挺好的，所以尽管原文页面已无法访问，还是写出来做个纪念。网上能搜到该文，我的 Dropbox 里也有保存）</li><li><a href="https://docs.latexbase.com/" target="_blank" rel="noopener">Online LaTeX reference</a>（比上面更详细更多细节）</li></ul><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杨一工连载第 3 话：世界上还有一种英雄主义</title>
      <link href="/2019/02/10/yang-yi-gong-series-3/"/>
      <url>/2019/02/10/yang-yi-gong-series-3/</url>
      
        <content type="html"><![CDATA[<p><strong>攻略组玩家之间所谈论的「傻X」是些什么样人？</strong><br>内心敏感的攻略组不会公开定义他们心目中的「傻X」，甚至不会承认「傻X」的存在：“什么东西？没见过，不了解。”</p><hr><p><strong>为什么攻略组玩家有时不承认世界上存在「傻X」？</strong><br>战术性地向世界示弱，以便专注于他们想做的事。</p><hr><p><strong>「傻X」们算是坏人吗？</strong><br>和平年代没有那么多坏人。事实上，「傻X」中的很多人具有正直、善良、热心肠等美好的品质，只是这些品质同时结合了缺乏<strong>实践</strong>的智力而已。</p><p><code>......但玩家们因此就认为世界上没有坏人也是危险的。</code></p><hr><p><strong>为什么说「智力上的不平等是最大的不平等」？</strong><br>所谓的「最大」只是夸张的说法，经历不同的玩家之间有各自心中的「最大」。</p><p>过去的我会认为，智力的差异是造成玩家间生存优势<strong>差距不断扩大</strong>的主要因素。</p><p>后来的修行则让我逐渐有了新的想法：智力上的不平等只是<strong>表象</strong>。影响<strong>最深远</strong>的不平等，或者应该中性地说，影响最深远的<strong>差异</strong>，还是「<strong>运气</strong>」。君子之泽也会五世而斩。</p><p>和种群那种超长时间尺度的命运不同，在个人的命运中，<strong>经济状态</strong>差异造成的影响远比智力差异大。丽贝卡喜欢崇拜、可在我看来臭名昭著的楚留香老师在 2019 就提到「资产排名没到前 20% 的玩家过去十年是负增长，未来大概率会更加负」的统计推论。楚留香也许不靠谱，但她的这番言论仍然值得重视。</p><p><strong>智力</strong>，通常会被认为是认知的<strong>门槛</strong>。但我发现大部分健康的正常人，智力上都不会有很大的短板。对于市面上绝大多数的技能和概念，他们都有能力掌握。只不过经济状态<strong>关键性地</strong>决定了玩家们各式各样的学习<strong>需求</strong>和学习<strong>激情</strong>。比如「长期关系恋爱课」这种简单而绝世的课程有多少玩家有资本去学习呢？就算能掏出几百块钱报班，但不会有<strong>学习激情</strong>去为此付出<strong>足够的</strong>时间。</p><p>这东西和创业、养育子女类似，没有激情是无法应对过程中的各种痛苦的。</p><p>糟糕的经济状态将让玩家们不自觉地处于「<strong>生存</strong>模式」而不是「<strong>生活</strong>模式」。于是，对于世上形形色色的绝世武功，还在为生存忙碌的玩家们虽然<strong>有能力</strong>学习，但是<strong>没资格</strong>学习。这也是<a href="/2019/02/04/yang-yi-gong-series-1/">第一话</a>中提到的「<strong>广度优先</strong>」策略具有超高门槛的原因：经济状态很大程度限制了玩家们的<strong>激情</strong>，进而限制认知的广度：人们无暇<strong>知</strong>道，也没有爱<strong>好</strong>，更谈不上<strong>乐</strong>在其中。</p><blockquote><p>知之者不如好之者，好之者不如【樂】之者。</p><footer><strong>《论语·雍也》</strong></footer></blockquote><p>这种「良好到能<strong>守护</strong>甚至<strong>激发</strong>玩家们认知激情」的<strong>经济状态</strong>，是<strong>最大</strong>的「不平等」。</p><hr><p><strong>由于「神隐」玩家的存在，自以为是的攻略组遇到的未必就是「傻X」。他们将如何知道自己对「傻X」的识别是正确的还是错误的？</strong><br>很难知道。不过攻略组玩家会在<strong>谨慎确认</strong>对方和自己的诉求之后才会得出判断——比如采用<a href="https://rationalwiki.org/wiki/Rapoport%27s_Rules" target="_blank" rel="noopener">拉波波特法则（Rapoport’s rule）</a>。做到这样的程度应该就足够了。当然，也有攻略组坚持认为，不是所有对手都值得如此耗费时间地去尊重，直接拉黑省时省力。</p><p>总的来说，「<strong>真正意义上的对错交给命运</strong>」是位于攻略组顶端、行为模式千差万别的高阶玩家们为数不多的共识。</p><p>因为正像「能量守恒定律」一样，人类的伦理纲常公序良俗，如果严格较真，最终都漏洞百出，无法自洽。所以攻略组不会关心光头的精确定义，只需要直接判断谁是光头就好。<strong>双重标准</strong>是人类可悲的地方，也是其伟大的地方。</p><hr><p><strong>玩家们当如何应对来自「傻X」们的伤害？</strong><br>一、锻炼识别人类情绪及其变化的能力（比如通过看书学习），实现<strong>对自身情绪的掌控</strong>。如果自己情绪控制能力弱或者天生敏感内心脆弱，也可以寻求<a href="https://www.youtube.com/channel/UCL_f53ZEJxp8TtlOkHwMV9Q" target="_blank" rel="noopener">专业心理医生</a>的帮助。有些类型的伤害强行抗几次，很快就会脱敏。</p><p>二、遇到伤害先多反省自己，通过<strong>思考自己的诉求和行为</strong>来判断自己是否是全责，或存在部分过错。如果你认为自己每次都是对的，那你最好去找<a href="https://www.youtube.com/channel/UCL_f53ZEJxp8TtlOkHwMV9Q" target="_blank" rel="noopener">专业的心理医生</a>交流一下。</p><p>三、尝试和身边同在修行的伙伴，尤其是具有毒蛇嘴的伙伴交流伤害事件也有助于<strong>自我反思</strong>。要是身边没有能交流的，就找找古今中外的大神们神交。从他们的作品里和故事中寻求自省，热血和温暖（如果你竟然认为不存在这样的大神，一定要寻找<a href="https://www.youtube.com/channel/UCL_f53ZEJxp8TtlOkHwMV9Q" target="_blank" rel="noopener">专业心理医生</a>咨询——没想到这样的你也有耐心看我这冗长的连载）。这些伙伴和大神资源依赖玩家们平日的积累，比如日常「装X」和上网。</p><p>四、<strong>心灵按摩</strong>。找一些高质量的心灵鸡汤作品看看。可以是影视，也可以是文字，比如罗曼罗兰的「世界上只有一种英雄主义，那就是看清生活的真相之后依然热爱生活」。此外，宗教也是人类精神世界的重要支撑。需要注意的是，它是一种让人无须磨练也能获得精神力量的方式，不及那些通过修行获得的精神韧性那么可靠。顺便提一下，判断某种意识形态属于宗教的三个必备条件是 ABC ：Assure（确认）, Believe（信仰）, Convert（皈依）。宗教<strong>确认</strong>人可以救赎，宗教<strong>信仰</strong>某种<strong>精确</strong>的神学，宗教能让无信仰者<strong>皈依</strong>。</p><p>五、对自己进行<strong>积极的心理暗示</strong>，自我鼓励。比如属于「装X」基本功的「对着自己装X」：“……你这副浪样天不妒你妒谁？”。不需要在意其中幼稚的属性，自我催眠能缓解伤害带来的痛苦。</p><p>六、<strong>神隐</strong>。在隐身状态（不引起别人的注意的状态）下修行，达到提前过滤掉不必要的「傻X」的效果。在玩家们采用的各种神隐方式中，「装X」最实用。这种方式可以实现即使在众目睽睽的聚光灯下也能让自己的存在对<strong>特定人群</strong>无影无踪。与世隔绝孤军奋战虽然也能隐身，但是那样无法享受各种资源和<strong>自我存在感</strong>带来的修行方面的助益。比如 24 小时商业中心的物资供应，比如与其他人沟通交流的机会。</p><p>七、寻找一个<strong>无危害的发泄方式</strong>，比如玩游戏，比如私下里骂娘（绝对不能公开，即便要公开，也只在自己的小圈子里公开）。若是经常需要发泄，建议求助<a href="https://www.youtube.com/channel/UCL_f53ZEJxp8TtlOkHwMV9Q" target="_blank" rel="noopener">专业心理医生</a>。</p><p>八、情况如果特别糟糕，沦为声名狼藉的斗士、走上修罗之道与对方斗智斗勇也是一个办法。此方案要求玩家们具有<strong>相当程度的体力</strong>。因为情况糟糕通常意味着遇到了占据天时地利的「傻X」。他们或人数众多、或能持之以恒、又或者时间不值钱，消耗战方面具有极大的优势，平时不锻炼的玩家很容易吃不消。攻略组应该要做好<strong>至少 20 年</strong>（对，你没看错，就是 20 年，四分之一的人生）持续行动的准备，并且<strong>要时刻警惕自己，避免被巨大的情感、精力和金钱付出深深套牢绑架，或是迷失在“过剩的正义”当中</strong>。也许 2003 年 3 月中国湖南湘潭 22 岁女教师黄静的这个真实故事能给玩家们一些启示：<a href="http://news.cctv.com/law/20060712/101205.shtml" target="_blank" rel="noopener">漫长的告别</a></p><p>玩家们进攻的道路上危机四伏，没有沦陷的觉悟，建议还是走「神隐」路线。</p><p>九、当遇到上述<strong>走上修罗之道</strong>以对抗「傻X」的攻略组玩家时，试着守护他们。他们为我们沦为了恶魔。</p><p>值得提醒的是，在攻略之道以外，等待着玩家们的是<strong>同样（如果不是更加的话）无边无际</strong>的「虚无之道」，它是否真的比攻略之道轻松就只有空之女神才知道了，那是<strong>神知道的世界</strong>。</p><hr><p><strong>清华北大哈佛耶鲁这些学校里真的也是百分之八十的「傻X」吗？</strong><br>深谙「装X」神隐效果的攻略组们不会有任何的预设立场（Assume nothing）——毕竟面前的「傻X」可能是装出来的——并对各种可能出现的情况都游刃有余。他们的思维方式不是「名校里<strong>也是</strong>绝大多数XX」，而是「名校里，<strong>如果</strong>绝大多数是XX，我也不会感到意外」。新手玩家可以重复感受一下这两种思维的差异。攻略组在意的是名校所聚集的各类优秀的修行资源，比起这些资源，其他可能存在的问题都是小事。</p><p>有个无关紧要不过也许有玩家会感兴趣的八卦是，在<strong>初阵</strong>的时候，所有攻略组的玩家们都会<strong>严重低估</strong>名校学生、乃至名校教职工队伍的真相的残酷程度。<strong>所有因预先有心理准备而对残酷程度提前进行的补偿性高估，到头来都会是低估。</strong></p><hr><p><strong>为什么「傻X」浓度高达百分之八十的玩家群体非但没有走向灭亡，反而还能一起合作让经济持续增长几个世纪？</strong><br>羊群前进的方向是由领头羊来决定的，剩下那不到百分之二十的玩家起着关键作用。更深层次的原因还包括玩家们自私自利的天性等等。不过这不是个适合完整剧透的话题，在意修行效果的攻略组们不会希望过早出现过多的预设立场（Assume nothing）。</p><hr><p><strong>肚子里已然能撑船、能开飞机、能装航空母舰的宰相级玩家，为什么即便能得体应对日常「傻X」，当面对在至暗时刻帮助过自己的「恩人型傻X」、自己一直视为信仰或灯塔的「偶像型傻X」、还有得过诺贝尔奖的「权威型傻X」时，还是会失态，甚至崩溃？</strong><br>获得宰相属性的玩家无疑是异常优秀的。他们的情商（识别情绪与控制情绪的能力）已到达了很高的水准。然而这之后的境界要面对的是自己心灵中<strong>最柔软</strong>的部分，是攻略组们<strong>赖以前行</strong>的敏锐感受器。与这些 Boss 的对决将直接威胁到玩家们<strong>长期的认知</strong>，超出了单纯的情绪能掌控的局面。它考验的是玩家们<strong>对自己珍视珍爱的事物的取舍能力和觉悟</strong>。</p><p>与「恩人型」对决时，要保持「岂能尽如人意，但求无愧我心」的心态；与「偶像型」的对决，则建议「清华北大哈佛耶鲁也不会让我们感到意外」；至于「权威型」……</p><p>与「权威型」的对决通常要面对的不是一个人，而是一群人，一大群人，大部分的人，乃至大半个世界。这个群体中还会同时包含「恩人型」、「偶像型」等各种 Boss 级别的「傻X」，是最容易让已然到达宰相境界的玩家依然崩溃的对决。该级别的对决通常意味着玩家们抵达了事关<strong>高阶</strong>「觉醒」的关键转折点（高阶的意思是攻略组们的集体觉醒而非单个玩家的觉醒。这是一种蕴含着无尽希望的觉醒）。然而<strong>抵达</strong>是一回事，<strong>跨越</strong>又是另外一回事。简单地排斥是危险的。尝试容纳，与其和谐共处同样困难重重：<strong>正义间的对决异常残酷，“完美”的正义会突破正义自身，从而不再正义。而“瑕疵”的正义同样会面临巨大的牺牲</strong>（多数时候这不是简单的“善恶”对决。是“善”与“善”之间的对决）。</p><p>开启「神隐」模式固然是一种避其锋芒的解决方法，但如果所有人都「神隐」，攻略组将<strong>永远无缘高阶觉醒</strong>。</p><p>极少有玩家能挺身而出，因为代价很大，通常大到严重影响他们希望守护的那些人和事物。大部分进阶玩家会放弃对决，转而选择<strong>悄悄帮助</strong>挺身而出的攻略组。</p><p>做好了觉悟正面对决的攻略组，基本只有一条路，那就是发挥之前竭尽全力的修行成果，遍体鳞伤地和提供协助的进阶玩家们一起，尝试在一次又一次失态和崩溃之中寻找平衡。这一过程凶险万分，即使训练有素的攻略组仍然会在不知不觉中忘记当初战斗的理由，迷失在纯粹的战斗之中，乃至走上修罗之道，沦为碰瓷犯和恶魔。这也许是战斗不可避免的代价。（希望各攻略组能意识到，胜负的关键并<strong>不在于打倒</strong>「权威型傻X」，而<strong>在于争取</strong>那些……的玩家。在诸多对立价值中寻找平衡的过程中，次优解也许比最优解更值得推进）：</p><blockquote><p>……达尔文发布了这个「进化论」以后，到处去宣传和讲这个东西。然后有一次在一场活动中，有人拿出一个猴子，然后在台下冲着达尔文举起那个猴子，说「你丫才是它的后代呢」。然后现场观众也都欢笑鼓掌。然后他们被自己机智、幽默、锐利、深刻、阴损的这个风格给深深地迷住了。但是我们先知先觉的人呢，总是心里怀着悲悯之情。然后就觉得，虽然你是个傻逼，但是我们会带着你走向更美好的生活……然后过程中不需要你感激，不需要你理解，不需要你懂。你只要享受后果就可以了。</p><footer><strong>爱新觉罗·罗</strong></footer></blockquote><p>和所有被跨越的绝望一样，其实真的正面对决了也没什么。确实很吓人，但也没什么大不了。谎言的代价，并非在于人们会把谎言误认为真相带来的损失，而在于人们听多了谎言，便再也无法相信和分辨出真相。绝望的真正危险，也在于玩家们不再相信跨越的可能性。</p><p>祝愿这些挺身而出的攻略组们<strong>最终能有机会感谢</strong>「第一的执念」长期维持着的危机感、恐惧和绝望；感谢「健身锻炼」带来的充沛体力；感谢「装X」塑造出的精神韧性；感谢空之女神汇合了他们过去所有的挥霍。</p><hr><p><strong>面对差得让人时刻想说脏话的沿途风景，只在意“远方”的攻略组玩家们如何在浮躁中取舍和自处？</strong><br>一、积极地结伴同行（不必担心你的伙伴拖你后腿，你几乎只会找到当下和自己同一水平的玩家，不会低也不会高。有些邪恶的玩家也因此不时通过伙伴的质量来判断自身的实力。更有甚者会参考自己是否仍然被某些人<strong>讨厌</strong>或<strong>认同</strong>来判断修行方向的正确性）；</p><p>二、尝试珍惜每个阶段和自己同行的玩家。即使大家来自不同的星球，即使终将去往不同的地方，能这样在地球上短暂地相聚，还是很不容易的。想通了这个，心态就很容易健康起来；</p><p>三、修行那些能带来精神上陪伴效果的技能（比如乐器）；</p><p>四、多接触文艺型玩家们留下的精神财富：「……就算是舒适安逸，不甘平庸的灵魂还是会驱使他们在心里不停地追问，什么才是真正的……」；</p><p>五、保持危机感（不断冲击第一名以感受身为第一的恐惧是最佳保持方式），必要时进入「神隐」状态（隐身换来专注）；</p><p>六、每一次取舍都思考一下该事件在自己<strong>整个生命尺度里</strong>可能造成的影响（比如是否存在复利效应等等）；</p><hr><p><strong>看清了生活的真相之后，除了试着依然热爱生活，还有什么英雄主义的选择？</strong><br>持续贯彻和训练自己的<strong>好奇心</strong>。</p><p>即使面对真相带来的恐惧、痛苦、以及无力感，<strong>仍然愿意且有能力</strong>贯彻好奇心的玩家，是这个时代…哦不…在任何一个时代都是伟大的英雄。</p><p>好奇心会对他人造成伤害，乃至毁灭。<strong>但是</strong>，在攻略的最前线，「真相」比「善良」更重要，也更加凶险（善良这东西本身<strong>已然</strong>暗藏着值得高度警惕的凶险：往往是那些善良的愿望把玩家们带入了人间地狱）。尽管对于恰同学少年的灵长类来说，<strong>天然的潜力</strong>之一就是那无所畏惧的好奇心。可是，这类未经训练的好奇心，是无法应对各种凶险的。</p><hr><p><strong>还有什么鸡汤？</strong><br>在可观测的宇宙中，星系总数超过 <a href="https://zh.wikipedia.org/wiki/星系" target="_blank" rel="noopener">2 万亿</a>。定位出银河系后，还要过滤掉大约 <a href="https://zh.wikipedia.org/wiki/类地行星" target="_blank" rel="noopener">400 亿</a>颗位于适居带内的类地行星，然后才到 ZZ9 Plural Z Alpha —— 这个孕育了 <a href="https://zh.wikipedia.org/wiki/物种#cite_note-9" target="_blank" rel="noopener">870 多万</a>个不同物种的地方。于是，就算不考虑近 <a href="https://en.wikipedia.org/wiki/History_of_the_world" target="_blank" rel="noopener">5000 年</a>人类文明的时间维度、对应的地理空间维度、还有 60 多亿的数量，我们作为同一物种的人类在地球上相遇的概率仍然难以想象地趋近于〇。</p><p>然而这件事还是发生了……なんと素晴らしい……</p><p>无奇迹说（<a href="https://en.wikiquote.org/wiki/No_miracles_argument" target="_blank" rel="noopener">No miracles argument</a>）？</p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Miscellaneous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杨一工连载第 2 话：神最烦装逼犯</title>
      <link href="/2019/02/10/yang-yi-gong-series-2/"/>
      <url>/2019/02/10/yang-yi-gong-series-2/</url>
      
        <content type="html"><![CDATA[<p><strong>玩家们讨论的「装X」到底是什么？</strong><br>吹牛皮，向观众展示自己的某种优势。比如为了表现身材好，穿上紧身衣在镜子面前自拍一张发朋友圈。</p><p>「装X」本质上是一种表演。它和舞台或荧幕上诸如舞蹈、影视剧等其他各种形式的表演没有什么不同。在部分攻略组玩家的眼中，甚至人们的一举一动都是某种形式的表演（比如职场中刻意避免说出自己的真正想法、约会时打扮一番等等）。在他们看来，人生在世，活的就是个“形式”。如果活的只是人的“本质”（一堆肉？基本粒子？），那就太没意思了。</p><hr><p><strong>「装X」的具体行为是怎样的？</strong><br><img src="/2019/02/10/yang-yi-gong-series-2/1st-ds7-Beijing.jpg" title="北京首辆 DS7"></p><p>所有的「装X」行为基本都可以归结为以下三类：</p><p>一、<strong>直接展示</strong>自己的某种优势。例如为了展示自己的品味，朋友圈发一张法系 DS7 的照片，配上「北京首辆」之类非常直白的文案。圈中的玩家只能含恨怒赞。“嫉妒”之情，情非得已（得体附议）。</p><p>二、假装<strong>不经意地显露</strong>出自己的某种优势。例如同样是为了展示品味，发一张 DS 1:43 车辆模型的照片（购置车辆后，厂家会赠送模型或雨伞，所以有模型代表有车，甚至是特定型号的车，比如歌剧院限量版，或者应该说 OPERA 版的 DS7 ）。懂的人会知道「装X者」有车，是 OPERA 顶配，根据发圈时间还能进一步推出是北京首辆等等。知情的玩家无不窃窃私语。羡慕之情，情难自控（同好附议）。</p><p>三、假装自己具有某种<strong>其实没有</strong>的优势。例如，与别人的 DS7 合照发朋友圈。主演的玩家时刻小心翼翼。造作之情，情不自禁（自我附议）。</p><hr><p><strong>「直接展示优势」和「假装有优势」这两种行为我能理解，可「假装不经意间显露出自己的某种优势」是个什么情况？怎么会有这种需求？</strong><br>「假装有优势」由于水准低，且被戳穿后通常会造成巨大的负面效果，<strong>风险大</strong>。攻略组极少有人能驾驭。</p><p>「直接展示优势」的一个潜在问题是会引发各路牛鬼蛇神的嘲讽、嫉妒、挑刺等消耗精力的事件。这种「装X」方式在实际修行中<strong>不是</strong>最优策略：“……本来我是想帮忙，现在却得为自己的建议辩解。”</p><p>「假装不经意地显露出自己的某种优势」在展示的同时可以<strong>过滤掉</strong>自己不想要的观众（即懂的人秒懂，不懂的人没必要懂），效果拔群。是玩家们常用的「装X」方式。</p><p><code>注意，「假装不经意地显露某种优势」包括</code><strong><code>故意</code></strong><code>展示自己的某种劣势。因为在某方面的极度劣势有时会暗示着另一个方面的极端优势。这是神隐玩家们的招牌伎俩。比如失业在家看起来是劣势，但很可能意味着......</code></p><hr><p><strong>为什么大家都讨厌「装X犯」？</strong><br>通常情况下人们真正有意见的不是「装X」本身，而是「装X」的水准。被认为是「装X犯」的玩家一般是因为水准<strong>太低</strong>。</p><hr><p><strong>为什么多数玩家只能装出低水准的「X」？</strong><br>因为他们没有经过<strong>足够的</strong>刻意训练。这一般是对「装X」<strong>作为一场演出的本质和严肃性</strong>没有正确的觉悟导致的。</p><hr><p><strong>「装X」和弄虚作假有什么区别？</strong><br>假装自己具有某种优势的这一类「装X」显然属于弄虚作假。其风险巨大，不建议经常使用。玩家们所要修炼的「装X」和优秀的表演一样，展示的是一种受过训练，受到控制的真实。虽然不是天然的真实，但可以肯定这和弄虚作假无关。</p><p>为了便于理解，一丝不挂，蓬头垢面，就是一种天然的真实；工作场合穿着得体，则是受过训练，受到控制的真实。工作场合的穿着和行为举止没有旅行休闲时那么风骚，显然<strong>不能被指责</strong>为弄虚作假，即使它是苦心经营出来的得体（从礼仪就是反人类本性的角度看，哪一种得体不是“苦心经营”的呢）。</p><hr><p><strong>攻略组的玩家为什么要修炼他们的「装X」技能？</strong><br>对于大部分攻略组玩家，「装X」的目的是为了更有效地精进一项技能，提高自身的实力，即<strong>「装 X 直到牛 X 」</strong>- <a href="https://www.youtube.com/watch?v=Ks-_Mh1QhMc" target="_blank" rel="noopener">Fake it till you make it</a> 。比如为了展示身材，必须持续锻炼身体，于是最终获得了更好的运动协调性和耐力。如果没有「展示身材」这一个激励环节，锻炼协调性和耐力的过程将无比艰辛，痛苦万分；再比如职场上，除了做好分内的事之外，你还额外做了很多管理层才需要做的事，那么你被提升到管理层岗位就是<strong>自然而然</strong>的，因为你显然已经胜任这个岗位了。先做某个岗位的事情，把自己当成（装作）这个岗位的人，才容易被提升到相应的岗位。「拿多少钱就只做多少事」的态度会让人原地踏步。</p><p>类似这些“原理”有点类似「意识影响行动；行动影响感觉；意识无法直接影响感觉」的理论精华。</p><p>对极小部分的攻略组玩家来说，「装X」的另一层目的是为了将自己隐藏在茫茫的人海之中，并且释放出只有修行道路上的同类才能看懂的信号。过滤异类、吸引同类，有助于避免他们在修行过程中不必要的精力消耗。隐身的至高境界是用最激进的方式原形毕露。激进到无以复加、激进到形神俱灭……这便是神隐隐于「装X」。例如，到处强调自己是某个领域的第一，很可能的结果就是你希望过滤掉的观众都会觉得你水平不行（神隐玩家能同时做到给特定同类释放实力信号且不因此激怒大众）。在一些特殊的时刻，玩家甚至可以做到只有一个「观众」才看得出你真正想展示的东西。比如男生搭讪的一个良好效果就是要让搭讪目标<strong>之外</strong>的人都看不出来他在搭讪，毕竟这通常是只属于两个人的私密活动。</p><p>默默无闻的隐身没法和这个世界的高阶玩家交互，<strong>自我存在感</strong>很弱，难以高效地前进。世上只存在竞技场上与众玩家切磋出来的高手，不存在深山老林里独自修行出来的高手……当然，也许哲学领域除外。</p><p>有些玩家会提到「装X」带来的流量具有商业潜力等等，这是攻略之外话题了，不在攻略组玩家们的主线上。</p><hr><p><strong>如果完全不「装X」，玩家们会受到什么样的影响？</strong><br>玩家们将<strong>极难</strong>推进他们的修行，入门到放弃几乎会发生在一瞬之间。</p><p>「装X」另外一个不起眼却影响深远的作用是，重新审视自身的「尊严」和「荣耀」所带来的阻碍和动力。这会极大程度地提高精神上的韧性。不装的玩家将无缘此种在「绝望」和「觉醒」的临界时刻至关重要的<strong>精神韧性</strong>，以至于彼时被「尊严」、「荣耀」、「人物关系」等事物束缚。</p><hr><p><strong>为什么会这样？</strong><br>因为人是社会性动物，「和世界持续交互」体现和强化了<strong>自我的存在感</strong>，对修行效果有巨大增益。「观众」，或者说「见证者」，几乎是唯一能给与有效反馈的重要对象。其他方面实力相当的情况下，没有「观众」的玩家在修行效率上将<strong>落后多个数量级</strong>。</p><p>PS：<br>「<strong>存在感</strong>」是人类的一种<strong>本能</strong>，更是我们得以不断攻略前行的<strong>力量来源</strong>。<br>周末的下午百无聊赖，干什么都提不起劲，不知不觉就到了晚上，则玩家对这个周末的下午就是没有记忆的。生命中的一个下午就这样消失了，玩家并没有感觉到自己是一个鲜活的存在，没有实感。如此状态下，玩家们只会像蜜蜂一样靠着本能重复过去、日常，不会有改变、突破的欲望和动力。只有强烈地感受到自己的存在，我们才有欲望去和世界交互，进而精进和改善自己。<br>「装X」和释放情绪一样，可以<strong>强化</strong>自我的存在。「装X」经常也会伴随着情绪释放，属于更加主动积极的行为。<br>与其他玩家建立长期稳定的关系则可以<strong>延伸</strong>自我：除自己外，别人那还有其他的「我」。世上存在多个「我」。</p><hr><p><strong>攻略组的玩家是如何提高自己「装X」能力的？</strong><br>提升「装X」技能的常规方式自然是<strong>经常装</strong>、<strong>到处装</strong>。分析观众的反馈，之后反复打磨「装X」的细节。</p><p>也许 Peggy Klaus 的书 <a href="https://www.amazon.com/gp/product/B001J2UVA2/ref=dbs_a_def_rwt_hsch_vapi_taft_p1_i0" target="_blank" rel="noopener">Brag!: The Art of Tooting Your Own Horn without Blowing It</a> 中总结的原则能帮新手们快速入门：不要误导观众；得分场合；避免没完没了；切记撒谎欺骗等。</p><p>其次，效率最高的方式是模仿「装X」效果好的玩家。可多接触优秀的作品来熏陶自己。长期坚持一个对自律性有要求的技能（例如器乐、运动）也有巨大帮助，除了锻炼自律，还因为可以保持足够的严肃，避免情绪失控带来语言上的轻佻，尤其是在自己春风得意的时候。</p><p>再者，时间对于各类别出心裁的花招是极其<strong>残酷</strong>的（无论是语言上还是工具上），背后的<strong>思想</strong>才是关键。「装X」这项技能<strong>根本上</strong>的进化依赖自身的<strong>品味</strong>和思考的<strong>深度</strong>。在我这个时代，一个很能说明问题的例子是王国维的<a href="https://zh.wikipedia.org/wiki/王国维#人生三重境界" target="_blank" rel="noopener">学问三境界</a>：</p><blockquote><p>古今之成大事业、大学问者，必经过三种之境界。‘昨夜西风凋碧树，独上高楼，望尽天涯路’，此第一境也；‘衣带渐宽终不悔，为伊消得人憔悴’，此第二境也；‘众裡寻他千百度，蓦然回首，那人却在灯火阑珊处’，此第三境也。</p><footer><strong>王国维</strong></footer></blockquote><p>其实王国维想说的无外乎<strong>刚开始</strong>「孤独无措」，<strong>然后</strong>「勤学苦练」，<strong>最后</strong>「豁然开朗」。但他非要插入一句古诗词来代替，故弄玄虚。某些时候这样的花招也许能增加一些幽默感、画面感或者带有讽刺意味，不过这始终是个坏习惯。善弈者通盘<strong>无</strong>妙手。可以为了「<strong>精确</strong>」而啰嗦，要避免为了「<strong>装逼</strong>」而啰嗦。</p><blockquote><p>……你们觉得我的演讲技巧有问题，是吗？那又怎么样？哼…这个简直跟说吉米亨德里克斯弹吉他的指法不正确一样可笑。</p><footer><strong>约翰·罗梅罗</strong></footer></blockquote><p>最后，要保持<strong>自信</strong>。很多玩家其实没机会思考真正意义上的<strong>自信</strong>到底是什么，以为充其量只是<strong>接纳</strong>不完美的自己。真正的自信是：「<strong>既不（打算）影响别人，也不被别人所影响</strong>」。这样的「装X」才最有魅力。</p><p><code>PS：</code><br><code>可以认为杨一工连载系列（本连载）里所有的文字和表达都是装逼，且大多属于「假装不经意地显露优势」这一类带有强过滤、强信号的神隐型装逼 —— 即懂的人秒懂，享受找到同类的喜悦和伤感，不懂的则会无感地跳过此类装逼细节（比如</code><a href="/2018/12/24/yang-yi-gong-series-0/"><code>第 0 话</code></a><code>中的「远方」一词的引号，比如「...低层级（Low Level）困惑...」这样看似带有歧视的描述等等都属于这些细节）。之所以会这么写，是因为作者在应对人生必将失去的那部分自由的过程中，了解到了向世界示极致之弱的必要性（即怎么示弱都不过分）。</code></p><p><code>虽然这些「装X」细节是如此地转瞬即逝，若是不经提醒、不再重复阅读，它们很可能在你今后的世界里就永远消失了，但这并不特别影响玩家们对连载主要观点的理解。察觉神隐的存在只有两种方式，第一是成为同类的神隐玩家，第二就是与其建立长期关系。</code></p><hr><p><strong>什么场合下适合「装X」？</strong><br>其中的分寸感特别微妙。一个常见的规则是你希望给「观众」<strong>留下印象</strong>的时候适合「装X」，比如演讲。如果你想保持或提升「观众」<strong>对你的好感</strong>，就得谨慎「装X」，甚至完全避免，比如职场上的跨部门合作。</p><p>总的来说，分寸感要在大量实践中逐渐把握。场合不对将无法获得正确的反馈，也就无法达成玩家们各自的目标。</p><hr><p><strong>装 40 分钟的「X」合理的准备时间是一个星期？</strong><br>这个说法来自于我心目中排名第一的英语教师约翰·罗梅罗——也就是坊间戏称的「龙哥」或「爱新觉罗·罗」——的备课时间（哎，真是太XX装了）。根据他的经验，准备一堂质量过关的课程，备课时间<strong>不应少于</strong>课程时长的 100 倍。也就是 40 分钟的课程需要<strong>不少于</strong> 66 小时（七天时间）来准备是比较合理和稳妥的。哪怕是 15 分钟的一个汇报，也<strong>至少</strong>要一整天约 8 到 10 个小时。</p><p>这样的时间配比并非试图传递一个死板的<strong>教条</strong>，它的作用是提醒玩家们在「装X」的过程中要通过<strong>巨量的彩排</strong>来改善效果。尽管龙哥的实际行动确实就是字面意义上的 100 倍准备时间。</p><p>很多攻略组玩家在长期「以教为学」的修行方式下已经养成了即兴彩排的习惯，对他们来说，每一次表达和交流都不同程度地在为之后的「装X」进行彩排。</p><hr><p><strong>疲于日常的我们为什么会有一星期的准备时间？</strong><br>保持余裕的最好方式是<strong>养成习惯</strong>，或者说时刻准备着。已经养成彩排习惯的玩家无疑是幸运的。至于其他玩家，多<a href="https://evernote.com" target="_blank" rel="noopener">记笔记</a>是一个良好的习惯。平时多收集「装X」素材，尽早适应日常海量的信息处理。各种觉得有价值的东西都可以记录下来。此外，一份日程表也许有助于效率低下的玩家，很多 <a href="https://www.omnigroup.com/omnifocus/" target="_blank" rel="noopener">TODO</a> 类的软件都能快速实现这样的日程表。</p><p>还可以参考工业界中的「<strong>流程</strong>」。工业生产线上往往会制定相应的流程和规范，让人们的行为可以达到“<strong>无脑</strong>”的状态，进而<strong>提高</strong>产出，<strong>降低</strong>成本。比如一个零基础的玩家培训几周就能参与编程或者修图设计，都“<strong>得益于</strong>”制造干活机器的<strong>流程</strong>。跑出属于自己的训练「流程」，让训练彩排可以向日常刷牙一样<strong>纪律化，常态化</strong>。</p><p>顺便说一下，<strong>21 天的重复所能养成的习惯基本都是那种无脑的简单动作</strong>，比如刷牙。像做笔记这种比较烧脑而复杂的习惯，仅依靠简单的重复养成效果极差，需要专门训练自己的“主观能动性”。寻找你的「观众」甚至是「假想的观众」会让形成新习惯的过程容易很多。</p><p>有些玩家会选择堕入颇具争议的自恋之道，老实说，效果也是同样惊人。</p><hr><p><strong>整个学生时代，或者说所有修行的日子中被严重低估以至于多数玩家完全忽略了的重要修炼项目是什么？</strong><br>锻炼身体（注意！是<strong>搭配饮食</strong>的锻炼）。锻炼的重要程度和人们对它的熟悉程度一样（有多熟悉就有多重要）。高水准的「装X」极其消耗体力，经常需要在负重和高压力状态下行动。任何一个严肃对待「装X」乃至更加一般化的「修行」的玩家，都强烈建议以行动来感受耐力（高强度持续输出所能坚持的时长）和体力（总输出）带来的巨大复利。该复利主要体现在玩家们余裕的提升。</p><p>有实力的邪道玩家可以找个靠谱的健身教练来少走弯路。</p><hr><p><strong>你说的我都看懂了，可我心理上仍然对「装X」行为难为情，怎么办？</strong><br>尝试一下这碗鸡汤：人们不会记得你说过什么，也不会记得你做过什么，但是他们……</p><hr><p><strong>（打断）「但是他们永远都不会忘记我带给他们的感觉」吗？</strong><br>我想说的是，但是他们之中<strong>你喜欢、在乎的那些人</strong>，会不知不觉中持续受益于你竭尽全力「装X」所造就的<strong>改变</strong>。</p><hr><p><strong>你怎么知道神最烦装 X 犯？</strong><br>耶稣不是最烦法利赛人（Pharisees）吗？</p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Miscellaneous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杨一工连载第 1 话：第一之为责任</title>
      <link href="/2019/02/04/yang-yi-gong-series-1/"/>
      <url>/2019/02/04/yang-yi-gong-series-1/</url>
      
        <content type="html"><![CDATA[<p><strong>好吧，你先来和我们说说什么是「牛X」？毕竟它是个抽象的概念。</strong><br>「牛X」就是第一名。</p><hr><p><strong>第二名、第三名不算「牛X」吗？要我说，位于第一百名的玩家也很厉害喔~</strong><br>「也很厉害」其实就是「不厉害」的意思。第一名的优势通常比其他所有名次加在一起还大。部分攻略组玩家会激进地认为<strong>第一名之后都是落后</strong>，并且抱着必死的觉悟（这样的描述也许仍然低估了攻略组的觉悟，他们之中很多人都曾无数次有过自杀的念头，可终究还是咬牙强笑坚持了下来），为第一之名赌上一切。</p><p>越是逼近过各式各样的第一，就越能领会这种「<strong>激进</strong>」。</p><hr><p><strong>「第一」的感觉是怎样的？</strong><br>无尽的恐惧。</p><p>具体来说，第一名们在严肃反思起自己过去的修行时，总会不自觉地感谢幸运之神的眷顾。有些时候，看似平淡或不经意的一个选择，实际上<strong>凶险万分</strong>，攸关生死（林柳老师^_^）。彼时的淡定和无奈，仅仅因为自己的<strong>无知</strong>（还好选对了）；在另一些时候，看似<strong>反人性</strong>且具有极大风险的行动，在当时的危急局势下却包含着至关重要的<strong>胜负转折</strong>，远胜于其他安全稳妥的选项。考虑到选择了冒险的玩家不出意外还将面对前所未有的<strong>多方压力</strong>，能顺利坚持下来实在是太幸运了。</p><p>由于不知道幸运之神是否还会再次降临，玩家们只能分秒必争，不断提升生命的密度来增加胜率。不敢仅靠自己当前已有的优势就对未来心存侥幸。</p><p><code>公元 2013 年 4 月 8 日北京时间凌晨 1 点，北半球某校园里的一个男生经过短暂的犹豫后决定辍学。当时的他并没有完全想清楚该行为的利与弊（如果有利的话），甚至对未来也有着比过去更加绝望的迷茫。可是，他却对自己的决定感到莫名地兴奋和轻松，而这，仅仅只是因为他的直觉在过去半年里不断地告诉他：不应该再以这样的方式继续修行......</code></p><p><code>......19 天后，公元 2013 年 4 月 27 日下午太平洋东部某小岛上，命运的事件发生了。历史的车轮开始缓缓转向，人们原本的生命轨迹也因此悄然剧变。多年以后，另一个时代的主角们在回顾这个平淡瞬间时，都不禁感到后怕。但此时，事件中心的人物们对即将发生的一切还全然不知。</code></p><hr><p><strong>为什么你说「第一」是一种幻想？</strong><br>因为运气成分很大，大到让新人们近乎绝望的程度。例如，一个常见的运气是玩家所出生和成长的家庭（战斗在战斗还没开始的时候，就已经开始了）。玩家们越是追求第一，越能真切地感受到各种运气带来的<strong>无奈</strong>。</p><p>不知道算不算<strong>命运的补偿</strong>，「<strong>无知</strong>」和「<strong>谎言</strong>」间接保护了绝大部分新人（不能简单地认为前辈们对新人故意撒谎。大多情况下，这些谎言，或者说错误的信息，是多种因果交织在一起导致的）。如果一开始就知道这么难，多数玩家会知难而退。正所谓千里之行始于足下，只有不知道难，每次只难一点点，辅以美好的幻觉，才不至于让行动的热情和勇气被击垮，才能<strong>持续行动</strong>，最终得以顺利抵达<strong>几乎不可能</strong>的彼岸。第一名的潜在候选们也是在这样的“保护”下成长的。直到完成各自的觉醒后，他们才得以独立，逐渐摆脱这种“保护”。等走到足够远后回头再看，之前所绝望的壁障已经不是无法跨越的了。当然，前方还有更大的绝望在等着，不过这时候玩家们的自负、侥幸、还有技能熟练度，已经<strong>足以</strong>支持他们继续前行。</p><hr><p><strong>攻略组玩家们追求第一名的理由是什么？</strong><br>应对世界的残酷和<strong>可能性</strong>。</p><p>修行中所建立的各种珍贵回忆和<strong>通感</strong>有助于我们从事新的实践。比如有些玩家一到冬天，或者闻到北京雪的气味，就能唤起学生时代冬季备考的励志和突破过程。这种珍贵的感觉支撑着他们度过了一个又一个寒冷绝望的夜晚。</p><p>世界的残酷和可能性都<strong>远超</strong>玩家们的想象，危机意识是绝望的唯一<strong>克星</strong>。以「第一」为目标是保持危机感的<strong>必要条件</strong>，故而它是所有攻略组玩家的<strong>基本责任</strong>。「第一」之外的妥协只会让玩家对自身实力和周边环境心存可悲的<strong>侥幸</strong>。</p><hr><p><strong>可以说得再通俗点吗？为什么就这么执着于第一？</strong><br>王富贵：“为了能永远自由自在，快快乐乐地生活在一起。”</p><hr><p><strong>玩家们现在不算是自由自在，快快乐乐地生活在一起吗？</strong><br>王富贵：“我说的呀，是「<strong>永远</strong>」。”</p><hr><p><strong>要追求第一，而第一又是幻想，那追求这个幻想是否不切实际？</strong><br>是的。然而问题不在于我们的<strong>命运</strong>，而在于我们自己。过程的意义远大于目标本身。无论结果如何，追求第一的过程都会让玩家自身受益无穷。</p><hr><p><strong>怎么样才算是第一名？</strong><br>游刃有余。在所有对决中都能保有「<strong>余裕</strong>」。</p><p>多数时候，合适的对手会像一面镜子一样让我们能更好地确认自身的余裕，同时塑造自己内心中第一名的形象。当然，判断出谁属于“合适的对手”也是一个相当考验实力的课题就是了：「彼は我、我は彼……なれど汝は我等に非ず……」</p><hr><p><strong>你之前提到的让修行速度大幅提升的王道是什么？</strong><br>首先是了解人类认知过程的基本原理。比如知道大脑在认知学习的过程中<strong>喜欢节能</strong>，这使得已存在的既有认知会排斥新认知，以避免启动逻辑思考，消耗更多能量。了解这个原理后，我们很容易知道，新知识的掌握过程需要依靠<strong>刻意练习</strong>（极致的刻意练习是实现<strong>肌肉记忆</strong>。强制练习到<strong>不假思索</strong>的地步：数理化就默写公式，编程就默写代码，写作就默写范文，先不思考，练成之后再问「为什么」），并且知道要将这些刻意练习安排在一天中的能量峰值时段（一般是下午）。比方说很多玩家在学习外语的时候会感觉很难，这是因为母语占据了主导地位，大脑使用起来能量耗费更低（旧有的肌肉记忆），于是它倾向于排斥要进行翻译动作的<strong>高能耗</strong>陌生语言，并不是因为玩家们已经过了语言学习的最佳年龄（长期作为谬误的语言学习关键期假说）。此时要做的刻意练习应该是为了建立新的“肌肉记忆”。再比如，<strong>多人组团学习</strong>比单打独斗的效率高。在学校和同学们一起学习比在家里一个人自习的效果好（顺便说一下，多数学校很少进一步在班上采取分小组学习和竞争的方式是因为这对教师的要求极高，就算是顶尖学校也很难请得到这些老师）；又比如，<strong>以教为学</strong>会让学习效率更上一层楼，尤其是成为“老师”后还逐渐能做到对“学生”进行「苏格拉底式的提问」这样的地步——掌握引导他人觉醒的实力有极大的战略意义；还比如，训练自己的<strong>恐惧和情绪</strong>成为<strong>敏感而精准的导航仪</strong>。主动利用它们，可以高效理清前进的方向（比起思考如何获得第一名，不如想想如果做了哪些事情就无法达成第一，然后努力的方向就是避开这些事情）；总之，对大脑认知特性的了解能提升具体技能的习得效率。</p><p>其次是了解世界运行的机制。比如人类的政治金融是怎样运作的；比如人类商业社会如何演进；再比如人类的工业系统如何协同；了解这些可以更好地把握技能树的方向，或者说修行的战略。因为不同的「第一名」之间战略意义是不一样的，比如下围棋的第一名，程序语言设计领域的第一名，还有对冲基金的第一名，这三者并不是同级别的「第一」。通俗来说，职业和技能有高低贵贱之分。</p><p>拥有智慧之后是<strong>保持纪律</strong>，不让各种情绪波动<strong>过于</strong>左右你修行中的决策。影响玩家情绪的因素是玩家们对眼前状况和各种行为的认知，这归根结底是一个<strong>观念问题</strong>。比如有些新手玩家被老师冤枉之后很恼火，从此不再好好学习。这样的观念如不进化，未来将不能面对攻略之道上更加艰难的关卡。当然，也要认识到人类的情绪有着无比强大的用法和潜力（例如用来探测自身的弱点所在，还有强化自身存在感等等），不能简单地排斥它，要学会和它共处，掌握释放情绪的技巧。</p><p>仅做好以上三个方面，就能难以置信地大幅提升修行的效率。但需要注意，上述方法论里所描绘的行动策略，终究远不如<strong>自身的行动</strong>本身来得重要（纪律）。类似地，更多的技能，也比不上自身的情绪管理重要。被情绪控制的自我，不是真实的自我。在这种状态下，欲望也不是真实的。</p><hr><p><strong>谁是领先玩家？什么是让修行速度进一步爆炸性提升的邪道？为什么只有领先玩家才有机会走邪道？</strong><br>领先玩家就是经济和人力资源实力雄厚的玩家（如继承了前辈们资源的玩家。他们的前辈比其他人的前辈有更多的修行成果）。使用<strong>大量资金</strong>，不计成本地在每一个环节都最大限度地节省时间和体力的方式是爆炸性提升修行速度的<strong>邪道</strong>。比如学习某门功课时，直接雇佣该课程领域中最顶级的老师和学生（对谁才是「顶级」的判断，来自于玩家的人力资源实力，可从前辈那继承）。这意味着除了高额的学费之外，很可能还得搬到该老师所在的城市，并且要靠近商业中心以便 24 小时食物供应。此外，还要找到和自己一样对第一名有执念且实力相当的同学组团以达到最好的效果等等。能花钱搞定的修行环节，绝对不浪费任何时间，这是普通玩家做不到的。</p><hr><p><strong>极限修行速度下的玩家们所面临的隐患是什么？</strong><br>战略错误。</p><p>修行方向一旦出现失误，修行速度越快越悲剧，<strong>突破某个临界点之后，不论多么努力，哪怕是彻底的自我否定，也几乎不可能重新回到攻略的主线，只能沦为不时阻碍和恶心攻略组的「NPC 玩家」</strong>。比如在职业教育和高等教育之间的取舍，或是在社会传送带（当前的学校旨在把我们训练成工业系统里的螺丝钉，整个教育系统相当于传送带：小学、中学、大学、研究生、博士……）和创业之间的取舍，就很容易出现这种一失足成千古恨的情况。另一个更加常见的情况是上文提到的<strong>刻意练习</strong>。刻意练习能让我们以极快的速度在所修行的领域里推进，不过如果你刻意练习的技能或领域在战略上是悲剧的，后果可不是浪费时间这么简单。</p><p><strong>战略错误</strong>是当前时代隐形的残酷之一，也是让所有追求第一名的玩家都极度恐惧的事情。这就是为什么有些玩家并不急于以极限速度向第一冲刺。耐心看清楚局势再加速修行也不迟（例如玩家蒋施主中学时代就用力<strong>过猛</strong>，形成的写作习惯根深蒂固，导致进入工业界后还在以高中议论文作文的水平写东西）。当然，更多的玩家是由于无知和懒惰，没在一开始就满速修行，从而不知不觉避免了危机。</p><p>执着于第一的玩家为了能在<strong>第一时间</strong>承认和纠正自己战略错误，会<strong>义无反顾</strong>地舍弃金钱，地位，尊严，荣耀，甚至是多年的修行积累。十年一剑，当弃则弃。</p><p>在哪个城市长期居住是一个战略，练习魔兽争霸（20世纪初的一款竞技游戏）的对战技术也是一个战略。玩家们为了各自的战略，甘愿付出数年，乃至十数年的心血。或背负贷款，或日夜煎熬。然而到了<strong>是非成败转头空</strong>的那一刻，是否能果断放弃以止损呢？贷款没还完的房说卖就卖？游戏圈的伙伴和荣耀当弃就能弃吗？作为个人的你能从容放弃，守护他人的你又如何面对责任和期待呢？</p><p>惯性付出的玩家们继续惯性前行。然后青山依旧，然后几度夕阳，然后渔樵江渚，然后尽付笑谈……个中残酷，当局者清而不能自拔。</p><blockquote><p>We are the victims of our own success.</p><footer><strong>Ross Douthat</strong></footer></blockquote><p>玩家们被自己的成功<strong>束缚</strong>着，难以踏出进入新世界的那一步。这正是「<strong>深度优先</strong>」策略的隐患：由于太成功，因此过于依赖自己的优势，于是在安全感的作用下难以离开自己的专业去尝试学习新技能。</p><p>了解世界运行的机制可以极大程度避免战略错误的发生，再就是遇到好老师触发<strong>觉醒</strong>。不过归根结底，在「路线正确」，或者说「路线虽不对，但后果在可承受范围内」这件事上，<strong>运气</strong>还是关键。所以，要通过提高我们经历的<strong>丰富程度</strong>，来提高我们的<strong>胜率</strong>。这就是「<strong>广度优先</strong>」策略的理念。</p><blockquote><p>天赋使你有学习的欲望，运气则让你有学习的资本。但天赋某种意义上也是运气。</p><footer><strong>杨一工</strong></footer></blockquote><p>持续行动方能拨云见日。无论前方再怎么“风烟雾雨青山暮，不辨茫茫来去路”，务实的行动始终是<strong>最大限度</strong>打开局面的最佳方式。<strong>谨慎试错，但不要害怕试错</strong>。</p><hr><p><strong>你多次提到的「觉醒」是个什么样的经历或状态？</strong><br>「<strong>初阶</strong>觉醒」说的是玩家有能力明确<strong>自己想要</strong>什么，对当下行动的<strong>最终目的</strong>有着清醒认识。这里的「最终」可以是未来 5 年这样的短期目标，也可以是一生的终极目标。</p><p>「明确目标」不仅仅只是知道而已，要经得起残酷的现实对该目标的检验（比如你准备买房，会面临「为什么不租房」，「为什么不投资变现代价更低的股票或基金」等等问题。多问自己：“<strong>然后呢</strong>？”）。玩家们要在各种<strong>不断进化</strong>的需求和<strong>伪</strong>需求之间挣扎探索，直到能毫不犹豫且逻辑清晰地<strong>舍弃</strong>主线以外的支线。无论诱惑有多大，阻力（有时是亲朋好友的关心和爱）有多大。</p><p>普通玩家和觉醒者之间的差距主要体现在「<strong>判断</strong>」，而不是「<strong>执行</strong>」上。举例来说，做题、考试、持续训练，进而掌握一项技能。这样的事多数人都会做（尽管执行力也是一道门槛）。但是当 100 种甚至更多的技能和策略摆在面前，到底要选择哪种，却极少有人能判断。另一些时候，觉醒玩家还会创造出市面上没有的第 101 种技能和策略来实现自己的需求。具备这样级别的判断力，才算实现「<strong>初阶</strong>觉醒」。初级玩家甚至不知道市面上 100 种技能的存在。</p><p>「<strong>进阶</strong>觉醒」指的是知道<strong>别人想要</strong>什么。这不仅要求强大的「<strong>同理心</strong>」，还要求玩家有足够的「<strong>生活阅历</strong>」，必要时甚至要<strong>引导</strong>对方的思路，因为他人有时候自己也不知道想要啥。没有生活阅历<strong>支撑</strong>的共情是脆弱而且危险的，就像是出于“人道主义”和“正义”来无脑<strong>反对战争</strong>一样。「进阶觉醒」的具体表现是玩家知道如何拆分任务、处理冲突，步步为营地实现一个完整的项目作业。脱离嘴炮、耐心克制，灵活应对残酷的<strong>基层</strong>和痛苦的<strong>实践</strong>。前文提到的「<strong>在所有对决中都能保持余裕</strong>」说的就是这个。</p><p>这意味着玩家们赖以前行的思考方式（有时也被称为思维模型，方法论，或者观念）发生了翻天覆地的更新（是 upgrade 而不仅仅是 update），尤其是针对目标的观念发生变化。玩家们的情商——也就是<strong>识别</strong>情绪的能力（无论是识别自己还是识别他人），以及掌控情绪的能力（无论是掌控自己还是掌控环境的情绪），极度依赖进阶觉醒。情绪，是位于顶点的攻略组玩家都会感到棘手的东西。幸运的玩家无论身处怎样的险境，都能顺利地用行动响应自身和他人的情绪，让情绪更好地<strong>辅助</strong>自己前行。</p><p>想起某聚会上大家说起<a href="https://www.wikipedia.org" target="_blank" rel="noopener">维基百科</a>募捐的事，有人嘲笑在场的捐款者：“傻X，你们知不知道维基百科的基金会其实特有钱？他们比你们富多了！”……没觉醒的玩家们很难对此进行体面的回应，也不好控制这一刻自身情绪的波动和下一刻自身的行为。</p><p>类似的案例还有情侣逛街遇到女方的前任迎面一句「我玩剩下的垃圾你还要？」该如何回复等等……</p><p>总的来说，玩家们在修行过程中会逐渐总结出属于自己的各种思维模型，这些模型深深地影响着他们的决策树，进而<strong>左右命运</strong>。还有就是，不同思维模型的重要级别是不一样的。我们越是赖以生存或前行的思维模型，重要级别越高，越能迎来「觉醒」。觉醒之后，玩家的行为模式会发生巨变。</p><p>发生觉醒的关键是要<strong>遭遇契机</strong>（比如某本书，某个老师，或某个事件），并且在契机来临之前完成<strong>足够的积累</strong>（量变是质变的前提）。两者缺一不可，尽管契机是<strong>更重要</strong>的一个因素。另一个现实是，最优秀的教师门下也只有小部分学生能实现觉醒。因为学生之间的<strong>积累有差异</strong>。这种差异不仅仅是<strong>量</strong>上的，而且是<strong>质</strong>上的（学生甲乙两人掌握的知识技能一样，然而面对同一契机最终只有甲实现了觉醒，这是因为甲心中<strong>积累的疑问</strong>和乙不一样，甲和乙所追求的<strong>精进方向</strong>不一样，两人「<strong>心目中的第一名</strong>」不一样）。比如在基因层面防止哺乳动物近亲结合的「青梅竹马保护」和「公司财务报表的五项关键指标」这两个思维模型就能使小部分玩家迎来觉醒，但对绝大多数人没啥用。</p><p>觉醒之后的玩家们，攻略实力的精进速度会达到一生中的巅峰状态。</p><hr><p><strong>「新手」，「专家」和「神」这三个不同的修行境界分别是怎样的？</strong><br>对某项具体技能来说，比如使用 Java 语言编程，零基础的玩家被归为「新手」，技艺精湛的玩家就是「神」，介于两者<strong>中间</strong>的就是「专家」。作为一个参考，在人类工业体系里完成日常工作的玩家基本上都介于「新手」和「专家」之间。该中间态境界有时也被称为「高级新手」。在这个意义上，玩家们无须成为专家，就能胜任大部分工作（拜工业化社会里标准化风气的盛行所赐，大部分领域里，零基础的玩家经过短期标准化培训就能上岗）。你可以认为这是人类工业化时代<strong>可悲</strong>的地方，也可以认为是其<strong>伟大</strong>的地方。</p><p>很多领域都能观察到「高级新手」，比如英语老师，比如设计师，比如程序员（工程师？）。</p><hr><p><strong>日常玩家也只是「高级新手」？那「神」的领域简直难以想象。「神」有弱点吗？超越「神」的第四隐藏境界如果存在，是什么呢？</strong></p><p>玩家们将在这个问题上遭遇攻略生涯中<strong>最重要、影响也最深远</strong>的一次思考：是「<strong>深度优先</strong>」，还是「<strong>广度优先</strong>」？是「<strong>维护稳定</strong>」还是「<strong>持续冒险</strong>」？</p><p>如果不考虑身体健康的因素，「神」的弱点就是强大实力所形成的<strong>习惯</strong>，或者说<strong>依赖性</strong>。人若是精通了某种“技能”，使用它的过程中会产生愉悦感、安全感，以至于逐渐依赖它，迷恋它，向它臣服，对它不假思索，对它不可自拔。</p><p>「习惯」会自动过滤掉所有被认为“无用”的信息和选项以提高玩家行动效率。就像人的大脑会让环境音变成背景音，以让我们维持注意力一样。由于最精要的思考方式和经验已经完全融入自身的血液，<strong>在没有外界干扰的情况下</strong>，神级玩家可以完全依赖自己的习惯（直觉和肌肉记忆）。你很难忍住不依赖它，你甚至<strong>意识不到</strong>你在依赖它。</p><p>专精一项技能，达到神级水平，就是隐患重重的「<strong>深度优先</strong>」策略。该策略下，玩家们的<strong>技能树</strong>缺少多样性，进而<strong>缺少韧性</strong>，异常脆弱。比如神级足球运动员只会踢足球；神级特级教师只会教语文知识，还是关于如何考高分的这类语文知识……一旦环境变化，神级玩家将难以应对（想想当离开俱乐部和学校后，他们何去何从？考公务员？）。</p><p>即便环境稳定，神级玩家也会因为太过专一，而没法突破自己实力的天花板，让自己变得更好。</p><p>（突然想起相机公司的胶片技术世界顶尖、利润丰厚，以至于完全没有动力探索成像仍然糟糕的数码技术线路）</p><blockquote><p>如果你“精通乐理”，你会对当世的乐理知识侃侃而谈。不会、也不能容忍对此理论体系本身产生质疑。</p><footer><strong>Ian</strong></footer></blockquote><p>突破「神」的境界会重新成为「新手」，所以可以认为<strong>「新手」就是第四隐藏境界</strong>。这是一个跳过「神」、在其之后的境界。它所实践的是广受鄙视但充满活力的「<strong>广度优先</strong>」策略。</p><p>「广度优先」要求掌握<strong>多</strong>领域的知识和技能，但它并非<strong>纯粹</strong>追求数量，而是要通过「数量」来确保尽快掌握那些可以作为<strong>基石</strong>的战略级领域。广度优先的另一意义在于开拓玩家新的<strong>知觉</strong>和视角。这会潜移默化地提升玩家的判断能力（见闻色？），进而促发觉醒。</p><p>具备战略意义的技能部分取决于<strong>时代和周遭环境</strong>，部分取决于玩家要实现的<strong>攻略</strong>，所以需通过不断实践来建立这方面的认知。比如，通常被认为是战略级技能的金融和财务知识，在我这完全比不上<strong>搭讪技能</strong>那么重要。不过这是属于我的实践结论，有其<strong>时空坐标</strong>，不一定适用其他玩家。</p><p>简言之，攻略组们要增加实践的广度，来提高遭遇战略级技能的<strong>概率</strong>：「提高生命<strong>密度</strong>，进而提升<strong>胜率</strong>」。</p><p>横看成岭侧成峰，除了技能树需要韧性外，玩家的进一步成长也需要多领域、多元化的<strong>不同视角</strong>，以做到足够地<strong>开放</strong>、<strong>敬畏</strong>和<strong>自律</strong>。因为在「广度优先」的实践中，焦虑和欲望会丰富到混沌的程度，并逐渐开始<strong>产生激烈的冲突</strong>。欲望与欲望间的对抗让玩家们<strong>被迫</strong>严肃考虑其中的取舍。而无数的焦虑，则让玩家们<strong>被迫</strong>适应危机。在这数不清的「被迫」里，玩家们才得以了解自己、接纳自己，<strong>找到</strong>各自的羁绊之地。</p><p>位于攻略组顶端的玩家，心中都容纳着两套以上<strong>截然相反</strong>的认知体系而仍能——或者说<strong>才能</strong>（因为相互制约）——行事自如。</p><blockquote><p>白洁的主卧工字墙、姜美晨的餐桌互动朝向、王洁燕的厨房采光、李冰的缩小主卫和我的异形落地镜……靠着这些多元视角，最终在实用性的镣铐下成功地维护住了全屋良好的空间状态。</p><footer><strong>2022年03月23日</strong></footer></blockquote><p>得益于 20 世纪初中国这个持续工业化的和平时代，「广度优先」的难度大大降低了。玩家们不必样样精通，只需要达到前文提到的「新手」或「<strong>高级新手</strong>」的水平即可。当然，这仍然要比「深度优先」<strong>难得多</strong>。比如困难之一就是提供「广度优先」所需要的<strong>体力</strong>。困难之二比较隐性，就是有效学习一项战略级事物的时候会进入某种专注状态，这种状态下，你会<strong>全面笼罩</strong>在当前知识树下，<strong>不允许</strong>被其他知识打断，俗称 <a href="https://www.ldoceonline.com/dictionary/in-the-zone" target="_blank" rel="noopener">in the zone</a> 。比如练习一首钢琴曲的时候，由于非常专注，一天时间很快会过去，然后又是一天，然后一个月，然后半年……这种状态下，如果半中间去再研究个计算机程序语言设计，那钢琴的状态就会被打断，之前的练习有可能白费。「<strong>广度优先</strong>」由于涉及领域很多，需要维护的这样的状态也就会很多，十分考验玩家<strong>应对信息流的余裕</strong>。</p><p>无论我们精通了何种技能，都应该对此保持冷静和警惕，就像演奏乐曲的时候不应该被乐曲的情绪影响一样。冰冷之境才是避免节奏失控之道。</p><blockquote><p>At your highest moment, be careful. That’s when the devil comes for you.</p><footer><strong>Denzel Washington</strong></footer></blockquote><p>「工具切换」是重新成为新手的经典场景：从汽油车双踏板切换成电动车单踏板逻辑的司机（也许从骑马切换成汽车的质变更加有说服力），从 Windows 切换到 MacOS 的个人电脑用户，从中文世界切换到英文世界（甚至再切回中文：中文和中文其实也是两个世界）的玩家……这些案例都包含着新习惯与旧习惯、新领域和旧领域之间的冲突。</p><p>另外要重点说明的是，<strong>学习新知识是一项高风险的冒险行为</strong>。要有「投入大量资源却毫无收获」的觉悟。多数情况下进入新领域的尝试是浪费时间甚至是危险的，神所依赖的习惯<strong>在其活动范围内</strong>也几乎是正确的（毕竟是经过千锤百炼重重考验才建立起的习惯）。继续待在自己的舒适区是理智的选择。可是，攻略组们需要做出<strong>取舍</strong>决策的时刻<strong>必定</strong>会在一切准备妥当之前到来：是继续做“正确”的事？还是做些“不一样”的事？为了追求更好的认知、更自由地取舍前行，攻略组们即使心怀恐惧、遍体鳞伤，也会无数次投入资源（时间金钱）跨入新的领域。</p><p>「神之后的新手」有着比「神」更具穿透力的<strong>敏锐</strong>，同时还拥有「新手」的<strong>好奇心</strong>和可塑性。他们甚至能在「神」和「新手」这两种思考模式间<strong>自由而精准地切换</strong>。</p><p>举个例子，比如「矩阵是什么」这个问题。是的，玩家们都知道矩阵是一组列或行向量组成的展开式子，但（模式切换）为什么偏偏是二维展开？为什么不能是三维？四维？为什么矩阵的乘法规则要如此规定？这种能实现各种神奇运算并得到正确结果的诡异乘法（模式切换）仅仅是凑巧？还是被其背后某种本质所必然决定？那么这个本质是什么呢？矩阵的「相似」又是什么意思？哦？你说人们定义 <script type="math/tex">P^{-1}AP</script> 矩阵与 <script type="math/tex">A</script> 矩阵相似？（模式切换）为何要这样定义？该定义也许是「神」能接受的解释，但这不是「神之新手」们所满意的答案。</p><p>为什么要这样定义？背后的本质所描述的规律是什么？更具体地说，那些作为人类而不是公式性质的<strong>解释</strong>，那些小白也能瞬间领会的、在物理世界中的<strong>类比和映射</strong>才是「神之新手」所追寻的东西。</p><p>面对这些看似简单的问题，很多神级玩家，最后也只能用「就是这么规定的，记住就好」这样的话语来<strong>敷衍</strong>（「能量守恒定律为什么是“对”的？」「市场有效假说为什么是“正确”的？」等问题常常能诱导出这类<strong>敷衍</strong>）。可是，只有回答了这些问题，我们才能产生真正的「理解」，获得这一学问的关键性<strong>知觉</strong>。</p><p>如果有缘跟着「神之新手」级别的玩家一起修行，至少可以少走 20 年的弯路。这不仅因为<strong>第四境界</strong>的玩家本身很强，让我们的镜像神经元不断发挥作用，还因为他们会进一步作为节点，将我们与更加优秀的的资源连接起来——比如更优秀的人，更先进的装备和观念——获得获得难以想象的指数级成长。强烈建议带着宗教乃至邪教的信仰<strong>紧跟</strong>这些神之新手（没有信仰谈不上紧跟）。</p><hr><p><strong>咳咳……你说了那么多，我作为一个中学生还是各种看不懂，也懒得看。过几个月马上高考了，你直接说一个靠谱的攻略吧。</strong><br>大学尽量选北上广，地理位置离钱（资本 + 人力资源）越近越优先，专业次之。可以的话，避开文科类专业。</p><hr><p><strong>呵呵，感觉不靠谱。</strong><br>哦？你是毛老师吧？</p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Miscellaneous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杨一工连载第 0 话：连载前的一些话</title>
      <link href="/2018/12/24/yang-yi-gong-series-0/"/>
      <url>/2018/12/24/yang-yi-gong-series-0/</url>
      
        <content type="html"><![CDATA[<p>对于处在学生时代的修炼者们来说，眼前伴随着青春期的这次蜕变是一次有多倍数经验奖励的修行机会，少数有缘的玩家更是会在此次蜕变中完成「觉醒」的过程。错过的话，人生下一次同样级别的蜕变，要等到个人的创业时期了。</p><p>现实中并不是每一只井里的青蛙都打算跟随主流的蛙群奋力起跳，它们可能只希望忠于自己，推崇淡泊宁静，或者对井口之外不过是更大的一口井之类知无涯生有涯的低层级（Low Level）困惑耿耿于怀。虽然想明白非主流青蛙的这些哲学困惑对于战斗在最前线的攻略组玩家们来说是第二阶觉醒的必要条件之一，也是很重要的一环，然而在第一阶觉醒之前，搁置它们在效率上才是明智的选择。本连载即将分享的方法论是<strong>专门针对攻略组玩家的</strong>，也就是那些<strong>不满足于仅仅只是奋力起跳</strong>的青蛙们。希望能让身处蜕变时期的他们以更高的概率迎来属于各自的觉醒契机。</p><h3 id="遵循「能量守恒定律」的勇气"><a href="#遵循「能量守恒定律」的勇气" class="headerlink" title="遵循「能量守恒定律」的勇气"></a>遵循「能量守恒定律」的勇气</h3><hr><p>在修行的多数时候，要学的东西看似很多，实际上通常只要掌握基本的几项原理就可以了，其他的技能都能通过这些基本原理迅速学会。所有这些原理中最重要的，或者说最重要的之一，就是「<strong>行动才能打破现状</strong>」。</p><p>比起探索最佳的英语学习方法，先死记硬背再说；比起思考线性代数到底有什么用，先学一波再想；荒野之息里未知的庞然大物，先上去挑战一下再说……无论内心是否坚定，当玩家们踏出了第一步，远山近水便为之分明，亭台楼阁也会为之浮现。</p><blockquote><p>胆怯的智慧还在犹豫的时候，勇敢的无知已经开始行动了。</p><footer><strong>索尔·贝娄</strong></footer></blockquote><p>上面的引用文字也许不像网上所传那样出自诺贝尔文学奖得主索尔·贝娄（Saul Bellow）的作品（将来找机会问一下李海鹏），可无论如何它说得很精彩，每个人都能看到自己想看到的境界。对一部分特别忙碌的玩家来说，这句话表达了一种行动至上的务实态度。在这些人眼中，世界上大多数原理是靠<a href="https://www.bilibili.com/video/BV1SQ4y1q7Rs" target="_blank" rel="noopener"><strong>信仰</strong></a>证明的，包括人们熟知的「能量守恒定律」。</p><p>要理解玩家们的这种<strong>务实</strong>，我们需要知道「演绎（deduction）」和「归纳（induction）」这两个重要概念。类似「金属能导电；铜是金属；所以铜能导电」这样的，只要前两个条件成立，结论必定<strong>无懈可击</strong>地成立的推理过程就是演绎。而「能量守恒定律」这样的<strong>经验式</strong>推理则是典型的归纳：因为过去的实践都没有违背能量守恒定律，所以它未来也会一如既往地成立。显然，「归纳」是玩家们在难以实现「演绎」后的某种“妥协”。在数学领域的证明题中使用「归纳」将是〇分，与此相对，物理化学老师们对归纳推理通常没有一丝的心虚。</p><p>尽管信仰和信仰是不一样的，熟练区分「归纳」和「演绎」的玩家们还是会很快意识到，相信能量守恒定律和相信神创论没有什么本质的区别。坦然面对这个真相是不容易的，它暗示了演绎的<strong>绝对正确性</strong>难以实现。现实世界的大多数情况下，玩家们要解决的问题<strong>只能依赖归纳推理</strong>，这迫使其中的一些玩家最终在「正确的安全感」和「确实的行动」之间不得不“勇敢”地选择后者，将更多的时间和精力用来依照这些原理做事，而不是探究它们的对错——这是个需要做好相应觉悟的选择。</p><blockquote><p>Never let yourself be diverted either by what you wish to believe, or by what you think would have beneficent social effects if it were believed, but look only and solely at what the facts are.</p><footer><strong>Bertrand Russell</strong></footer></blockquote><h3 id="选择什么，不选择什么"><a href="#选择什么，不选择什么" class="headerlink" title="选择什么，不选择什么"></a>选择什么，不选择什么</h3><hr><p>行动，意味着我们要有所取舍。在现实的修行中，虽然「概率」这个概念也难逃「归纳」的范畴，部分理智的玩家们仍然开始使用它作为前行的原则——做“大概率”正确的事。把「概率」作为目前人类所能做到的极限，且承认这个极限在可预见的将来不会发生改变，是攻略组玩家们不断修炼自己<strong>思维模型</strong>的重要原因：<strong>思维模型</strong>造成了对「大概率正确」的认知差异。</p><p>选择什么，不选择什么，会使玩家之间会随着时间呈现出天上人间的差距，此差距很难依靠单纯的修行来缩小。比如 2008 年选择买房的玩家比努力工作的玩家在之后的十年间获得的资源更多。这是因为房子在这十年里将积累的是一个城市、一个省、一个国家、乃至一个时代所有玩家的努力，个人努力自然无法相提并论。你大可以认为两种选择背后的代价和觉悟所带来的取舍难度让决策双方不像表面看上去的那样高下立判，但就结果来说，选择比努力的效率要高一点点，这基本上已经是玩家们的共识。</p><blockquote><p>确实，你们付出的努力并不会对当下的你有什么实质性的帮助。所以看到别人做出成功选择我们很容易忽视努力的真谛。因为真正的改变，会出现在下一个回合的选择中。你会解锁比别人更多的选择。这，才是努力的意义。</p><footer><strong>Mr厉害</strong></footer></blockquote><p>「<strong>做选择的能力</strong>」贯穿攻略的全程，早点了解取舍的重要性和基本原则可以少走大量弯路。不过在我们启程之前，还有三点想说明一下：</p><ul><li><p>「<strong>实践</strong>」后产生的认知才是真正的认知。他人的经验和攻略作为一种「归纳」，当转化为视频和文字之类的「副本」，无论多么精美，所传递的信息量几乎都会不可避免地大幅度<strong>缩水</strong>。「非实时」只是部分原因，<strong>更关键</strong>的地方在于，如果没有训练和实践的积累，你很难通过单纯的思考或者他人的叙述<strong>清楚认知</strong>该「归纳」背后所隐含的代价是什么。这里的代价包含了其他玩家<strong>得出</strong>这个「归纳」所付出的代价（该归纳只是廉价的网络段子？还是烧了五亿的血泪？或是所谓行业的传统？），还有<strong>违背</strong>这个「归纳」将付出的代价。</p><p>此外，不同玩家对同样代价的<strong>承受能力</strong>是不一样的。比如五亿的损失对普通玩家来说是噩梦，而对某些玩家来说只是毛毛雨。又比如，有些玩家被人误解就会情绪失控，另一些玩家被千万人误解也不会影响他们的前行状态（顺便说一下，技艺精湛的神级玩家通常属于两个例子中情绪失控的前者，因为他们敏锐细腻的感受力的<strong>副产品</strong>就是情绪的高波动性）。这也是为什么高效的修行要紧跟着<strong>活生生</strong>的「人」，而不仅仅是他们的文字或视频。跟着「<strong>人</strong>」才能最直观地感受对方的实践。他们的情绪、他们的余裕、他们的一举一动和他们的不动，都比「副本」的指引更为有效。</p></li></ul><blockquote><p>……这就像你试图告诉一个审美还停留在一身名牌商标的乡镇企业家他的形象很土，就像你试图说服一个很激动的爱国小将抵制日货可笑，就像你试图跟一个幼儿解释糖不是世界上最好吃的东西。</p><p>这样做不仅无效，还可能很引起对方的愤怒和哭闹。</p><p>这不是几句话、一篇文章能解决的，用黄章晋老师的话说——中间可能隔着几十本书的信息量，或者是十几年的成长过程。</p><footer><strong>Stephen Chu</strong></footer></blockquote><ul><li><p>「<strong>执迷不悟</strong>」是常态。资深玩家们多次强调要注意的坑，新人们即使被反复洗脑之后仍旧会毫不犹豫地跳下去，这是很正常的事情，愿双方都能对此保持平常心。</p><p>出现这类情况的原因很多，除了自身的固有认知外，前辈资深玩家们的观点之间通常也存在微妙或者巨大的分歧。然而<strong>必须要做出选择</strong>的时刻总是会<strong>提前</strong>到来，新手未必能<strong>及时</strong>消化不同观点；再比如资深玩家的建议和人性有冲突，新人难以很好地控制自己的欲望等等。</p><p>值得一提的是，这并不代表前辈们的耳提面命毫无用处。它的作用在于，新人跳坑之后会清楚地想起，进而快速知道<strong>坑在哪</strong>、原理是什么、以及哪些资深玩家<strong>其实只是半吊子</strong>。倘若没有前辈的提点，新人们顶多只会察觉自己一直“掉血”，无法第一时间知道“伤害”来自哪里；</p></li><li><p>「<strong>信任</strong>」是一种威力巨大的修行机制，能<strong>最</strong>大程度提高前行的效率。与此同时，它的<strong>风险</strong>和它的威力一样可怕。这体现在弱者的实力<strong>不足以承受</strong>信任强者所需要付出的<strong>代价</strong>。</p><p>信任是有代价的。信错人只是其中一小部分潜在代价。主要代价是无论什么样的行动都会有失误的风险，<strong>风险是永远存在的</strong>。风险造成的损失对于强者来说是毛毛雨，而对相信强者的弱者则是致命打击（想想不同玩家对当前 5 亿人民币损失的承受能力吧）。只有具备足够的实力来<strong>承担损失</strong>，才可能有勇气去相信。不然只能做到部分相信，效率也因此大打折扣。</p><p>有些玩家会认为无知也能产生勇气。正所谓「胆怯的智慧 vs. 勇敢的无知」，他们觉得如果意识不到存在损失的风险，也能做到大胆前行。但其实这种情况一旦出现损失，很可能会导致今后<strong>再也没有</strong>勇气和能力去信任其他玩家，还挺麻烦的。还不如保持观望畏手畏脚的「胆怯智慧」。</p><p><strong>具备足够实力，就会敢于信任、有能力信任，进步也会神速。</strong>历史进程这东西，错过就再等几十年。反之就会畏手畏脚，陷入瓶颈，再难精进。说白了就是有实力才能承受试错损失，继而勇往直前。</p></li></ul><blockquote><p>除了最优秀的玩家之外，多数人都是跟着时代走的。这个时代没有…那就是没有。</p><footer><strong>施政</strong></footer></blockquote><h3 id="三个「X」"><a href="#三个「X」" class="headerlink" title="三个「X」"></a>三个「X」</h3><hr><p>接下来连载的三个<strong>有争议</strong>的话题，会对玩家们的行动提供相应的方法论，或者至少引发对方法论的思考。这些话题本质上都是关于取舍的——关于我的取舍，关于我的取舍原则和经验。它们毫无意外属于「归纳」的范畴。它们的实用性需要大家在<strong>实践</strong>中逐渐领会。</p><p>在连载的第一个话题「<strong>牛X</strong>」里，我会聊聊为什么说「牛X」是一种幻想？让修行速度大幅提升的王道是什么？为什么让修行速度进一步爆炸性提升的邪道只属于领先玩家？处在极限修行速度下的玩家们所面临的隐患是什么？在使用「新手」，「专家」和「神」这三个境界来描述的修行中，超越「神」的第四隐藏境界能给玩家们怎样的启发？为什么对身处修行期乃至事业期的玩家们来说，「纪律」是比「智商」更重要的品质？</p><p>连载的第二个话题是「<strong>装X</strong>」。其中将介绍「装X」的本质是什么？玩家们为什么要「装X」？为什么多数玩家只能装出低水平的「X」？为什么装 40 分钟的「X」合理的准备时间是一个星期？疲于日常的我们为什么会有一星期的准备时间？整个学生时代，或者说所有修行的日子中被严重低估以至于多数玩家完全忽略了的重要修炼项目是什么？</p><p>第三个关于「<strong>傻X</strong>」话题的连载里会提到，为什么说「世界上最大的不平等是智力上的不平等」？为什么「清华北大哈佛耶鲁也是百分之八十的傻X」这样的言论即使是真的，选择考入这些高等学府依然是得知真相后的玩家们明智的选择？为什么「傻X」浓度高达百分之八十的玩家群体非但没有走向灭亡，反而还能一起合作让经济持续增长几个世纪？肚子里已然能撑船、能开飞机、能装航空母舰的宰相级玩家，为什么即便能得体应对日常「傻X」，当面对在至暗时刻帮助过自己的「恩人型傻X」、自己一直视为信仰或灯塔的「偶像型傻X」、还有得过诺贝尔奖的「权威型傻X」时，还是会失态，甚至崩溃？为什么有些顶级玩家不承认世界上存在「傻X」？面对差得让人时刻想说脏话的沿途风景，只在意“远方”的攻略组玩家们如何在浮躁中取舍和自处？玩家们什么时候应该去看心理医生？</p><p>最后，祝各位玩得开心~</p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Miscellaneous </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神经网络入门（更新中）</title>
      <link href="/2018/09/26/intro-to-neural-network/"/>
      <url>/2018/09/26/intro-to-neural-network/</url>
      
        <content type="html"><![CDATA[<p>神经网络（Neural Network）是深度学习（Deep Learning）领域里的一种计算方法</p><hr><h3 id="基本神经网络"><a href="#基本神经网络" class="headerlink" title="基本神经网络"></a>基本神经网络</h3><p>TODO<br>由于非线性方程是通用的函数逼近方法（非常多的函数的值都可以使用多项式来逼近，比如「根号 2 」的计算就是计算机通过计算泰勒展开完成的，而泰勒展开就是一种非线性方程），所以神经网络的隐藏层要使用非线性方程来搭建</p><p>神经网络的隐藏层里的非线性方程是由<strong>一个线性方程</strong>加上<strong>一个非线性激活函数</strong>组合而成</p><hr><h3 id="卷积神经网络（Convolutional-Neural-Network）"><a href="#卷积神经网络（Convolutional-Neural-Network）" class="headerlink" title="卷积神经网络（Convolutional Neural Network）"></a>卷积神经网络（Convolutional Neural Network）</h3><p><strong>卷积神经网络</strong>常用于解决图片分类的问题（image classification）。</p><p>数字化的图片是由像素组成的，而每一个像素都有自己的颜色（比如若用 RGB 表示，单个像素具有「红」，「绿」和「蓝」 3 个颜色通道），这样，一张图片就能表示成一个三维数组（Width, Height, ColorChannels）</p><p><strong>卷积神经网络</strong>的目标是让代表图片的三维数组在经过一系列的计算后，数组变得 much deeper，且 less wide and less high</p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow 介绍（更新中）</title>
      <link href="/2018/09/21/TensorFlow/"/>
      <url>/2018/09/21/TensorFlow/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.tensorflow.org" target="_blank" rel="noopener">TensorFlow</a> 是 Google 的一个开源深度学习框架</p><hr><h3 id="安装-TensorFlow"><a href="#安装-TensorFlow" class="headerlink" title="安装 TensorFlow"></a>安装 TensorFlow</h3><p>可以使用 <code>pip</code> 安装（见<a href="https://www.tensorflow.org/install/" target="_blank" rel="noopener">这里</a>），也可以用 <code>conda</code> ，这里选用 <code>conda</code> 的安装方式。至于 conda 是什么？如何安装和配置？请参考<a href="/2018/05/27/set-up-anaconda/">安装和配置 Anaconda</a></p><pre><code class="lang-bash"># 最左边的 (ai-dl) 表示当前处于虚拟开发环境 ai-dl 中(ai-dl) $ conda install -c conda-forge tensorflow# 查看当前的虚拟开发环境中存在的 tensorflow 以及其版本(ai-dl) $ conda list | grep -ir &quot;tensorflow&quot;(standard input):tensorflow       1.10.0        py35_0    conda-forge</code></pre><p>测试 TensorFlow ，如果安装正确，Console 会打印出 “Hello, world!”</p><pre><code class="lang-python">### tensorflow_test.py ###import tensorflow as tf# Create TensorFlow object called tensorhello_constant = tf.constant(&#39;Hello World!&#39;)with tf.Session() as sess:    # Run the tf.constant operation in the session    output = sess.run(hello_constant)    print(output)</code></pre><p>PS:<br>有可能会遇到以下输出信息，这是因为你的 CPU 有线性加速功能 <strong>AVX2 FMA</strong> 而当前安装的 TensorFlow 不能使用它们（GPU 才能发挥 TensorFlow 的威力，所以 TensorFlow 不太支持 CPU），具体可以参见<a href="https://stackoverflow.com/questions/47068709/your-cpu-supports-instructions-that-this-tensorflow-binary-was-not-compiled-to-u" target="_blank" rel="noopener">这里</a></p><pre><code class="lang-bash">(ai-dl) $ python tensorflow_test.py2018-09-21 23:20:36.754440: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMAb&#39;Hello World!&#39;</code></pre><hr><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><ul><li><p><a href="https://www.tensorflow.org/api_docs/python/tf/placeholder" target="_blank" rel="noopener"><strong>tf.placeholder</strong></a></p><pre><code class="lang-python"># TensorFlow uses arrays rather than tuples. It converts tuples to arrays. Therefore [] and () are equivalent.# Placeholder with [] shape takes a single scalar value directly.w = tf.placeholder(dtype=tf.int32, shape=(), name=&quot;foo0&quot;)x = tf.placeholder(dtype=tf.int32, shape=[], name=&quot;foo1&quot;)# Placeholder with [None] shape takes a 1-dimensional arrayy = tf.placeholder(dtype=tf.int32, shape=[None], name=&quot;foo2&quot;)# Placeholder with None shape can take in any value while computation takes place.z = tf.placeholder(dtype=tf.int32, shape=None, name=&quot;foo3&quot;)# Example# 创建 rank 4（维度为 4）的 Tensor# None 代表该维度可以是任意的数值，在深度学习神经网络中该维度通常代表 batch 的数量 - batch 的数量是超参数 batch size 决定的，因此是可变不固定的  inputs_real_img = tf.placeholder(tf.float32, [None, image_width, image_height, image_channels])# 创建标量（scalar）的 Tensorlearning_rate = tf.placeholder(tf.float32, [])</code></pre></li><li><p><a href="https://www.tensorflow.org/versions/r1.0/api_docs/python/tf/reshape" target="_blank" rel="noopener"><strong>tf.reshape</strong></a><br>MNIST 数据集是由 28px * 28px 单通道图片组成。tf.reshape 函数把 28px * 28px 的矩阵转换成了 784px * 1px 的单行向量 x。tf.reshape()  中 <code>-1</code> 的解释参见<a href="https://www.tensorflow.org/api_docs/python/tf/reshape" target="_blank" rel="noopener">官方文档</a>或<a href="https://blog.csdn.net/zeuseign/article/details/72742559" target="_blank" rel="noopener">这篇博客</a><br>简单来说就是 -1 这个位置的维度由 reshape() 函数自动计算出，到底是多少取决于其他维度的数据，只要所有元素的总和等于前面 x 的元素总和即可 - 可以看到，张量（tensor）x 中一共有 28 * 28 * 1 = 784 个元素，而 n_input = 784 ，所以 -1 这个位置的维度值为 28 * 28 * 1 / n_input = 784 /784 = 1，进而 x_flat 的维度就是 [1, 784]<br>更多关于 Shape 的知识细节可以从这篇延伸阅读开始：<br><a href="https://pgaleone.eu/tensorflow/2018/07/28/understanding-tensorflow-tensors-shape-static-dynamic/" target="_blank" rel="noopener">Understanding Tensorflow’s tensors shape: static and dynamic</a></p><pre><code class="lang-python">import tensorflow as tfn_input = 784  # MNIST data input (img shape: 28*28)n_classes = 10  # MNIST total classes (0-9 digits)# tf Graph inputx = tf.placeholder(&quot;float&quot;, [None, 28, 28, 1])y = tf.placeholder(&quot;float&quot;, [None, n_classes])x_flat = tf.reshape(x, [-1, n_input])</code></pre></li><li><p><a href="https://www.tensorflow.org/api_docs/python/tf/nn/dropout" target="_blank" rel="noopener"><strong>tf.nn.dropout</strong></a> 和 <a href="https://www.tensorflow.org/api_docs/python/tf/layers/dropout" target="_blank" rel="noopener"><strong>tf.layers.dropout</strong></a> 的区别<br>两者都用于是给神经网络的隐藏层（Hidden Layers）添加 dropout 层的，它们之间的区别仅仅在于接收的参数不同，导致双方对 dropout 层有着不一样的控制能力。具体可参见 <a href="https://stackoverflow.com/questions/44395547/tensorflow-whats-the-difference-between-tf-nn-dropout-and-tf-layers-dropout" target="_blank" rel="noopener">what’s the difference between tf.nn.dropout and tf.layers.dropout</a></p></li></ul><hr><h3 id="基础神经网络-Vanilla"><a href="#基础神经网络-Vanilla" class="headerlink" title="基础神经网络 - Vanilla"></a>基础神经网络 - Vanilla</h3><p>Vanilla 前馈神经网络（Feed Forward Neural Network）<br>TODO</p><hr><h3 id="卷积神经网络-CNN"><a href="#卷积神经网络-CNN" class="headerlink" title="卷积神经网络 - CNN"></a>卷积神经网络 - CNN</h3><p>卷积神经网络（Convolutional Neural Network）<br>TODO</p><hr><h3 id="循环神经网络-RNN"><a href="#循环神经网络-RNN" class="headerlink" title="循环神经网络 - RNN"></a>循环神经网络 - RNN</h3><p>循环神经网络（Recurrent Neural Network）<br>TODO</p><hr><h3 id="生成对抗神经网络-GAN"><a href="#生成对抗神经网络-GAN" class="headerlink" title="生成对抗神经网络 - GAN"></a>生成对抗神经网络 - GAN</h3><p>生成对抗网络（Generative Adversarial Network）</p><pre><code class="lang-python">def model_inputs(real_dim, z_dim):    # tf.placeholder 的 shape 参数里值为 None 的维度代表该维度可以是任何值（整数）    # 此处该维度是用来放置 Batch 数量的，根据 Batch Size 不同的值，Batch 的数量也会不同，所以这是一个可变的维度       inputs_real = tf.placeholder(tf.float32, shape=(None, real_dim), name=&quot;input_real&quot;)    inputs_z = tf.placeholder(tf.float32, shape=(None, z_dim), name=&quot;input_z&quot;)    return inputs_real, inputs_z</code></pre><hr><h3 id="神经网络示例"><a href="#神经网络示例" class="headerlink" title="神经网络示例"></a>神经网络示例</h3><pre><code class="lang-python">### tensorflow_demo.py ###import tensorflow as tffrom tensorflow.examples.tutorials.mnist import input_data# 使用 TensorFlow 提供的 MNIST 数据集，其中对数据的分批和 One-Hot 编码已经完成mnist = input_data.read_data_sets(&quot;.&quot;, one_hot=True, reshape=False)# 超参数 Parameterslearning_rate = 0.001training_epochs = 20batch_size = 128  # 如果没有足够内存，可以降低 batch sizedisplay_step = 1n_input = 784  # MNIST data input (img shape: 28*28 = 784)n_classes = 10  # MNIST total classes (0-9 digits)n_hidden_layer = 256 # 隐藏层的节点数（本例以一个隐藏层为例，给该层设置了 256 个节点「nodes」）# 设置层权重（Weights）和偏差（Bias）的储存weights = {    &#39;hidden_layer&#39;: tf.Variable(tf.random_normal([n_input, n_hidden_layer])),    &#39;out&#39;: tf.Variable(tf.random_normal([n_hidden_layer, n_classes]))}biases = {    &#39;hidden_layer&#39;: tf.Variable(tf.random_normal([n_hidden_layer])),    &#39;out&#39;: tf.Variable(tf.random_normal([n_classes]))}# tf Graph input - 输入层设置x = tf.placeholder(&quot;float&quot;, [None, 28, 28, 1])y = tf.placeholder(&quot;float&quot;, [None, n_classes])x_flat = tf.reshape(x, [-1, n_input])# Hidden layer with RELU activation# ReLU作为隐藏层激活函数layer_1 = tf.add(tf.matmul(x_flat, weights[&#39;hidden_layer&#39;]),\    biases[&#39;hidden_layer&#39;])layer_1 = tf.nn.relu(layer_1)# Output layer with linear activation# 输出层的线性激活函数logits = tf.add(tf.matmul(layer_1, weights[&#39;out&#39;]), biases[&#39;out&#39;])# Define loss and optimizer# 定义误差值和优化器cost = tf.reduce_mean(\    tf.nn.softmax_cross_entropy_with_logits(logits=logits, labels=y))optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate)\    .minimize(cost)# Initializing the variables# 初始化变量init = tf.global_variables_initializer()# Launch the graph# 启动图with tf.Session() as sess:    sess.run(init)    # Training cycle    # 训练循环    for epoch in range(training_epochs):        total_batch = int(mnist.train.num_examples/batch_size)        # Loop over all batches        # 遍历所有 batch        for i in range(total_batch):            batch_x, batch_y = mnist.train.next_batch(batch_size)            # Run optimization op (backprop) and cost op (to get loss value)            # 运行优化器进行反向传导、计算 cost（获取 loss 值）            sess.run(optimizer, feed_dict={x: batch_x, y: batch_y})</code></pre><hr><h3 id="保存训练进度"><a href="#保存训练进度" class="headerlink" title="保存训练进度"></a>保存训练进度</h3><p>在现实中，训练一个模型常常要用很长时间，若是由于某种原因 TensorFlow Session 被关闭，所有当前训练得到的权重（Weights）和偏差（Bias）都会丢失，需要重新训练。针对这种情况，TensorFlow 提供了一个 tf.train.Saver 的类用于把当前进程保存下来，这个过程本质上是把会话（Session）中所有 tf.Variable 存到你的文件系统。</p><pre><code class="lang-python">### tensorflow_save_demo.py ###import tensorflow as tf# The file path to save the data# 文件保存路径，保存为 .ckpt 文件save_file = &#39;./model.ckpt&#39;# Two Tensor Variables: weights and bias# 两个 Tensor 变量：权重和偏置项weights = tf.Variable(tf.truncated_normal([2, 3]))bias = tf.Variable(tf.truncated_normal([3]))# Class used to save and/or restore Tensor Variables# 用来存取 Tensor 变量的类saver = tf.train.Saver()with tf.Session() as sess:    # Initialize all the Variables    # 初始化所有变量    sess.run(tf.global_variables_initializer())    # Show the values of weights and bias   # 显示变量和权重    print(&#39;Weights:&#39;)    print(sess.run(weights))    print(&#39;Bias:&#39;)    print(sess.run(bias))    # Save the model    # 保存模型    saver.save(sess, save_file)</code></pre><hr><h3 id="加载训练进度"><a href="#加载训练进度" class="headerlink" title="加载训练进度"></a>加载训练进度</h3><p>把上面的代码所保存的进度（变量的值）加载到新模型里。<br>注意，你依然需要在 Python 中创建 weights 和 bias 两个 Tensor 。<br>使用 <code>tf.train.Saver.restore()</code> 函数把之前保存的数据加载到 weights 和 bias 当中。这里因为 <code>tf.train.Saver.restore()</code> 已经设定了 TensorFlow 变量，所以不需要再调用 <code>tf.global_variables_initializer()</code>了。</p><pre><code class="lang-python"># Remove the previous weights and bias# 移除之前的权重和偏置项tf.reset_default_graph()# Two Variables: weights and bias# 两个变量：权重和偏置项weights = tf.Variable(tf.truncated_normal([2, 3]))bias = tf.Variable(tf.truncated_normal([3]))# Class used to save and/or restore Tensor Variables# 用来存取 Tensor 变量的类saver = tf.train.Saver()with tf.Session() as sess:    # Load the weights and bias    # 加载权重和偏置项    saver.restore(sess, save_file)    # Show the values of weights and bias    # 显示权重和偏置项    print(&#39;Weight:&#39;)    print(sess.run(weights))    print(&#39;Bias:&#39;)    print(sess.run(bias))</code></pre><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keras - 快速搭建神经网络（更新中）</title>
      <link href="/2018/09/21/keras/"/>
      <url>/2018/09/21/keras/</url>
      
        <content type="html"><![CDATA[<p>在深度学习中，<a href="https://keras.io" target="_blank" rel="noopener">Keras</a> 是一个常用的函数库，提供了各种神经网络（Neural Network）相关的函数，适合于快速建立一套神经网络。</p><p>关于什么是神经网络，它如何运作，参考<a href="/2018/09/26/intro-to-neural-network/">神经网络入门</a></p><hr><h3 id="安装-Keras"><a href="#安装-Keras" class="headerlink" title="安装 Keras"></a>安装 Keras</h3><p>在安装 <a href="https://keras.io/#installation" target="_blank" rel="noopener">Keras</a> 之前，需要先安装以下其中一个支持它的后端引擎（backend engines）：</p><ol><li><a href="https://www.tensorflow.org/install/" target="_blank" rel="noopener">TensorFlow</a></li><li><a href="http://deeplearning.net/software/theano/install.html#install" target="_blank" rel="noopener">Theano</a></li><li><a href="https://docs.microsoft.com/en-us/cognitive-toolkit/setup-cntk-on-your-machine" target="_blank" rel="noopener">CNTK</a></li></ol><p>本文中选择安装 TensorFlow（至于如何安装 TensorFlow ，可参见<a href="/2018/09/21/TensorFlow/">TensorFlow 介绍</a>）</p><p>通过终端里运行 <code>conda install keras</code> 命令来安装，至于 conda 命令是什么？如何安装和配置？请参考<a href="/2018/05/27/set-up-anaconda/">安装和配置 Anaconda</a></p><pre><code class="lang-bash">## 这里假定你已经安装设置好了 anaconda ，可以使用 conda 相关命令## 最左边的 (py36) 显示的是目前所处的开发环境名，参考上面的链接中关于「相互隔离的开发环境」的说明(py36) $ conda install kerasSolving environment: done## Package Plan ##  environment location: /anaconda3/envs/py36  added / updated specs:    - kerasThe following packages will be downloaded:    ...    ...Proceed ([y]/n)? y    ...    ...Preparing transaction: doneVerifying transaction: doneExecuting transaction: done(py36) $</code></pre><hr><h3 id="使用-Keras-建立神经网络"><a href="#使用-Keras-建立神经网络" class="headerlink" title="使用 Keras 建立神经网络"></a>使用 Keras 建立神经网络</h3><p>Keras 的使用非常简单，按照下面的步骤顺序即可制定出想要的「神经网络模型」。接下来只要向「模型」输入数据集就可以训练（training）了。训练完成后，再向「模型」输入数据就能得到预测结果：</p><ol><li><p>选择模型 - 序列模型（Sequential model）<br><a href="https://keras.io/models/sequential/" target="_blank" rel="noopener">Sequential</a> 是常用的神经网络结构模型，所以以它为例，其他都能依此类推</p><pre><code class="lang-python"># 载入 Sequential modelfrom keras.models import Sequential# 创建一个 Sequential modelmodel = Sequential()</code></pre></li><li><p>添加层（Layer）<br>创建名为 <strong>model</strong> 的 Sequential 后，就可依次添加各种「层」。神经网络由「层」组成，选择需要的「层」的种类，然后通过 <code>.add()</code> 添加。这里以全连接层（Fully Connected Layer）为例</p><pre><code class="lang-python"># 载入构建神经网络的层（layer）的类型from keras.layers.core import Dense, Activation# 第 1 层 - 添加有 29 个节点的全连接层以及 32 个节点的「输入层（Input Layer）」- 也就是每次有 32 个数据要输入 model.add(Dense(29, input_dim=32))# 第 2 层 - 添加使用 ReLU 函数的「激活层（Activation Layer）」model.add(Activation(&#39;relu&#39;))# 第 3，4 层 - 添加具有 10 个节点的「全连接层」，并指定使用 Softmax 函数（相当于同时再增加了一层「激活层」）model.add(Dense(10, activation=&#39;softmax&#39;))##... 层数可以一直添加，层数越多越复杂 ...### 第 (n-1) 层 - 添加具有 2 个节点的全连接层（此 n-1 层的节点数为 2 ，说明预测模型最终只输出 2 个值）model.add(Dense(2))# 第 n 层 - 添加使用 Sigmoid 函数的激活层（如果超过 2 个输出值，就要用别的激活函数 比如 softmax 函数）model.add(Activation(&#39;sigmoid&#39;))</code></pre></li><li><p>编译模型（Compile）<br>经过上面两步设置后，就可以开始编译（compile）了：</p><pre><code class="lang-python">model.compile(loss=&quot;categorical_crossentropy&quot;, optimizer=&quot;adam&quot;, metrics = [&#39;accuracy&#39;])</code></pre><p> 编译前还需要设定 <code>loss</code>（损失函数-神经网络中的概念），<code>metrics</code>（评估模型用的指标），还有 <code>optimizer</code>（优化程序 - 概念参考<a href="http://ruder.io/optimizing-gradient-descent/index.html#rmsprop" target="_blank" rel="noopener">此文</a>）。常见的 optimizer 有：</p><ul><li><strong>SGD</strong><br>这是随机梯度下降。它使用了以下参数：<ul><li>学习速率</li><li>动量（获取前几步的加权平均值，以便获得动量而不至于陷在局部最低点）</li><li>Nesterov 动量（当最接近解决方案时，它会减缓梯度）</li></ul></li><li><strong>Adam</strong><br>Adam (Adaptive Moment Estimation) 使用更复杂的指数衰减，不仅仅会考虑平均值（第一个动量），并且会考虑前几步的方差（第二个动量）</li><li><strong>RMSProp</strong><br>RMSProp (RMS 表示均方根误差）通过除以按指数衰减的平方梯度均值来减小学习速率</li></ul></li><li><p>训练模型（Training）<br>将训练集数据 <code>x_train</code> 和 <code>y_train</code> 输入上面编译出来的模型，来进行训练。此处 <code>batch_size</code> 是随机梯度下降（Stochastic Gradient Descent - 神经网络概念）过程中每份数据的数量； <code>epochs</code> 是训练重复的次数，每一次 epoch 都会遍历所有输入数据； <code>validation_data</code> 是验证集数据（神经网络概念）；最后的 <code>verbose</code> 是进度输出设置，0 为不输出进度，1 为输出每次 epoch 的进度条，2 为输出简单进度百分比的信息：</p><pre><code class="lang-python">model.fit(x_train, y_train, batch_size=20, epochs=100, validation_data=(x_vali, y_vali), verbose=2)</code></pre></li><li><p>预测（Predict）<br>模型训练好之后，就能对进行预测了。输入测试数据可以看模型的预测效果：</p><pre><code class="lang-python"># 此例中，模型要判断某个事件是否发生，故预测输出只有两个值：[没发生的概率，发生的概率]# 不同的情况下，预测模型输出的值的数量不一样，取决于你的神经网络结构score = model.evaluate(x_test, y_test, verbose=0)print(&quot;Accuracy: &quot;, score[1])  # 输出预测事件发生的正确率</code></pre></li></ol><hr><h3 id="Keras-中创建卷积层（Convolutional-Layer）"><a href="#Keras-中创建卷积层（Convolutional-Layer）" class="headerlink" title="Keras 中创建卷积层（Convolutional Layer）"></a>Keras 中创建卷积层（Convolutional Layer）</h3><p>「卷积层」是神经网络的另一种类型的「层」，添加方式和上文的「全连接层」一样，使用 <code>.add()</code> 。<strong>卷积层</strong>的相关概念请参见<a href="/2018/09/26/intro-to-neural-network/">神经网络入门</a>，这里直接说明创建方法：</p><pre><code class="lang-python"># 载入必要的模块 - 此处以 2D 卷积为例from keras.layers import Conv2D# 使用以下格式创建卷积层：# Conv2D(filters, kernel_size, strides, padding, activation=&#39;relu&#39;, input_shape)</code></pre><p>参数说明（<strong>*</strong> 为<strong>必传</strong>参数）：</p><ul><li><code>filters</code> <strong>*</strong> : 过滤器（ <strong>filter</strong> ）的数量</li><li><code>kernel_size</code> <strong>*</strong> : 指定（方形）卷积窗口的高和宽的数字（即每个 <strong>filter</strong> 的高和宽）</li><li><p><code>strides</code>: <strong>filter</strong> 在输入图片（input image）上每次移动的距离（用像素数量表示），如果不指定任何值，则 strides 设为 1，即以 1 个像素的距离移动<br><strong><em>提示</em></strong>：可以将 kernel_size 和 strides 表示为数字或元组（tuple）</p></li><li><p><code>padding</code>: （输入图片）边界的处理方式，选项包括 ‘valid’（舍弃边界）和 ‘same’（保留边界，filter 超出部分以 0 填充），如果不指定任何值，则 padding 设为 ‘valid’</p></li><li><p><code>activation</code>: 通常为 ‘relu’。如果未指定任何值，则不应用任何激活函数。强烈建议你向网络中的每个卷积层添加一个 ReLU 激活函数</p></li><li><p><code>input_shape</code> <strong>*</strong> : 指定输入的高度、宽度和深度（按此顺序）的<strong>元组（tuple）</strong><br><strong><em>注意</em></strong>：在模型中将卷积层当做第一层级（出现在输入层之后）时，<strong>必须提供</strong> input_shape 参数；如果卷积层不是网络的第一个层级，<strong>请勿包含</strong> input_shape </p></li></ul><p>其他关于<strong>卷积层</strong>的参数设置，参阅官方文档 <a href="https://keras.io/layers/convolutional/" target="_blank" rel="noopener">Convolutional Layers</a></p><p>代码示例：</p><pre><code class="lang-python"># 载入必要模块 - 上文中已载入# from keras.models import Sequential# from keras.layers import Conv2Dcnn_model_demo_1 = Sequential()   # cnn 为 convolutional neural network（卷积神经网络）的缩写### 示例 1### 假设我要构建一个 CNN，输入层接受的是 200 x 200 像素（对应于高 200、宽 200、深 1 的三维数组）的灰度图片；### 假设我希望下一层级是卷积层，具有 15 个过滤器，每个宽和高分别为 2 ；### 在进行卷积操作时，我希望过滤器每次跳转 2 个像素；### 我不希望过滤器超出图片界限之外，也就是说，我不想用 0 填充图片；### 构建此层级的代码如下：cnn_CLlayer1 = Conv2D(filters=15, kernel_size=2, strides=2, activation=&#39;relu&#39;, input_shape=(200, 200, 1))### 示例 2### 假设我希望 CNN 的下一层级是卷积层，并将示例 1 中构建的层级作为输入；### 假设新层级是 32 个过滤器，每个的宽和高都是 3 ；### 在进行卷积操作时，我希望过滤器每次移动 1 个像素；### 我希望卷积层查看上一层级的所有区域，因此不介意过滤器在进行卷积操作时是否超过上一层级的边缘；### 构建此层级的代码如下：cnn_CLlayer2 = Conv2D(filters=32, kernel_size=3, padding=&#39;same&#39;, activation=&#39;relu&#39;)### 示例 3### 如果在线查看代码，经常会在 Keras 中见到以下格式的卷积层：cnn_CLlayer3 = Conv2D(64, (2,2), activation=&#39;relu&#39;)   # 该层有 64 个过滤器，每个大小是 2x2，层级具有 ReLU 激活函数。层级中的其他参数使用默认值，因此卷积的 stride 为 1，填充设为 &#39;valid&#39; ### 示例 4### 因为 padding 设置了 valid ，该层输出的数据维度为（63, 63, 32），注意和 same 的输出数据维度对比进而了解两者区别cnn_CLlayer4 = Conv2D(filters=32, kernel_size=3, strides=2, padding=&#39;valid&#39;,     activation=&#39;relu&#39;, input_shape=(128, 128, 3))cnn_model_demo_1.add(cnn_CLlayer4)   # 添加「示例 4」的卷积层cnn_model_demo_1.summary()         # 输出查看#### summary() 输出结果 - 这里是卷积层 cnn_CLlayer4 的信息 ##### Using TensorFlow backend.# _________________________________________________________________# Layer (type)                 Output Shape              Param ## =================================================================# conv2d_1 (Conv2D)            (None, 63, 63, 32)        896# =================================================================# Total params: 896# Trainable params: 896# Non-trainable params: 0# _________________________________________________________________</code></pre><hr><h3 id="Keras-中创建最大池化层（Max-Pooling-Layer）"><a href="#Keras-中创建最大池化层（Max-Pooling-Layer）" class="headerlink" title="Keras 中创建最大池化层（Max Pooling Layer）"></a>Keras 中创建最大池化层（Max Pooling Layer）</h3><p>「最大池化层」是神经网络又一种类型的「层」，同样使用 <code>.add()</code> 添加，它通常使用在<strong>卷积神经网络中</strong>排在「卷积层」之后，将「卷积层」的输出作为输入。<strong>池化层</strong>的相关概念请参见<a href="/2018/09/26/intro-to-neural-network/">神经网络入门</a>，这里直接介绍创建方法：</p><pre><code class="lang-python"># 载入必要的模块 - 此处以 2D 卷积为例from keras.layers import MaxPooling2D# 使用以下格式创建最大池化层：# MaxPooling2D(pool_size, strides, padding)</code></pre><p>参数说明（<strong>*</strong> 为<strong>必传</strong>参数）：</p><ul><li><code>pool_size</code> <strong>*</strong> : 指定池化窗口高度和宽度的数字</li><li><code>strides</code>: 垂直和水平 stride（移动距离），如果不指定任何值，则 strides 默认为 <code>pool_size</code></li><li><code>padding</code>: 选项包括 ‘valid’（舍弃边界）和 ‘same’（保留边界，filter 超出部分以 0 填充），如果不指定任何值，则 padding 设为 ‘valid’<br><strong>注意</strong>：可以将 pool_size 和 strides 表示为数字或元组（tuple）</li></ul><p>其他关于<strong>最大池化层</strong>的参数设置，参阅官方文档 <a href="https://keras.io/layers/pooling/#maxpooling2d" target="_blank" rel="noopener">Max Pooling</a></p><p>代码示例：</p><pre><code class="lang-python"># 载入必要模块 - 上文中已载入# from keras.models import Sequential# from keras.layers import MaxPooling2Dcnn_model_demo_2 = Sequential()   # cnn 为 convolutional neural network（卷积神经网络）的缩写### 示例# 假设我要构建一个 CNN，并且我想通过在卷积层后面添加最大池化层，降低卷积层的维度# 假设卷积层的输出（output）大小是 (100, 100, 15)，我希望最大池化层的大小为 (50, 50, 15)# 要实现这一点，我可以在最大池化层中使用 2x2 窗口，stride 设为 2，代码如下：cnn_MPlayer = MaxPooling2D(pool_size=2, strides=2, input_shape=(100, 100, 15))#「示例 1」的卷积层# cnn_CLlayer1 = Conv2D(filters=15, kernel_size=2, strides=2, activation=&#39;relu&#39;, input_shape=(200, 200, 1))cnn_model_demo_2.add(cnn_CLlayer1)     # 添加上文中「示例 1」的卷积层cnn_model_demo_2.add(cnn_MPlayer)  # 添加「示例」中的最大池化层cnn_model_demo_2.summary()         # 输出查看#### summary() 输出结果 - 这里是「最大池化层」cnn_MPlayer 和「卷积层」cnn_CLlayer1 的信息 ##### Using TensorFlow backend.# _________________________________________________________________# Layer (type)                 Output Shape              Param ## =================================================================# conv2d_1 (Conv2D)            (None, 100, 100, 15)      75# _________________________________________________________________# max_pooling2d_1 (MaxPooling2 (None, 50, 50, 15)        0# =================================================================# Total params: 75# Trainable params: 75# Non-trainable params: 0# _________________________________________________________________</code></pre><hr><h3 id="用-Keras-建立一个完整的-CNN-模型架构"><a href="#用-Keras-建立一个完整的-CNN-模型架构" class="headerlink" title="用 Keras 建立一个完整的 CNN 模型架构"></a>用 Keras 建立一个完整的 CNN 模型架构</h3><p>下面代码所建立的 CNN 模型例子中，其目标是对输入图片（input image）中所包含的 <strong>10</strong> 个不同种类的对象进行预测，判断图片中含有哪一个对象。<br>该网络以 3 个<code>「卷积层」&amp;「最大池化层」</code>组合开始（共 6 个层）。这 3 个组合（6 个层级）旨在将图片像素数组输入转换为所有空间信息（spacial info - 即像素的位置排列信息）都丢失、仅保留图片内容信息（像素形成的各种对象 Patterns ，比如车轮的 Pattern ，眼睛的 Pattern）的数组 。然后在 CNN 的第七个层级将该数组扁平化为向量。后面跟着两个密集层（Dense Layer - 即全连接层），旨在进一步说明图片中的内容。最后一层针对数据集中的每个对象类别都有一个条目，并具有一个 softmax 激活函数，使其返回概率。</p><pre><code class="lang-python"># 载入必要模块 - 上文中已载入一部分# from keras.models import Sequential# from keras.layers import Conv2D, MaxPooling2D, Dense  # 要用到三个种类的「层」：「卷积层」，「池化层」，「全连接层」from keras.layers import Flatten  # Flattern 函数用于将多维张量（Tensor）转换为 1 维张量，即向量 Vectorfrom keras.layers import Dropout  # Dropout 函数用于随机关闭「层」中的节点，缓解模型过拟合效应（over fitting）cnn_model = Sequential()  # cnn 为 convolutional neural network（卷积神经网络）的缩写# 添加 3 个「卷积层」&amp;「最大池化层」组合，共 6 个层，不断减小图片中的空间信息（width 和 height），并提取出图片中的 Patterns（不同对象的图形规律）信息 cnn_model.add(Conv2D(filters=16, kernel_size=2, padding=&#39;same&#39;, activation=&#39;relu&#39;, input_shape=(32, 32, 3)))cnn_model.add(MaxPooling2D(pool_size=2))cnn_model.add(Conv2D(filters=32, kernel_size=2, padding=&#39;same&#39;, activation=&#39;relu&#39;))cnn_model.add(MaxPooling2D(pool_size=2))cnn_model.add(Conv2D(filters=64, kernel_size=2, padding=&#39;same&#39;, activation=&#39;relu&#39;))cnn_model.add(MaxPooling2D(pool_size=2))cnn_model.add(Dropout(0.2))                     # Dropout 值设置为 0.2 代表每个节点都有 20% 的概率被关闭cnn_model.add(Flatten())                        # 将多维张量（Tensor）转换为 1 维向量cnn_model.add(Dense(500, activation=&#39;relu&#39;))    # 将上面的一维向量 Vector 输入到一个全连接层cnn_model.add(Dropout(0.3))                     # Dropout 值设置为 0.3 代表每个节点都有 30% 的概率被关闭cnn_model.add(Dense(10, activation=&#39;softmax&#39;))  # 建立一个 10 节点的全连接层作为输出层，用 Softmax 函数输出 10 个种类各自的概率# 编译 - 采用的误差损失函数为「多类别交叉熵」cnn_model.compile(loss=&#39;categorical_crossentropy&#39;, optimizer=&#39;rmsprop&#39;, metrics=[&#39;accuracy&#39;])</code></pre><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas 进阶（待完善）</title>
      <link href="/2018/09/17/pandas-advanced-features/"/>
      <url>/2018/09/17/pandas-advanced-features/</url>
      
        <content type="html"><![CDATA[<p>在<a href="/2018/06/01/numpy-and-pandas/"> NumPy 和 Pandas 入门</a>一文里已介绍了 Pandas 的安装方式，本文会直接详细介绍 Pandas 的常用类型 <strong>Series</strong> 和 <strong>DataFrame</strong> 所包含的各种方法，推荐全文检索</p><hr><h3 id="载入"><a href="#载入" class="headerlink" title="载入"></a>载入</h3><p>终端里进入 Python 的 交互式解释器（interactive interpreter），并载入 Pandas</p><pre><code class="lang-bash">$ pythonPython 3.6.5 |Anaconda, Inc.| (default, Apr 26 2018, 08:42:37)[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)] on darwinType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import pandas as pd</code></pre><hr><h3 id="Pandas-里的-Series-类型"><a href="#Pandas-里的-Series-类型" class="headerlink" title="Pandas 里的 Series 类型"></a>Pandas 里的 Series 类型</h3><ul><li><h4 id="Series-类型的常见-Methods"><a href="#Series-类型的常见-Methods" class="headerlink" title="Series 类型的常见 Methods"></a>Series 类型的常见 Methods</h4><pre><code class="lang-bash">## 把 list 类型转换为 Series 类型&gt;&gt;&gt; s = pd.Series(list(&#39;abbca&#39;))## Series 的数据结构由左边的 index 和右边的 values 组成，还有隐藏参数 position（根据从上到下的顺序，按位置排列，0 是第一位，1是第二位）## Series 里的 index 可以是其他类型，不一定是整数&gt;&gt;&gt; s0    a1    b2    b3    c4    adtype: object## 判断某个元素（element）是否在 Series 的 index 里&gt;&gt;&gt; 1 in sTrue&gt;&gt;&gt; &quot;a&quot; in sFalse## 将 Series 里的元素去重 - 相当于变为集合（set）&gt;&gt;&gt; s.unique()array([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], dtype=object)## 取出 Series 里值为 b 的所有元素（element），返回一个 Series 类型的子集&gt;&gt;&gt; s[s == &quot;b&quot;]1    b2    b## 寻找 Series 里值为 b 的元素（element）所对应的 index 的值&gt;&gt;&gt; s[s == &quot;b&quot;].indexInt64Index([1, 2], dtype=&#39;int64&#39;)## 取第一个 index 的值&gt;&gt;&gt; s[s == &quot;b&quot;].index[0]1## 根据 index 移除 Series 里的某一个元素 - 返回新的 Series 而不改变原来的变量 s 的值 &gt;&gt;&gt; s.drop(index=1)0    a2    b3    c4    adtype: object## 接下来就可以判断某个元素（element）否在 Series 的值（value）里&gt;&gt;&gt; &quot;a&quot; in s.unique()True## 根据 index 排序 - 返回一个新的 Series ，内部元素根据 index 大小排列&gt;&gt;&gt; s.sort_index()&gt;&gt;&gt; s_list = pd.Series([...           [&#39;slim&#39;, &#39;waist&#39;, &#39;man&#39;],...           [&#39;slim&#39;, &#39;waistline&#39;],...           [&#39;santa&#39;]])&gt;&gt;&gt; s_list0    [slim, waist, man]1     [slim, waistline]2               [santa]dtype: object## 将一个 Series 里的所有 list 类型数据的元素合成一个新的 Series&gt;&gt;&gt; one_united_series = s_list.apply(pd.Series).stack().reset_index(drop=True)&gt;&gt;&gt; one_united_series0         slim1        waist2          man3         slim4    waistline5        santadtype: object</code></pre></li><li><h4 id="Series-类型的向量运算"><a href="#Series-类型的向量运算" class="headerlink" title="Series 类型的向量运算"></a>Series 类型的向量运算</h4><p>pandas 里的 Series 类型的相加是根据 <strong>index</strong> 匹配相加减的，而不是根据 <strong>position</strong></p><pre><code class="lang-bash">## 相加的几种情况## Addition when indexes are the same&gt;&gt;&gt; s1 = pd.Series([1, 2, 3, 4], index=[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;])&gt;&gt;&gt; s2 = pd.Series([10, 20, 30, 40], index=[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;])&gt;&gt;&gt; print(s1 + s2)a    11b    22c    33d    44dtype: int64## Indexes have same elements in a different orders3 = pd.Series([10, 20, 30, 40], index=[&#39;b&#39;, &#39;d&#39;, &#39;a&#39;, &#39;c&#39;])&gt;&gt;&gt; print(s1 + s3)a    31b    12c    43d    24dtype: int64## Indexes overlap, but do not have exactly the same elements&gt;&gt;&gt; s4 = pd.Series([10, 20, 30, 40], index=[&#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;])&gt;&gt;&gt; print(s1 + s4)a     NaNb     NaNc    13.0d    24.0e     NaNf     NaNdtype: float64## Indexes do not overlap&gt;&gt;&gt; s5 = pd.Series([10, 20, 30, 40], index=[&#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;])&gt;&gt;&gt; print(s1 + s5)a   NaNb   NaNc   NaNd   NaNe   NaNf   NaNg   NaNh   NaNdtype: float64</code></pre></li></ul><p>一维数据<br><code>s1.loc[&#39;a&#39;]</code> 按照 Series 类型的索引（index）读取<br><code>s1.iloc[1]</code> 按照 Series 类型的位置（position）读取，相当于 <code>s1[1]</code></p><hr><h3 id="Pandas-里的-DataFrame-类型"><a href="#Pandas-里的-DataFrame-类型" class="headerlink" title="Pandas 里的 DataFrame 类型"></a>Pandas 里的 DataFrame 类型</h3><p><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html" target="_blank" rel="noopener">pandas.DataFrame</a> 是一种能够有效处理 <code>.csv</code> 文件内容的二维数据结构，允许每一列（column）各不相同的数据类型。</p><p>二维数据<br>读取行（row）的方式参照一维数据<br>读取列（column）的方式为 <code>s1[&#39;column_name&#39;]</code><br><code>s1.values</code> 返回的是 NumPy 的 Array 类型的数据（二维数组）- 注意该类型的数据要求全部元素都是同一类型 - 一般这样做是为了求所有元素的平均值，即 <code>s1.values.mean()</code></p><ul><li><h4 id="DataFrame-类型的创建"><a href="#DataFrame-类型的创建" class="headerlink" title="DataFrame 类型的创建"></a>DataFrame 类型的创建</h4><pre><code class="lang-bash">## DataFrame creation - 创建 DataFrame 类型要有 column 的值&gt;&gt;&gt; import pandas as pd## You can create a DataFrame out of a dictionary mapping column names to values&gt;&gt;&gt; df_1 = pd.DataFrame({&#39;A&#39;: [0, 1, 2], &#39;B&#39;: [3, 4, 5]})&gt;&gt;&gt; df_1   A  B0  0  31  1  42  2  5## You can also use a list of lists or a 2D NumPy array&gt;&gt;&gt; acid_df = pd.DataFrame([[3.51], [3.20], [3.26], [3.01], [3.16]], columns=[&#39;pH&#39;])&gt;&gt;&gt; acid_df     pH0  3.511  3.202  3.263  3.014  3.16## Subway ridership for 3 stations on 4 different days&gt;&gt;&gt; ridership_df = pd.DataFrame(...      data=[[   0,    0,    2],...            [1478, 3877, 3674],...            [1613, 4088, 3991],...            [1560, 3392, 3826]],...      index=[&#39;05-01-11&#39;, &#39;05-02-11&#39;, &#39;05-03-11&#39;, &#39;05-04-11&#39;],...      columns=[&#39;R003&#39;, &#39;R004&#39;, &#39;R005&#39;]... )&gt;&gt;&gt; ridership_df          R003  R004  R00505-01-11     0     0     205-02-11  1478  3877  367405-03-11  1613  4088  399105-04-11  1560  3392  3826## Grads for 4 students at two exams&gt;&gt;&gt; grades_df = pd.DataFrame(...      data={&#39;exam1&#39;: [43, 81, 78, 75],...            &#39;exam2&#39;: [24, 63, 56, 56],...            &#39;gender&#39;: [&quot;Male&quot;, &quot;Male&quot;, &quot;Female&quot;, &quot;Male&quot;]},...      index=[&#39;Andre&#39;, &#39;Barry&#39;, &#39;Chris&#39;, &#39;Dan&#39;]...  )&gt;&gt;&gt; grades_df       exam1  exam2  genderAndre     43     24    MaleBarry     81     63    MaleChris     78     56  FemaleDan       75     56    Male</code></pre></li><li><h4 id="DataFrame-类型的常用方法（methods）"><a href="#DataFrame-类型的常用方法（methods）" class="headerlink" title="DataFrame 类型的常用方法（methods）"></a>DataFrame 类型的常用方法（methods）</h4><pre><code class="lang-bash">## 查看整体数据的信息 - 有几行；有几列；每列的数据类型；每列多少非空数据；## 有些列的数据是 object ，实际上它们是字符串，且这是因为它们将指针存储到字符串，而不是字符串本身&gt;&gt;&gt; grades_df.info()&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;Index: 4 entries, Andre to DanData columns (total 3 columns):exam1     4 non-null int64exam2     4 non-null int64gender    4 non-null objectdtypes: int64(2), object(1)memory usage: 128.0+ bytes## Accessing elements## 读取第一行，即 position = 0 的数据&gt;&gt;&gt; ridership_df.iloc[0]## 读取 index = &#39;05-05-11&#39; 的数据，即第 5 行&gt;&gt;&gt; ridership_df.loc[&#39;05-05-11&#39;]## 读取 column = &#39;R003&#39; 的数据，即第 1 列&gt;&gt;&gt; ridership_df[&#39;R003&#39;]&gt;&gt;&gt; ridership_df.R003  ## 虽然这种方式也能读 R003 列的数据，但 column 是中文名就不行了，故还是推荐上面的方式## 读取 position = [1, 3] 的数据&gt;&gt;&gt; ridership_df.iloc[1, 3]## slicing 切片 - 二维数据包含两个 axis，所以第一个 row_indexer 是指定沿着 index 方向的切片，第二个是指定沿着 column 方向的切片 &gt;&gt;&gt; df.loc[row_indexer,column_indexer]      ## 按照 index 取值&gt;&gt;&gt; df.iloc[row_indexer,column_indexer]     ## 按照 position 取值## Example - 读取 position = [1:4] 的数据 - 即 2 到 5 行（row）的数据## 两个表达式效果一样，因为右侧不填就默认是 :（即取全部）&gt;&gt;&gt; ridership_df.iloc[1:4]&gt;&gt;&gt; ridership_df.iloc[1:4, :]&gt;&gt;&gt; df_cancer.loc[:,&#39;id&#39;:&#39;fractal_dimension_mean&#39;]  ## 取所有行（row），取 &quot;id&quot; 列到 &quot;fractal_dimension_mean&quot; 列之间的所有列 ## 读取 column = &#39;R003&#39; 和 column = &#39;R005&#39; 的数据，即第 1，3 列（column）数据&gt;&gt;&gt; ridership_df[[&#39;R003&#39;, &#39;R005&#39;]]## 取出 ridership_df 里 &quot;R003&quot; 这一列的值大于 0 的所有行（row）&gt;&gt;&gt; ridership_df[ridership_df[&#39;R003&#39;] &gt; 0]## 读取第一行，即 position = 0 的数据里，最大值所在的列（column）的名字&gt;&gt;&gt; ridership_df.iloc[0].idxmax()&#39;R005&#39;## 读取第一列，即 column = &#39;R003&#39; 的数据里，最大值所在的行（row）的名字&gt;&gt;&gt; ridership_df[&#39;R003&#39;].idxmax()&#39;05-03-11&#39;## 读取前 3 行 - 输出数据里的一个小片段，看数据是否正常符合预期## 如果直接使用 .head() 不指定数字，默认是前 5 行&gt;&gt;&gt; ridership_df.head(3)          R003  R004  R00505-01-11     0     0     205-02-11  1478  3877  367405-03-11  1613  4088  399105-04-11  1560  3392  3826## 直接改变 Dataframe 表格的某一列（columns）- 缩小为原来的 1/2&gt;&gt;&gt; ridership_df[&quot;R005&quot;] = ridership_df[&quot;R005&quot;]/2&gt;&gt;&gt; ridership_df          R003  R004    R00505-01-11     0     0     1.005-02-11  1478  3877  1837.005-03-11  1613  4088  1995.505-04-11  1560  3392  1913.0# Pandas axis&gt;&gt;&gt; df_1   A  B0  0  31  1  42  2  5# 求和 - 针对每列求和&gt;&gt;&gt; df_1.sum()A     3B    12dtype: int64# 求和 - 针对每行求和&gt;&gt;&gt; df_1.sum(axis=1)0    31    52    7dtype: int64# 求和 - 针对全体数据求和&gt;&gt;&gt; df_1.values.sum()15# 矩阵的转置 - 反转 column 和 index，两者互换，不会改动原变量 df_1，不会动到同一块内存，而是返回一个生成新的值&gt;&gt;&gt; df_1.transpose()   0  1  2A  0  1  2B  3  4  5</code></pre></li><li><h4 id="apply-和-applymap-（未完待做）"><a href="#apply-和-applymap-（未完待做）" class="headerlink" title="apply 和 applymap （未完待做）"></a>apply 和 applymap （未完待做）</h4><p><code>.apply()</code> 作用在每一行或者每一列上（通过参数 axis 指定），而 <code>.applymap()</code> 作用在每个元素上</p><pre><code class="lang-bash"># 基本形式 df.apply(func, axis=&quot;columns&quot;)# axis 的值设为 0 或 &quot;index&quot; 则将函数 func 作用到 每一列（column）上# axis 的值设为 1 或 &quot;columns&quot; 则将函数 func 作用到 每一行（row）上&gt;&gt;&gt; df_1.apply(lambda x:x/2, axis=0)     A    B0  0.0  1.51  0.5  2.02  1.0  2.5# 作用在特定的某一列上 - Dataframe 类型的列就是 Series 类型，Series 也有 .apply()# 此处 apply 里的函数 func 接收的参数类型是 Series 里的元素，而上面的 func 接收的参数类型是 Series 类型&gt;&gt;&gt; df_1[&quot;A&quot;].apply(lambda x:x/2)0    0.01    0.52    1.0Name: A, dtype: float64# To do&gt;&gt;&gt; df.applymap()</code></pre></li><li><h4 id="用-Pandas-读取文件，储存为-DataFrame-数据类型进行操作"><a href="#用-Pandas-读取文件，储存为-DataFrame-数据类型进行操作" class="headerlink" title="用 Pandas 读取文件，储存为 DataFrame 数据类型进行操作"></a>用 Pandas 读取文件，储存为 DataFrame 数据类型进行操作</h4><pre><code class="lang-bash"># 读取 .csv 文件，返回一个 DataFrame 类型的数据，包含了该 .csv 文件的内容&gt;&gt;&gt; df = pd.read_csv(&quot;filename.csv&quot;)# Example - 可设定分隔符号（默认是逗号，此处设定为分号），也可设定 index_col 参数来指定使用数据中的某一列作为索引（index）&gt;&gt;&gt; subway_df = pd.read_csv(&quot;nyc_subway_weather.csv&quot;, sep=&quot;;&quot;, index_col=[&#39;Longitude&#39;, &#39;Latitude&#39;])# 生成包含数据的 .csv 文件# index=False 是指定不保存索引（index），index=True（默认值）则索引被保存为新的一列 Unnamed:0&gt;&gt;&gt; subway_df.to_csv(&#39;nyc_subway_weather_edited.csv&#39;, index=False)# 显示前 5 行（row）的数据 &gt;&gt;&gt; df.head(5)# 显示倒数 5 行（row）的数据 &gt;&gt;&gt; df.tail(5)# 显示 DataFrame 数据包含的列的名字（column names）&gt;&gt;&gt; df.columns# 显示用于描述该组数据特征的内容 - 数量(count)，平均值(mean)，标准差(std)，最小值(min)，最大值(max)&gt;&gt;&gt; df.describe()# 显示数据的储存方面的信息 - 包含的数据类型，非空(non-null)数量，数据占用内存容量(memory usage)&gt;&gt;&gt; df.info()# 显示数据的行（rows）数和列（columns）数 - 返回的是 tuple 数据类型&gt;&gt;&gt; df.shape# 统计名为 column_name 的某列（column）中，有多少种不同的值&gt;&gt;&gt; df[&#39;column_name&#39;].value_counts()# 统计名为 column_name 的某列中，有多少「非空」行（row）- 即有多少「非空」样本&gt;&gt;&gt; df[&#39;column_name&#39;].count()# Example - 统计 Gender 这列中 &quot;Male&quot; 和 &quot;Female&quot; 这两种取值的数量（因为此列只有这两种取值）# 在此其实就是统计男女数量&gt;&gt;&gt; df_share_bike[&#39;Gender&#39;].value_counts()Male      244Female     86Name: Gender, dtype: int64# 返回名为 column_name 的某列中，数据的集合（去除相同重复的数据）&gt;&gt;&gt; df[&#39;column_name&#39;].unique()# 将某列的数据类型转换成 datetime 类型&gt;&gt;&gt; df[&quot;time_column_name&quot;] = pd.to_datetime(df[&quot;time_column_name&quot;])# 删除（remove）不需要的列 - 注意此处 axis=1&gt;&gt;&gt; df.drop([&quot;column_name_01&quot;, &quot;column_name_02&quot;], axis=1, inplace=True)# 也可以这样 drop 不需要的列，效果一样&gt;&gt;&gt; df.drop(columns=[&quot;column_name_01&quot;, &quot;column_name_02&quot;])# 提取出某列中，值为 some_value 的所有行，组成一个新的 DataFrame 数据 df_new&gt;&gt;&gt; df_new = df[df[&quot;column_name&quot;] == &quot;some_value&quot; ]# 等效于以下 .query() 方法 - 注意引号位置，.query() 采用 string to evaluate 的方式对待传入参数&gt;&gt;&gt; df_new = df.query(&quot;column_name == &#39;some_value&#39;&quot;)&gt;&gt;&gt; df_new = df.query(&quot;column_name == @var&quot;)         # 若要配合变量 var 使用，则要在变量前添加符号 @ # 使用 .cut() 按照取值范围分组（类似切片） - 常配合 .groupby() 一起使用&gt;&gt;&gt; bin_edges = [2.72, 3.11, 3.21, 3.32, 4.01]         # 规定各个的取值范围的边界：[2.72 ~ 3.11]、[3.11 ~ 3.21]、[3.21 ~ 3.32] 和 [3.32 ~ 4.01] &gt;&gt;&gt; bin_names = [&quot;extreme&quot;, &quot;high&quot;, &quot;moderate&quot;, &quot;low&quot;] # 对每个酸度水平类别（取值范围）进行命名# 创建 levels 列 - .cut() 返回的是 Series 类型&gt;&gt;&gt; acid_df[&#39;levels&#39;] = pd.cut(acid_df[&#39;pH&#39;], bin_edges, labels=bin_names)&gt;&gt;&gt; acid_df     pH    levels0  3.51       low1  3.20      high2  3.26  moderate3  3.01   extreme4  3.16      high</code></pre></li><li><h4 id="整理-DataFrame-数据"><a href="#整理-DataFrame-数据" class="headerlink" title="整理 DataFrame 数据"></a>整理 DataFrame 数据</h4><p>通常原始数据都有各种瑕疵，比如重复项和丢失项，DataFrame 类型提供了一些处理方法（methods）</p><pre><code class="lang-bash">&gt;&gt;&gt; df_missing = pd.DataFrame(...                data=[[np.nan, 2, np.nan, 0],...                      [3, 4, np.nan, 1],...                      [np.nan, np.nan, 1, 4],...                      [np.nan, 3, np.nan, 4],...                      [0, 3, 1, 0]],...                columns=list(&#39;ABCD&#39;),...                index=list(&#39;abcce&#39;))&gt;&gt;&gt; df_missing     A    B    C  Da  NaN  2.0  NaN  0b  3.0  4.0  NaN  1c  NaN  NaN  1.0  4c  NaN  3.0  NaN  4e  0.0  3.0  1.0  0# 取每一列的均值来填充该列的丢失项 - C 列全部丢失，所以没有均值，也就没填充# 注意要加上 inplace=True 参数才能修改 df_missing，否则就只是返回新数据而已&gt;&gt;&gt; df_filled = df_missing.fillna(df_missing.mean())&gt;&gt;&gt; df_filled     A    B    C  Da  1.5  2.0  1.0  0b  3.0  4.0  1.0  1c  1.5  3.0  1.0  4c  1.5  3.0  1.0  4e  0.0  3.0  1.0  0# 查看重复项（默认显示第一个重复 row 的值为 True）- 默认只有全部列（column）的值都相同的行（row）&gt;&gt;&gt; df_filled.duplicated()a    Falseb    Falsec    Falsec     Truee    Falsedtype: bool# 大型数据库用以下方法直接看「总重复数」，避免输出一堆数据&gt;&gt;&gt; sum(df_filled.duplicated())1# 剔除掉重复项 - 用 inplace=True 参数修改 df_filled 本身&gt;&gt;&gt; df_filled.drop_duplicates(inplace=True)&gt;&gt;&gt; df_filled     A    B    C  Da  1.5  2.0  1.0  0b  3.0  4.0  1.0  1c  1.5  3.0  1.0  4e  0.0  3.0  1.0  0# 剔除掉含有至少含有一个丢失项的行（rows） - Drop the rows where at least one element is missing# 可以设置参数 axis=1 来剔除列（columns）&gt;&gt;&gt; df_drop_missed = df_missing.dropna()&gt;&gt;&gt; df_drop_missed     A    B    C  De  0.0  3.0  1.0  0# 任何列是否有空值 - 返回 False 则没有空值，返回 True 则存在空值&gt;&gt;&gt; df_drop_missed.isnull().sum().any()False&gt;&gt;&gt; df_missing.isnull().sum().any()True</code></pre></li><li><h4 id="groupby-用法-pandas-DataFrame-groupby"><a href="#groupby-用法-pandas-DataFrame-groupby" class="headerlink" title="groupby 用法 - pandas.DataFrame.groupby"></a>groupby 用法 - pandas.DataFrame.groupby</h4><p>DataFrame 类型的 <a href="http://pandas.pydata.org/pandas-docs/version/0.23/generated/pandas.DataFrame.groupby.html" target="_blank" rel="noopener">groupby</a> 也是常用的分析数据的 method</p><pre><code class="lang-bash">&gt;&gt;&gt; df1 = pd.DataFrame({&quot;X&quot; : [&#39;A&#39;, &#39;B&#39;, &#39;A&#39;, &#39;B&#39;],...                     &quot;Y&quot; : [1, 4, 3, 2],...                     &quot;Z&quot; : [1, 2, 2, 1],...                     &quot;M&quot; : [24,29,9,19]})# 用 groupby 按照列 &#39;X&#39; 的取值分组 - &#39;X&#39; 列中，取值相同的行（row）将被划分为同一组# 看中括号可知参数可以是一个 list，即按照多个列分组，此时不同列之间的「取值组合」所对应的行（row），构成了不同的组&gt;&gt;&gt; grouped_df1=df1.groupby([&quot;X&quot;])# 读取分组后的 grouped_df1 中，名为 &#39;A&#39; 的组 - 即得到一个由所有 X 取值为 &#39;A&#39; 的行（row）构成的 dataFrame 数据&gt;&gt;&gt; grouped_df1.get_group(&#39;A&#39;)   X  Y  Z   M0  A  1  1  242  A  3  2   9# 分组后可直接求出所有列（columns）中，各组的平均数等&gt;&gt;&gt; grouped_df1.mean()     Y    Z     MXA  2.0  1.5  16.5B  3.0  1.5  24.0# 也可以单独查看某一列（column）里，各个组的平均数&gt;&gt;&gt; grouped_df1[&quot;Y&quot;].mean()XA    2B    3Name: Y, dtype: int64# 查看一共分了几个组&gt;&gt;&gt; grouped_df1.ngroups2&gt;&gt;&gt; len(grouped_df1)2# 查看每个组的大小（Size）- 包含内容多（也就是 rows 多）的组，Size 比较大# 此例中，值为 A 的组和值为 B 的组都包含了两个「行」（rows），即他们的 Size 一样&gt;&gt;&gt; grouped_df1.size()XA    2B    2dtype: int64# .size() 返回的是一个 Series 类型，所以可以用以下方法查看 Size 排名第前 N 或后 N 的 Group&gt;&gt;&gt; s = grouped_df1.size()&gt;&gt;&gt; s.nlargest(1)XA    2dtype: int64&gt;&gt;&gt; s.nlargest(2)XA    2B    2dtype: int64</code></pre></li><li><h4 id="使用-pandas-get-dummies-来对数据进行-One-hot-编码"><a href="#使用-pandas-get-dummies-来对数据进行-One-hot-编码" class="headerlink" title="使用 pandas.get_dummies 来对数据进行 One-hot 编码"></a>使用 pandas.get_dummies 来对数据进行 One-hot 编码</h4><p>在处理数据时，有时需要将数据中的类别信息转换成数字（数字便于计算），人们会给不同类别分别设定一个独立的变量，这些变量就被称为 dummy variables 。以性别为例（性别通常为 2 类），这时就有 2 个变量（two variables），如果是「male」则代表男性的变量值为 1 ，代表女性的变量值为 0 —— 即变量取值组合 (1,0) 为男性，(0,1) 为女性。再比如区分猫狗猪三类，此时就有 3 个变量，变量取值组合 (1,0,0) 为「猫」，(0,1,0) 为「狗」，(0,0,1) 为「猪」。这种编码方式就称为 One-hot 编码 —— 之所以不用单一变量通过取值 0 , 1 和 2 来分别编码猫狗猪，是因为这样会暗含这三个类别具有<strong>相关性</strong>而不是<strong>独立</strong>的<br>这个 <a href="https://www.youtube.com/watch?v=0s_1IsROgDc" target="_blank" rel="noopener">Youtube 视频</a>也介绍了 <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.get_dummies.html" target="_blank" rel="noopener">get_dummies</a> 的用法，推荐参考</p><pre><code class="lang-bash"># 使用上文的 acid_df 为例介绍 pandas.get_dummies 用法&gt;&gt;&gt; acid_df     pH    levels0  3.51       low1  3.20      high2  3.26  moderate3  3.01   extreme4  3.16      high# 对 column = &quot;levels&quot; 这一列的值进行编码（该列的值共有 4 种）&gt;&gt;&gt; pd.get_dummies(acid_df[&quot;levels&quot;])   extreme  high  moderate  low0        0     0         0    11        0     1         0    02        0     0         1    03        1     0         0    04        0     1         0    0# 根据传统，编码时要加上前缀（prefix），以进一步说明编码信息# 此外该列的值共有 4 种，但只需要对其中 3 种进行编码就能知道所有信息，所以人们通常会抛弃其中一列# 使用 iloc 切片实现抛弃其中一列 - 取所有行（row），取第 2 列（column）和第 2 列之后的所有列（参考上文对 iloc 的描述）&gt;&gt;&gt; pd.get_dummies(acid_df[&quot;levels&quot;], prefix=&quot;level&quot;).iloc[:, 1:]       level_high  level_moderate  level_low0           0               0          11           1               0          02           0               1          03           0               0          04           1               0          0# 一步实现 5 个操作#「编码指定的所有列（columns）」,「添加前缀（默认添加的是原列名称）」,「切片抛弃」,「整合编码后数据表和原始表 acid_df」和「把原始表 acid_df 中的 &quot;levels&quot; 这一列删除」# 注意，操作后 acid_df 的内容并没有改变，整个操作只是输出一个整合后的表，需要新建变量来保存&gt;&gt;&gt; pd.get_dummies(acid_df, columns=[&quot;levels&quot;], drop_first=True)     pH  levels_high  levels_moderate  levels_low0  3.51            0                0           11  3.20            1                0           02  3.26            0                1           03  3.01            0                0           04  3.16            1                0           0</code></pre></li><li><h4 id="合并两个-DataFrame"><a href="#合并两个-DataFrame" class="headerlink" title="合并两个 DataFrame"></a>合并两个 DataFrame</h4><p>使用 <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html" target="_blank" rel="noopener">DataFrame.merge</a> 来合并两个 DataFrame 类型的数据，可以参考<a href="https://pandas.pydata.org/pandas-docs/stable/merging.html#database-style-dataframe-joining-merging" target="_blank" rel="noopener">这里</a>查看 Merge 更详细的规则：</p><pre><code class="lang-bash">## 语法：left_df.merge(right_df, how=&#39;inner&#39;, on=&quot;column_name&quot;)## how=&quot;left&quot; - 合并 column_name 之外的所有列，以左边（left_df）column_name 列的取值为准，在右边（right_df）寻找同样的取值合并，找不到则合并后右列的取值为 NaN## how=&quot;right&quot; - 合并 column_name 之外的所有列，以右边（right_df）column_name 列的取值为准，在左边（left_df）寻找同样的取值合并，找不到则合并后左列的取值为 NaN ## how=&quot;inner&quot; - 在左右的 column_name 列取值相同的行（row），才会合并## how=&quot;outer&quot; - 无论左右的 column_name 一列是否有相同取值的行（row），都会合并，相应的列（column）的值以 NaN 填充## 语言是苍白的，只有尝试几次才能明白，或者查看上述官方文档的链接# 数据一&gt;&gt;&gt; sub_df = pd.DataFrame(...             [[&quot;05-01-11&quot;, 4388333, 2911002, &quot;R003&quot;, 0, 40.689945, -73.872564],...              [&quot;05-02-11&quot;, 4388348, 2911036, &quot;R004&quot;, 1, 40.691320, -73.867135]],...             columns=[&quot;DATEn&quot;, &quot;ENTRIESn&quot;, &quot;EXITSn&quot;, &quot;UNIT&quot;, &quot;hour&quot;, &quot;latitude&quot;, &quot;longitude&quot;]) &gt;&gt;&gt; sub_df      DATEn  ENTRIESn   EXITSn  UNIT  hour   latitude  longitude0  05-01-11   4388333  2911002  R003     0  40.689945 -73.8725641  05-02-11   4388348  2911036  R004     1  40.691320 -73.867135# 数据二&gt;&gt;&gt; wea_df = pd.DataFrame(...             [[&quot;05-01-11&quot;, 0, 40.689945, -73.872564, 30.24],...              [&quot;05-02-11&quot;, 1, 40.691320, -73.867135, 30.32]],...             columns=[&quot;DATEn&quot;, &quot;hour&quot;, &quot;latitude&quot;, &quot;longitude&quot;, &quot;pressurei&quot;])&gt;&gt;&gt; wea_df      DATEn  hour   latitude  longitude  pressurei0  05-01-11     0  40.689945 -73.872564      30.241  05-02-11     1  40.691320 -73.867135      30.32# 合并&gt;&gt;&gt; sub_df.merge(wea_df, on=[&quot;DATEn&quot;, &quot;latitude&quot;, &quot;longitude&quot;, &quot;hour&quot;], how=&quot;inner&quot;)      DATEn  ENTRIESn   EXITSn  UNIT  hour   latitude  longitude  pressurei0  05-01-11   4388333  2911002  R003     0  40.689945 -73.872564      30.241  05-02-11   4388348  2911036  R004     1  40.691320 -73.867135      30.32# 数据三 - date 这一列和 sub_df 中的 DATEn 列名字虽然不同，但描述的是同一个东西&gt;&gt;&gt; wea_df_date      date  hour   latitude  longitude  pressurei0  05-01-11     0  40.689945 -73.872564      30.241  05-02-11     1  40.691320 -73.867135      30.32# 此时我们的合并语法要加上 left_on 和 right_on 这两个参数&gt;&gt;&gt; sub_df.merge(wea_df_date,...           left_on=[&quot;DATEn&quot;, &quot;latitude&quot;, &quot;longitude&quot;, &quot;hour&quot;],...           right_on=[&quot;date&quot;, &quot;latitude&quot;, &quot;longitude&quot;, &quot;hour&quot;],...           how=&quot;inner&quot;)</code></pre></li><li><h4 id="将一个-DataFrame-数据添加到另一个-DataFrame-里"><a href="#将一个-DataFrame-数据添加到另一个-DataFrame-里" class="headerlink" title="将一个 DataFrame 数据添加到另一个 DataFrame 里"></a>将一个 DataFrame 数据添加到另一个 DataFrame 里</h4><p>使用 <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.append.html" target="_blank" rel="noopener">DataFrame.append</a> 来实现添加一个 DataFrame 类型的数据：</p><pre><code class="lang-bash">&gt;&gt;&gt; df_base = pd.DataFrame([[1, 2], [3, 4]], columns=list(&#39;AB&#39;))&gt;&gt;&gt; df_base   A  B0  1  21  3  4&gt;&gt;&gt; df_addition = pd.DataFrame([[5, 6], [7, 8]], columns=list(&#39;Ab&#39;))&gt;&gt;&gt; df_addition   A  b0  5  61  7  8# 添加 df_addition 到 df_base 尾部 - 返回新的 DataFrame 而不改变原来的 df_base&gt;&gt;&gt; df_base.append(df_addition)   A    B    b0  1  2.0  NaN1  3  4.0  NaN0  5  NaN  6.01  7  NaN  8.0# 重命名列的名字（column name）- 默认返回新的 DataFrame，要改动原变量要设置参数 inplace=True&gt;&gt;&gt; df_addition.rename(columns={&quot;b&quot;: &quot;B&quot;})# 参数 columns 也可以接收函数 - 此处多余的 else 是为了展示 lambda 中的完整 if 语法&gt;&gt;&gt; df_addition.rename(columns=lambda x: &quot;B&quot; if x == &quot;b&quot; else x, inplace=True)# 确认两个数据集的列标签相同&gt;&gt;&gt; df_addition.columns == df_base.columnsarray([ True,  True])# 如果数据太多，也可以这样确认 - 当且仅当元素（elements）都为非空，非零或者 True，.all() 返回 True&gt;&gt;&gt; (df_addition.columns == df_base.columns).all()True# 再次合并 - 返回新的 DataFrame 而不改变原来的 df_base&gt;&gt;&gt; df_base.append(df_addition)   A  B0  1  21  3  40  5  61  7  8# 设置 ignore_index=True 即可“解决” index 问题（默认 ignore_index=False），如果这是你想要的效果的话 &gt;&gt;&gt; df_base.append(df_addition, ignore_index=True)   A  B0  1  21  3  42  5  63  7  8</code></pre></li></ul><hr><h3 id="用-Pandas-绘制数据分析图"><a href="#用-Pandas-绘制数据分析图" class="headerlink" title="用 Pandas 绘制数据分析图"></a>用 Pandas 绘制数据分析图</h3><p>Pandas 库里本身就提供的绘制图像的方法（Methods）可以作用于 <strong>Series</strong> 和 <strong>DataFrame</strong> 两种类型的数据上，这些方法（Methods）都是基于常用绘图库 <a href="https://matplotlib.org" target="_blank" rel="noopener">matplotlib</a> 封装的（wrappers around matplotlib functions），所以名字大都和 matplotlib 里的一样。用 Pandas 绘图主要是为了快速可视化，若要更加复杂的分析图，还是得载入 Matplotlib 库（进一步查看<a href="/2018/06/15/matplotlib-cheat-sheet/"> Matplotlib 使用指南</a>）</p><pre><code class="lang-bash"># 生成直方图（histogram）- figsize 参数是设定直方图的大小（即宽高）&gt;&gt;&gt; df.hist(figsize=(8, 8))# 可对 Series 数据类型使用&gt;&gt;&gt; df[&quot;column_name&quot;].hist(figsize=(8, 8))# 生成直方图的另一种方法 - 使用 title 参数添加标题&gt;&gt;&gt; df[&quot;column_name&quot;].plot(kind=&quot;hist&quot;, title=&quot;title_name&quot;)# 如果列的数据类型是 String ，可以配合上述的 .value_counts() 方法统计数字，然后生成图表# 下面 kind=&quot;bar&quot; 是生成柱状图（bar charts）- 注意区别于直方图&gt;&gt;&gt; df[&quot;string_column&quot;].value_counts().plot(kind=&quot;bar&quot;)# 生成饼图（pie chart）&gt;&gt;&gt; df[&quot;string_column&quot;].value_counts().plot(kind=&quot;pie&quot;, figsize=(8, 8))# 同时显示所有变量间的相关关系图（散点图 scatter）和直方图 - 类似锤子科技 TNT 的 Poker Dealer&gt;&gt;&gt; pd.plotting.scatter_matrix(df, figsize=(15, 15))# 显示具体的两个变量的数据图 - 配合上述的 Poker Dealer 全变量显示后&gt;&gt;&gt; df.plot(x=&quot;column_1_name&quot;, y=&quot;column_2_name&quot;, kind=&quot;scatter&quot;)</code></pre><p>PS:<br>如果你用 <a href="http://jupyter.org" target="_blank" rel="noopener">Jupyter notebook</a>，记得加上 <code>% matplotlib inline</code> 以让图标显示在内容流中。<br>如果是在终端里使用 <a href="https://ipython.org" target="_blank" rel="noopener">IPython</a>，则要用 <code>plt.show()</code> 来显示图像：</p><pre><code class="lang-python">import matplotlib.pyplot as pltplt.plot([1,2,3,4])plt.show()</code></pre><hr><h3 id="Axis-参数"><a href="#Axis-参数" class="headerlink" title="Axis 参数"></a>Axis 参数</h3><p>Numpy 里的 Array 类型，Pandas 里的 Series 类型和 DataFrame 类型都通常能设置一个 axis 参数，代表操作方向（是对 column 操作，还是对 row 操作），但每次用的时候都需要先测试一下，才能确保参数值 <code>1</code> 和 <code>0</code> 到底分别代表哪个方向</p><p>对于 Array 类型和 Series 类型：</p><ul><li><p><code>axis = 0</code></p></li><li><p><code>axis = 1</code></p></li></ul><p>对于 DataFrame 类型：</p><ul><li><p><code>axis = 0</code> 或 <code>axis = &quot;index&quot;</code><br>along the index（沿着 index 方向 - 垂直纵向）</p></li><li><p><code>axis = 1</code> 或 <code>axis = &quot;columns&quot;</code><br>along the column（沿着 column 的方向 - 水平横向）</p></li></ul><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy 进阶（待完善）</title>
      <link href="/2018/09/17/numpy-advanced-features/"/>
      <url>/2018/09/17/numpy-advanced-features/</url>
      
        <content type="html"><![CDATA[<p>在机器学习等相关数据行业中，NumPy 库里经常用到的是 <a href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ndarray.html" target="_blank" rel="noopener">ndArray</a> 类型，该类包含了很多方便的函数（方法和函数本质上是同一个东西），下面就详细介绍它们，可通过全文检索来查询</p><hr><h3 id="载入"><a href="#载入" class="headerlink" title="载入"></a>载入</h3><p><a href="/2018/06/01/numpy-and-pandas/">NumPy 和 Pandas 入门</a>一文里已介绍了 Numpy 的安装方式，这里我们终端里进入 Python 的交互式解释器（interactive interpreter）后，将直接载入 Numpy 库</p><pre><code class="lang-bash">$ pythonPython 3.6.5 |Anaconda custom (64-bit)| (default, Apr 26 2018, 08:42:37) [GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)] on darwinType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import numpy as np</code></pre><hr><h3 id="ndArray-类型的常见-Methods"><a href="#ndArray-类型的常见-Methods" class="headerlink" title="ndArray 类型的常见 Methods"></a>ndArray 类型的常见 Methods</h3><pre><code class="lang-bash">## shape - 查看线性空间的维度（注意观察以下 3 个例子的 shape 输出区别&gt;&gt;&gt; tensor_0 = np.array(5)&gt;&gt;&gt; tensor_0.shape()     ## 零维张量（zero dimensional Tensor），即标量（Scalar）&gt;&gt;&gt; tensor_1 = np.array([1, 2, 3, 4])&gt;&gt;&gt; tensor_1.shape(4,)   ## 一维张量（one dimensional Tensor），即矢量（Vector）—— 注：Python 不能将 (4) 识别为具有一个项的元组（tuple），所以它需要逗号，类似 1 被识别为 int ，1. 则被识别为 float  &gt;&gt;&gt; tensor_2 = np.array([[1], [2], [3], [4]])&gt;&gt;&gt; tensor_2.shape(4, 1) ## 二维张量（two dimensional Tensor），即矩阵（Matrix）&gt;&gt;&gt; tensor_4 = np.array([[[[1],[2]],[[3],[4]],[[5],[6]]],[[[7],[8]],\...     [[9],[10]],[[11],[12]]],[[[13],[14]],[[15],[16]],[[17],[17]]]])&gt;&gt;&gt; tensor_3.shape(3, 3, 2, 1)  ## 四维张量（four dimensional Tensor）) —— 维度大于 2 的，全部统一称为 Tensor## 注意 numpy 的 ndArray 类型是传「址」的，不是传「值」的## 要用 numpy.copy() 来传「值」&gt;&gt;&gt; tensor_1_addr = tensor_1&gt;&gt;&gt; tensor_1_value = np.copy(tensor_1)&gt;&gt;&gt; tensor_1[3]=1&gt;&gt;&gt; tensor_1[0]=4&gt;&gt;&gt; tensor_1array([4, 2, 3, 1])&gt;&gt;&gt; tensor_1_addr     ## 更改 tensor_1 之后，tensor_1_addr 随之改变array([4, 2, 3, 1])&gt;&gt;&gt; tensor_1_value    ## 更改 tensor_1 之后，tensor_1_value 不受影响array([1, 2, 3, 4])## 计算平均值&gt;&gt;&gt; np.mean(tensor_1)2.5## 计算最大值&gt;&gt;&gt; np.amax(tensor_1)4## 计算最大值所对应的 index（tensor_1[3] 是 array 中的最大值 4）&gt;&gt;&gt; np.argmax(tensor_1)3## 计算最小值&gt;&gt;&gt; np.amin(tensor_1)1## 计算中位数&gt;&gt;&gt; np.median(tensor_1)2.5## 计算标准差 - ddof 参数代表贝塞尔校正，当用样本标准差估算总体标准差的时候需要调整求平均时的分母（通常调整为 N-1）## ddof 参数默认值为 0 ，代表分母使用的是数据的总量 N ，更准确的来说分母是（N - ddof），当 ddof = 0 分母为 N## The divisor used in calculations is (N - ddof), where N represents the number of elements.  &gt;&gt;&gt; np.std(tensor_1, ddof=0)1.118033988749895&gt;&gt;&gt; items = [1, 2, 3, 4, 5]## 计算自然对数的底 e 的幂 - 即 2.71828... 的幂&gt;&gt;&gt; np.exp(1)2.718281828459045&gt;&gt;&gt; np.exp(items)  # 注意输入类型是 list , 返回的类型则是 ndArrayarray([  2.71828183,   7.3890561 ,  20.08553692,  54.59815003,       148.4131591 ])## 计算自然对数的值 - 即以 2.71828... 为底的对数的值&gt;&gt;&gt; np.e2.718281828459045&gt;&gt;&gt; np.log(np.e)1.0## 将两个 ndArray 类型简单首尾连接结合在一起&gt;&gt;&gt; np.append(tensor_1_addr, tensor_1_value)array([4, 2, 3, 1, 1, 2, 3, 4])</code></pre><hr><h3 id="ndArray-类型的矩阵相关计算"><a href="#ndArray-类型的矩阵相关计算" class="headerlink" title="ndArray 类型的矩阵相关计算"></a>ndArray 类型的矩阵相关计算</h3><pre><code class="lang-bash">&gt;&gt;&gt; matrx_a = np.array([[1,2,3,4],[5,6,7,8]])&gt;&gt;&gt; matrx_aarray([[1, 2, 3, 4],       [5, 6, 7, 8]])&gt;&gt;&gt; matrx_b = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])&gt;&gt;&gt; matrx_barray([[ 1,  2,  3],       [ 4,  5,  6],       [ 7,  8,  9],       [10, 11, 12]])## 矩阵的转置 - 返回的是新索引，共享相同的数据（同一内存地址），要谨慎修改## NumPy 在进行转置时不会实际移动内存中的任何数据，只是改变对原始矩阵的索引方式&gt;&gt;&gt; matrx_b.Tarray([[ 1,  4,  7, 10],       [ 2,  5,  8, 11],       [ 3,  6,  9, 12]])## 矩阵的元素级计算（注意区别于矩阵的乘法）&gt;&gt;&gt; matrx_a * 0.25array([[0.25, 0.5 , 0.75, 1.  ],       [1.25, 1.5 , 1.75, 2.  ]])## 找出矩阵中所有元素的最大值&gt;&gt;&gt; np.nanmax(matrx_a)8## 向量点积&gt;&gt;&gt; a = [[1, 0], [0, 1]]&gt;&gt;&gt; b = [[4, 1], [2, 2]]&gt;&gt;&gt; np.dot(a, b)array([[4, 1],       [2, 2]])## 矩阵的乘法&gt;&gt;&gt; np.matmul(matrx_a, matrx_b)array([[ 70,  80,  90],       [158, 184, 210]])## 使用 reshape() 调整矩阵形状，以便进行矩阵的乘法&gt;&gt;&gt; matrx_a.reshape([1,8])array([[1, 2, 3, 4, 5, 6, 7, 8]])&gt;&gt;&gt; matrx_a.reshape([8,1])array([[1],       [2],       [3],       [4],       [5],       [6],       [7],       [8]])## 创建一个和矩阵 matrx_a 相同行数和列数的新矩阵，并以 0 填充&gt;&gt;&gt; np.zeros_like(matrx_a)array([[0, 0, 0, 0],       [0, 0, 0, 0]])</code></pre><hr><h3 id="ndArray-类型的风骚操作"><a href="#ndArray-类型的风骚操作" class="headerlink" title="ndArray 类型的风骚操作"></a>ndArray 类型的风骚操作</h3><pre><code class="lang-bash">## 根据另一个 list 里的 True 或 False（真假布尔值）来选出指定 list 里的元素## True 或 False（真假布尔值）的 list 里的元素也可以是 0 和 1（0 在 python 中是 False，1 是 True）&gt;&gt;&gt; from itertools import compress   # 载入 intertools 库里的 compress 函数&gt;&gt;&gt; list_a = [1, 2, 4, 6]&gt;&gt;&gt; fil = [True, False, True, False]&gt;&gt;&gt; list(compress(list_a, fil))[1, 4]</code></pre><hr><h3 id="Axis-参数"><a href="#Axis-参数" class="headerlink" title="Axis 参数"></a>Axis 参数</h3><p>Numpy 里的 Array 类型，Pandas 里的 Series 类型和 DataFrame 类型都通常能设置一个 axis 参数，代表操作方向（是对 column 操作，还是对 row 操作），但每次用的时候都需要先测试一下，才能确保参数值 <code>1</code> 和 <code>0</code> 到底分别代表哪个方向</p><p>对于 Array 类型和 Series 类型：</p><ul><li><p><code>axis = 0</code></p></li><li><p><code>axis = 1</code></p></li></ul><p>对于 DataFrame 类型：</p><ul><li><p><code>axis = 0</code> 或 <code>axis = &quot;index&quot;</code><br>along the index（沿着 index 方向 - 垂直纵向）</p></li><li><p><code>axis = 1</code> 或 <code>axis = &quot;columns&quot;</code><br>along the column（沿着 column 的方向 - 水平横向）</p></li></ul><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib 使用指南</title>
      <link href="/2018/06/15/matplotlib-cheat-sheet/"/>
      <url>/2018/06/15/matplotlib-cheat-sheet/</url>
      
        <content type="html"><![CDATA[<p>Matplotlib 是 python 世界里常用的绘图函数库，包含很多好用的方法，此处只展示几个简单的示例，更多绘图方式参见<a href="https://pandas.pydata.org/pandas-docs/stable/visualization.html" target="_blank" rel="noopener">这里</a></p><hr><h3 id="示例1-用-Matplotlib-创建柱状图"><a href="#示例1-用-Matplotlib-创建柱状图" class="headerlink" title="示例1 - 用 Matplotlib 创建柱状图"></a>示例1 - 用 Matplotlib 创建柱状图</h3><pre><code class="lang-python">import matplotlib.pyplot as pltimport seaborn as sns    # seaborn 的载入是为了让图像更好看，通常都会搭配 matplotlib.pyplot 一同载入使用</code></pre><p>pyplot 的 <a href="https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.bar" target="_blank" rel="noopener">bar</a> 功能中有两个必要参数：条柱的 x 坐标和条柱的高度。</p><pre><code class="lang-python">plt.bar([1, 2, 3], [224, 620, 425])</code></pre><p>可以利用 pyplot 的 <code>xticks</code> 功能，或通过在 <code>bar</code> 功能中指定另一个参数，指定 x 轴刻度标签。以下两个框的结果相同。</p><pre><code class="lang-python"># 绘制条柱plt.bar([1, 2, 3], [224, 620, 425])# 为 x 轴指定刻度标签及其标签plt.xticks([1, 2, 3], [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</code></pre><pre><code class="lang-python"># 用 x 轴的刻度标签绘制条柱plt.bar([1, 2, 3], [224, 620, 425], tick_label=[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</code></pre><p>用以下方法设置轴标题和标签。</p><pre><code class="lang-python">plt.bar([1, 2, 3], [224, 620, 425], tick_label=[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])plt.title(&#39;Some Title&#39;)plt.xlabel(&#39;Some X Label&#39;)plt.ylabel(&#39;Some Y Label&#39;)</code></pre><hr><h3 id="示例2-折线图（设定-x-和-y-更一般性的作图）"><a href="#示例2-折线图（设定-x-和-y-更一般性的作图）" class="headerlink" title="示例2 - 折线图（设定 x 和 y 更一般性的作图）"></a>示例2 - 折线图（设定 x 和 y 更一般性的作图）</h3><pre><code class="lang-python"># 用合适的标签创建线图y_axis = df.groupby(&#39;acidity_levels&#39;)[&quot;quality&quot;].mean()labels = [&#39;Extreme&#39;, &#39;High&#39;, &#39;Moderate&#39;, &#39;Low acidic&#39;]x_axis = range(len(labels))plt.plot(x_axis, y_axis)plt.title(&#39;Average Quality Ratings by Acidic Levels&#39;)plt.xlabel(&#39;Acidic Levels&#39;)plt.ylabel(&#39;Average Quality Rating&#39;);plt.xticks(x_axis, labels);      # 设定 x 轴上的标签（不是 x 轴变量的名字，而是把原先 x_axis 的每个值对应地换成相应的 label）</code></pre><hr><h3 id="示例3-柱状图（Bar-chart）"><a href="#示例3-柱状图（Bar-chart）" class="headerlink" title="示例3 - 柱状图（Bar chart）"></a>示例3 - 柱状图（Bar chart）</h3><pre><code class="lang-python"># genre_counts 的类型是 Series&#39;&#39;&#39;genre_counts :    Action             57    Adventure          56    Science Fiction    41    Thriller           31    Fantasy            28    Drama              28    Family             20    Crime              15    Comedy             13    Animation           7    Mystery             7    War                 4    Western             3    Romance             2    Horror              2    History             1    dtype: int64&#39;&#39;&#39;labels = list(genre_counts.index)# 使用 pandas 自带的 .plot() 快速出图后，再用 plt 进行细节设置genre_counts.plot(kind=&quot;bar&quot;, title=&quot;Top Popular Movie Genres&quot;);plt.xlabel(&#39;Genre&#39;)plt.ylabel(&#39;Movies Count&#39;);</code></pre><hr><h3 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h3><pre><code class="lang-python"># 设置显示说明图例（legend）plt.legend()# 设置好各种参数后，用以下指令生成图像plt.show()</code></pre><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NumPy 和 Pandas 入门</title>
      <link href="/2018/06/01/numpy-and-pandas/"/>
      <url>/2018/06/01/numpy-and-pandas/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://docs.scipy.org/doc/numpy/user/quickstart.html" target="_blank" rel="noopener">numpy</a> - Numerical Python 和 <a href="https://pandas.pydata.org" target="_blank" rel="noopener">pandas</a> - Python Data Analysis Library 是 Python 语言处理数据时常用的两个库，专门用来进行诸如线性代数方面的计算。通过 Python 的库管理软件 Anaconda 等可以很容易地安装（进一步查看<a href="/2018/05/27/set-up-anaconda/">安装和配置 Anaconda </a> ）</p><pre><code class="lang-bash">## 同时安装 numpy 和 pandas 两个软件包（Packages）- 左边的 (py3) 表示当前处于 Anaconda 的虚拟环境 py3 中(py3) $ conda install numpy pandas</code></pre><pre><code class="lang-python"># 载入 numpy 和 pandas - 演示文件 ~/demo_script.py import pandas as pdimport numpy as np# code block......</code></pre><p>NumPy 和 Pandas 包含很多好用的东西，这里只介绍常用的几个数据类型和相应的函数，更多风骚操作还是得看官方文档和 Google 。</p><p>PS：<br>为了在描述过程中区分 numpy 里的 ndArray 数据类型和 Pandas 里的 Series 类型，下文对于 ndArray 将使用 <strong>position</strong> 来称呼它的引用，而对于 Series 则用 <strong>index</strong> （Series 也有 <strong>position</strong>）。你将很快看到两者的不同。</p><hr><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>使用 NumPy 和 Pandas 这两个库时，通常是使用里面的三个数据类型：</p><ul><li>NumPy 里的 <strong>ndArray</strong> 类型（也常被非官方地说成 Numpy 的 Array 类型）</li><li>Pandas 里的 <strong>Series</strong> 类型</li><li>Pandas 里的 <strong>DataFrame</strong> 类型 - 其中每列 (column) 都是一个 Series</li></ul><p>这些数据类型包含了常见的分析计算数据的方法 (methods)，其计算数据的速度比 Python 自带的 list 等类型要快，以下是它们的特点和区别：</p><ol><li>NumPy 里的 <strong>ndArray</strong> 类型要求其中储存的<strong>数据类型必须一致</strong>，所以它主要用来处理大规模类型相同的 2 维或多维数据；</li><li>Pandas 里的 <strong>Series</strong> 类型也要求其中储存的<strong>数据类型必须一致</strong>，不过它储存的数据是一维的；</li><li>Pandas 里的 <strong>DataFrame</strong> 类型允许各个列 (column) 之间的<strong>数据类型不同</strong>（同列数据得相同）- 它的每个列可以看成一个独立的 <strong>Series</strong>；</li></ol><hr><p>要进一步查询 NumPy 使用方法，除了<a href="https://pandas.pydata.org/pandas-docs/stable/" target="_blank" rel="noopener"> NumPy 官方文档</a>，还可参看 <a href="/2018/09/17/numpy-advanced-features/">Numpy 进阶</a></p><p>要进一步查询 Pandas 使用方法，除了<a href="https://docs.scipy.org/doc/numpy/user/quickstart.html" target="_blank" rel="noopener"> Pandas 官方文档</a>，还可参看 <a href="/2018/09/17/pandas-advanced-features/">Pandas 进阶</a></p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter Notebook 简易指南</title>
      <link href="/2018/05/28/introduce-jupyter-notebook/"/>
      <url>/2018/05/28/introduce-jupyter-notebook/</url>
      
        <content type="html"><![CDATA[<h3 id="架构介绍"><a href="#架构介绍" class="headerlink" title="架构介绍"></a>架构介绍</h3><p><a href="http://jupyter.org/" target="_blank" rel="noopener">Jupyter notebook</a> 是一种 Web 应用，能让用户将说明文本、数学方程、代码和可视化内容全部组合到一个易于共享的文档中，其架构如下：<br><img src="https://jupyter.readthedocs.io/en/latest/_images/notebook_components.png" alt="Jupyter notebook 的架构说明图"></p><p>可看到该架构核心是 Notebook 服务器（Server）。你通过浏览器连接到该服务器，而 Notebook 呈现为 Web 应用。你在 Web 应用中编写的代码通过该服务器发送给内核，内核运行代码，并将结果发送回该服务器。之后，任何输出都会返回到浏览器中。保存 Notebook 时，它将作为 JSON 文件（文件扩展名为 <code>.ipynb</code>）写入到该服务器中。</p><p>因此，你可以在任何地方运行 notebook 服务器，并且可通过互联网访问，或者分享给他人。</p><hr><h3 id="安装-Jupyter-notebook"><a href="#安装-Jupyter-notebook" class="headerlink" title="安装 Jupyter notebook"></a>安装 Jupyter notebook</h3><p>我们一般通过终端里运行 <code>conda install jupyter notebook</code> 命令来安装，至于 conda 是什么？如何隔离开不同项目（Project）的开发环境？请参考<a href="/2018/05/27/set-up-anaconda/">安装和配置 Anaconda</a></p><pre><code class="lang-bash">## 此处假定你已经安装设置好了 anaconda ## 最左边的 (py36) 显示的是目前所处的开发环境名，参考上面的链接中关于 conda 新建虚拟开发环境的说明(py36) $ conda install jupyter notebookSolving environment: done## Package Plan ##  environment location: /anaconda3/envs/py36  added / updated specs:    - jupyter    - notebookThe following NEW packages will be INSTALLED:    ...    ...Proceed ([y]/n)? yPreparing transaction: doneVerifying transaction: doneExecuting transaction: done(py36) $</code></pre><hr><h3 id="启动-Notebook-服务器"><a href="#启动-Notebook-服务器" class="headerlink" title="启动 Notebook 服务器"></a>启动 Notebook 服务器</h3><p>在终端中输入 <code>jupyter notebook</code>，服务器就会在你运行此命令的目录中启动，这意味着任何 notebook 文件都会保存在该目录下</p><pre><code class="lang-bash">## 查看当前所在目录(py36) $ pwd/Users/user1/Documents/Udacity_Class/temp_test## 启动 notebooke 服务器 - 此例子里，服务器运行地址是 http://localhost:8888## 注意当前所处的环境是 py36 ，notebooke 服务器会使用当前所在环境里的 packages(py36) $ jupyter notebook[I 06:07:23.978 NotebookApp] Writing notebook server cookie secret to /Users/user1/Library/Jupyter/runtime/notebook_cookie_secret[I 06:07:24.147 NotebookApp] Serving notebooks from local directory: /Users/user1/Documents/Udacity_Class/temp_test[I 06:07:24.147 NotebookApp] 0 active kernels[I 06:07:24.147 NotebookApp] The Jupyter Notebook is running at:[I 06:07:24.147 NotebookApp] http://localhost:8888/?token=479961dc55f3f37e3885c81bc4de0cfea8c78d51713d7c21[I 06:07:24.147 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).[C 06:07:24.148 NotebookApp]</code></pre><p>打开浏览器，输入服务器地址 <a href="http://localhost:8888" target="_blank" rel="noopener">http://localhost:8888</a> 后，进入即可开始使用。若要关掉 Notebook，只需在刚刚的终端里使用 <code>Control + C</code> 组合键终止服务器。</p><hr><h3 id="Jupyter-Notebook-中的数学表达式"><a href="#Jupyter-Notebook-中的数学表达式" class="headerlink" title="Jupyter Notebook 中的数学表达式"></a>Jupyter Notebook 中的数学表达式</h3><p>在 Notebook 的 Markdown 单元格中，可以使用 <a href="https://www.latex-project.org" target="_blank" rel="noopener">LaTeX</a> 符号创建数学表达式。notebook 使用 MathJax 将 LaTeX 符号呈现为数学符号</p><pre><code>## 创建「内联（inline）」性质的数学表达式 - 首尾无换行符号$y = mx + b$## 创建「块（block）」性质的数学表达式 - 首尾添加换行符号$$y = \frac{a}{b+c}$$</code></pre><p>关于 LaTex 的更多常用语法请参考 <a href="http://data-blog.udacity.com/posts/2016/10/latex-primer/" target="_blank" rel="noopener">A Primer on Using LaTeX in Jupyter Notebooks</a>（写得挺好的，所以尽管原文页面已无法访问，还是写出来做个纪念。网上能搜到该文，我的 Dropbox 里也有保存），详细一些的可参看这篇 <a href="https://docs.latexbase.com" target="_blank" rel="noopener">Online LaTeX reference</a> ，更加全面的信息可以参考这个 <a href="http://ctan.math.ca/tex-archive/obsolete/info/math/voss/mathmode/Mathmode.pdf" target="_blank" rel="noopener">PDF 文件</a>（尽管该文件似乎有些久远）</p><hr><h3 id="Magic-关键字"><a href="#Magic-关键字" class="headerlink" title="Magic 关键字"></a>Magic 关键字</h3><p>Magic 关键字是可以在单元格中运行的特殊命令，能让你控制 notebook 本身或执行系统调用（例如更改目录）。例如，在 notebook 中可以使用 <code>%matplotlib</code> 将 matplotlib（python 的一个绘图库） 设置为以交互方式工作。</p><p>Magic 命令的前面带有一个或两个百分号（<code>%</code> 或 <code>%%</code>），分别对应「<strong>行 Magic 命令</strong>」和「<strong>单元格 Magic 命令</strong>」。「<strong>行 Magic 命令</strong>」仅应用于编写 Magic 命令时所在的行，而「<strong>单元格 Magic 命令</strong>」应用于整个单元格。</p><p><strong><em>注意：</em></strong><br><em>这些 Magic 关键字是特定于普通 Python 内核的关键字。如果使用其他内核，这些关键字很有可能无效。</em></p><ul><li><p><strong>示例一：运行计时器</strong><br>有时候，你可能希望让代码运行得更快，可以使用 Magic 命令 <code>%timeit</code> 测算代码的运行时间</p><ol><li><p>使用 <code>%timeit</code> 测算某个命令的运行时间：<img src="/2018/05/28/introduce-jupyter-notebook/inline-timeit.png" title="inline timeit"></p></li><li><p>使用 <code>%%timeit</code> 来测算整个单元格的运行时间：<img src="/2018/05/28/introduce-jupyter-notebook/block-timeit.png" title="block timeit"></p></li></ol></li><li><p><strong>示例二：在 notebook 中嵌入可视化内容</strong><br>notebook 允许你将图像与文本和代码一起嵌入。这在你使用 matplotlib 或其他绘图包创建可视化内容时最为有用。在 notebook 中可以使用 <code>%matplotlib</code> 将 matplotlib 设置为以交互方式工作。默认情况下，图形呈现在各自的窗口中。但是，你可以通过命令传递参数，以选择特定的<a href="http://matplotlib.org/faq/usage_faq.html#what-is-a-backend" target="_blank" rel="noopener">后端</a>（呈现图像的软件）。要直接在 notebook 中呈现图形，应将通过命令 <code>%matplotlib inline</code> 内联后端一起使用 <img src="/2018/05/28/introduce-jupyter-notebook/matplotlib-inline.png" title="matplotlib inline"></p></li></ul><p><strong><em>提示</em></strong>：<br>在分辨率较高的屏幕（例如 Retina 显示屏）上，notebook 中的默认图像可能会显得模糊。可以在 <code>%matplotlib inline</code> 之后使用 <code>%config InlineBackend.figure_format = &#39;retina&#39;</code> 来呈现分辨率较高的图像。</p><hr><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p>在 Notebook 里使用库 <a href="https://matplotlib.org" target="_blank" rel="noopener">matplotlib</a> 时：</p><ol><li><p>添加 <code>%matplotlib inline</code> 后可在 Notebook 内容流上显示图表（符号 <code>%</code> 带一串命令在 Notebook 里被称为 <a href="https://ipython.readthedocs.io/en/stable/interactive/magics.html" target="_blank" rel="noopener">magic commands</a>）</p></li><li><p>在代码末尾添加分号 <code>;</code> 可以隐藏输出，参考<a href="https://stackoverflow.com/questions/25790062/how-to-hide-matplotlib-lines-line2d-in-ipython-notebook" target="_blank" rel="noopener">这里</a></p></li><li><p>如果 notebook 中的代码需要和其他网站交互，比如载入 IMDb 网站的数据，但是这些网站由于各种原因无法直接访问，可以尝试在启动 Notebook 服务器的命令前加上一个代理命令，表示该服务器在代理环境下打开，享受上网代理的流量端口：</p><pre><code class="lang-bash">## 注意，代理服务器需要自己进行额外配置，myproxy 这个命令也是自行设置命名的，并不是系统自带命令，比如有些玩家可能用的是 proxychains4  $ myproxy jupyter notebook  ## 在配置好的代理环境中运行 notebook</code></pre></li></ol><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装和配置 Anaconda</title>
      <link href="/2018/05/27/set-up-anaconda/"/>
      <url>/2018/05/27/set-up-anaconda/</url>
      
        <content type="html"><![CDATA[<h3 id="Anaconda-简介"><a href="#Anaconda-简介" class="headerlink" title="Anaconda 简介"></a>Anaconda 简介</h3><p><strong>Anaconda</strong> 是一个软件分发平台（distribution of software），自带了 <strong>conda</strong> 这个管理环境和软件包的工具，是数据分析行业里常用的工具之一（管理各种工具的工具）。</p><p>不过 <strong>Anaconda</strong> 这个平台上的软件都是专门针对数据分析的，通常会结合 Python 更加一般性的 packages 管理工具 <strong>pip</strong> 来使用，以便能接触到（access）更多的软件和工具。</p><p><strong>Anaconda</strong> 的作用：</p><ol><li>每个项目（Project）有其对应的运行环境，人们用其中的 <strong>conda</strong> 隔离开不同项目的环境，以免相互冲突；</li><li>方便人们下载各种数据分析所需要的库（Libraries）和软件包（Packages），类似软件商店；</li></ol><hr><h3 id="安装-Anaconda-Windows"><a href="#安装-Anaconda-Windows" class="headerlink" title="安装 Anaconda - Windows"></a>安装 Anaconda - Windows</h3><p>Windows 下的 Anaconda 只需去官网下载对应的<a href="https://www.anaconda.com/download/#windows" target="_blank" rel="noopener">软件包</a> ，根据提示安装即可。安装完成打开后是可视化的操作界面，「新建环境」和「安装软件包函数库」都可以使用可视化界面操作完成，唯一要注意的是网络方面如果使用代理上网，或者系统防火墙防护级别过高等，会导致 Anaconda 打开之后卡死在 loading application 这一状态。这时只需要取消代理，或者关掉防火墙即可解决，参见<a href="https://github.com/ContinuumIO/anaconda-issues/issues/9864" target="_blank" rel="noopener">这里</a>。</p><hr><h3 id="安装-Anaconda-macOS"><a href="#安装-Anaconda-macOS" class="headerlink" title="安装 Anaconda - macOS"></a>安装 Anaconda - macOS</h3><p>到 <a href="https://www.anaconda.com/download/#macos" target="_blank" rel="noopener">Anaconda 官网</a> 下载 macOS 系统对应的软件包（一般选择 Python 3.x version 的），然后根据提示安装。</p><p>安装好之后，打开终端 Terminal 查看</p><pre><code class="lang-bash">## 查看 conda 的版本$ conda --versionconda 4.5.4## 查看 python 的版本 - 安装 Anaconda 不会影响 Mac 电脑里之前安装的 Python ，不过系统默认使用的 Python 会变成 Anaconda 自带的那个版本$ python --versionPython 3.6.4 :: Anaconda, Inc.</code></pre><p>PS:<br>虽然 Anaconda 的安装默认会设置 Bash Shell 的环境变量，但若系统仍提示找不到 <code>conda</code> 命令（command not found），则要使用命令 <code>echo $PATH</code> 看路径 <code>/anaconda3/bin/</code> 是否在环境变量 $PATH 里，不在就要自行添加，这样才能顺利识别相关命令</p><p>若终端用的是 <a href="https://fishshell.com" target="_blank" rel="noopener">Fish Shell</a> ，添加 Anaconda 路径到环境变量的方式如下：</p><pre><code class="lang-bash">## 以下命令会将 Anaconda 的路径 /anaconda3/bin/ 添加到 $fish_user_paths ，进而添加到 $PATH 这个环境变量里$ set -U fish_user_paths /anaconda3/bin/ $fish_user_paths## 添加路径之后就能正确识别 conda 这个命令了$ conda --versionconda 4.5.4## 如果 Anaconda 和 Homebrew 的软件冲突（比如 Curl），可注销 $fish_user_paths 中的 /anaconda3/bin/ 路径来暂时隔离开 Anaconda## 变量 $fish_user_paths 是一个 list ，第一个元素是 fish_user_paths[1]$ echo $fish_user_paths/anaconda3/bin/$ set --erase --universal fish_user_paths[1]</code></pre><p>此外还需参考 <code>/anaconda3/etc/fish/conf.d/conda.fish</code> 文件的注释设置 <code>~/.config/fish/config.fish</code> 文件，才能够在 Fish Shell 里使用 <code>conda activate [环境名]</code> 激活或切换进入指定环境，使用 <code>conda deactivate</code> 来退出当前环境，进入 <strong>base</strong> 环境（即初始的基本环境）。<br>推荐参考 Github 上的这个 <a href="https://github.com/kalefranz/conda/blob/5dd547f754a52350199dcc975848c1969d6c8931/shell/conda.fish" target="_blank" rel="noopener"><code>conda.fish</code></a> 来调整 Anaconda 自带的 conda.fish 文件，比如设置环境名（env name）显示在左侧。</p><p>PS:<br>Bash Shell 用的是 <code>source activate [环境名]</code> 进入环境，见下文。在 Fish Shell 中，<code>source</code> 这个关键词被占用了，所以只能换别的，默认设置是换成 <code>conda</code></p><hr><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>为了保证下载速度，可考虑设置的是 Anaconda 的软件下载源，即编辑 <code>~/.condarc</code> 文件，添加相应的镜像地址，否则每次下载都会访问默认的国外网站下载软件，速度可能会因此很慢。不过如果设置了国内的镜像地址，软件版本可能会滞后于世界。所以设置与否，看个人情况而定。</p><pre><code class="lang-bash">## 使用 vi 编辑 .condarc 文件 - 你也可以使用其他方式编辑$ vi ~/.condarc## 编辑后的 .condarc 文件内容如下 - 这里添加的是清华大学的软件镜像地址，通常会比世界滞后两个代$ cat ~/.condarcchannels:  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/  - defaultsshow_channel_urls: truessl_verify: true</code></pre><hr><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><p>一开始我们所处的是 conda 的默认环境（default conda environment），建议经常升级该默认环境，可以避免一些 Bug 和错误</p><pre><code class="lang-bash">## 升级 conda 本身$ conda update conda## 升级 conda 旗下所有可升级的软件（包括 conda 本身）- 虽然此命令包括 conda 本身的升级，但建议先运行上一命令单独升级 conda 之后再运行这个升级全部，因为有用户直接升级全部软件时会报错 $ conda update --all$ conda upgrade --all  # conda upgrade is Alias for conda update</code></pre><p>接着是 Anaconda 基本的工作流程</p><pre><code class="lang-bash">## 新建一个环境，指定该环境中你希望安装的 Packages ，以便之后在此环境中开发某项目$ conda create -n [环境名称] [Package 1] [Package 2] [Package 3] ...## Examples - 一个 hyphen 代表缩写（如例子里的 -n），两个 hyphens 代表全称（如例子里的 --name）$ conda create -n my_env numpy$ conda create --name py3 python=3.6 numpy pandas    ## 还可以指定所用 Python 或者 Package 的版本</code></pre><p>使用 <code>activate</code> 和 <code>deactivate</code> 来进入和切换不同的环境。特别地，在 Windows 系统下，<code>activate</code> 一个新环境之前，最好先 <code>deactivate</code> 当前环境，参见<a href="https://conda.io/docs/user-guide/tasks/manage-environments.html#deactivating-an-environment" target="_blank" rel="noopener">这里</a></p><pre><code class="lang-bash">## 进入（或者说切换到）某个环境里 - 注意 fish shell 参照上面的官方设置后，命令是 conda activate（没有 source）$ source activate [环境名称]## Example - 切换后，提示符钱的括号里的内容会显示当前所在的环境名称$ source activate tea_facts(tea_facts) $## 离开（或者说注销）某个环境里 - 注意 fish shell 里是 conda deactivate（没有 source）(tea_facts) $ source deactivate$## 离开（或者说注销）tea_facts 环境后，进入 py3 环境$ source activate py3(py3) $</code></pre><p>接下来就是在环境中安装各种软件库。此过程中， Conda 会自动安装对应的依赖项。例如 <code>pandas</code> 依赖于 <code>numpy</code>（需要有 numpy 才能使用），则安装 <code>pandas</code> 时会同时安装 <code>numpy</code>（如果它之前没被安装的话），即 <code>conda install pandas</code> 和 <code>conda install numpy pandas</code> 的效果一样</p><pre><code class="lang-bash">## 查看当前所处环境 py3 中安装的所有软件 - 会输出一个目录列表用以查看(py3) $ conda list## 查看是否安装了名字含有 &quot;notebook&quot; 的 pakage(py3) $ conda list | grep -ir &quot;notebook&quot;(standard input):notebook         5.5.0           py3_0## 在当前环境 py3 里安装所需的软件包（Package）- 此安装命令是幂等的，即多次运行相同的安装命令安装相同的 Package，效果和运行一次一样  (py3) $ conda install numpy(py3) $ conda install jupyter notebook  # 注意 jupyter notebook 是两个软件包，而不是一个## 也可以同时安装多个软件包（Packages）- 下面安装的是常用的深度学习软件包组合(py3) $ conda install numpy pandas jupyter notebook matplotlib pillow tqdm scikit-learn ## 还可以指定所装软件包的版本(py3) $ conda install numpy=1.10## 卸载软件(py3) $ conda remove numpy## 更新软件(py3) $ conda update numpy## 搜索名字包含 beautifulsoup 字符串的软件(py3) $ conda search &#39;*beautifulsoup*&#39;</code></pre><p>PS:<br>一些库或者框架除了可以使用 <code>conda search</code> 之外，还可以去 <a href="https://anaconda.org/conda-forge" target="_blank" rel="noopener">conda-forge</a> 查看安装方法，比如 <a href="https://anaconda.org/conda-forge/tensorflow" target="_blank" rel="noopener">TensorFlow</a> 的安装；</p><hr><h3 id="软件重复问题"><a href="#软件重复问题" class="headerlink" title="软件重复问题"></a>软件重复问题</h3><p>有时候，我们会遇到开发环境中有两个不同版本的软件库：<a href="https://stackoverflow.com/questions/43253884/conda-showing-two-versions-of-requests-library" target="_blank" rel="noopener">Conda showing two versions of library</a></p><pre><code class="lang-bash">## 当前环境安装了两个不同版本的 tensorflow ，一个来源是 pip ，另一个则是 conda-forge(py3) $ conda list | grep -ir &quot;tensorflow&quot;(standard input):tensorflow       1.0.0          &lt;pip&gt;(standard input):tensorflow       1.10.0        py35_0    conda-forge</code></pre><p>为了避免问题，我们希望只留其中一个，此处是留使用 conda 安装的那个：</p><pre><code class="lang-bash">## 这里要按顺序移除，然后再重装，如果不按顺序，问题会得不到解决## 第一步，先移除 conda 的 tensorflow(py3) $ conda remove tensorflow## 第二步，移除 pip 的 tensorflow(py3) $ pip uninstall tensorflow## 第三步，重新安装 conda 的 tensorflow(py3) $ conda install -c conda-forge tensorflow## 查看确认(py3) $ conda list | grep -ir &quot;tensorflow&quot;(standard input):tensorflow       1.10.0        py35_0    conda-forge</code></pre><hr><h3 id="导出环境配置"><a href="#导出环境配置" class="headerlink" title="导出环境配置"></a>导出环境配置</h3><p>将配置清单保存成 <code>.yml</code> 文件分享给他人能让对方快速搭建出一模一样的运行环境，以便测试和运行我们的代码</p><pre><code class="lang-bash">## 导出当前环境的配置清单，并储存到当前目录下的 environment.yml 文件里(py3) $ conda env export &gt; environment.yml## 导入 environment.yml 文件，读取里面的配置信息，并依照该配置创建一个环境## 新建的环境名由 .yml 配置文件中的第一行设定（比如文件第一行是 name: aind-dl，则新环境名为 aind-dl）$ conda env create -f environment.yml## 查看所有环境 - 输出一个列表形式的结果，默认环境的名字叫做 root$ conda env list## 删除一个环境$ conda env remove -n env_name</code></pre><p>当我们将代码分享在 Github 上的时候，要同时附上 Anaconda 的环境的配置清单文件 <code>*.yml</code> ，甚至要再加上一个 pip 的配置文件 <code>requirements.txt</code> （用 <a href="https://pip.pypa.io/en/stable/reference/pip_freeze/" target="_blank" rel="noopener"><code>pip freeze</code></a> 命令输出该配置文件），以便他人能快速配置出相应的环境，运行我们的代码。</p><hr><p>有关 Anaconda 的更多操作，还可以参考：</p><ul><li><a href="https://www.jianshu.com/p/d2e15200ee9b" target="_blank" rel="noopener">Anaconda 多环境多版本 Python 配置指导</a></li><li><a href="https://foofish.net/compatible-py2-and-py3.html" target="_blank" rel="noopener">用 Anaconda 完美解决 Python2 和 python3 共存问题</a></li></ul><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上手 Visual Studio Code</title>
      <link href="/2018/05/25/vscode-intro/"/>
      <url>/2018/05/25/vscode-intro/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://code.visualstudio.com" target="_blank" rel="noopener">VS Code</a> 是微软开发的一款编辑器，迭代速度很快 ，产品定位是介于 IDE 和纯编辑器（如 vim ）之间，更多八卦可收听 <strong>Teahour.fm</strong> 第 91 期：<a href="http://teahour.fm/2017/12/12/why-vscode-is-better-than-atom.html" target="_blank" rel="noopener"><em>Why VS Code is better than atom ?</em></a> </p><hr><h3 id="VS-Code-安装"><a href="#VS-Code-安装" class="headerlink" title="VS Code 安装"></a>VS Code 安装</h3><p>安装很简单，从<a href="https://code.visualstudio.com" target="_blank" rel="noopener">官网</a>下载安装包到本地正常安装即可。实在不懂就看<a href="https://code.visualstudio.com/docs/setup/mac" target="_blank" rel="noopener">官方教程</a></p><hr><h3 id="立马上手"><a href="#立马上手" class="headerlink" title="立马上手"></a>立马上手</h3><p>打开 VS Code 后，点击右边栏倒数第一个图标或通过快捷键 <code>Cmd + Shift + X</code> 来进入插件搜索界面。推荐安装下面两个插件：</p><ul><li><p>搜索安装 <a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner" target="_blank" rel="noopener">Code Runner</a> 插件来运行主流语言的代码。安装完后，用 <code>⌘ + ,</code> 打开设置页面，通过「User」选项卡 -&gt; 「Extensions」-&gt; 「Run Code configuration」可以勾选设置「<em>Whether to clear previous output before each run.</em>」即是否每次运行输出前清除之前的输出内容。</p></li><li><p>搜索安装 <a href="https://marketplace.visualstudio.com/items?itemName=lfs.vscode-emacs-friendly" target="_blank" rel="noopener">Emacs Friendly Keymap</a>。这样就可以使用好用的 Emacs 快捷键（光标移动，Kill 和 Yank 等操作）。</p></li></ul><hr><h3 id="Code-Runner-设置"><a href="#Code-Runner-设置" class="headerlink" title="Code Runner 设置"></a>Code Runner 设置</h3><p><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner" target="_blank" rel="noopener">Code Runner</a> 安装完之后并不能马上可以运行各种代码，因为它其实是调用各种终端命令来运行代码的，也就是终端里得有这个命令。</p><p>比如要运行 JavaScript ，就要确保安装了 <a href="https://nodejs.org/en/about" target="_blank" rel="noopener">Node.js</a> ，而运行 Python 则要安装 <a href="https://www.python.org/downloads/" target="_blank" rel="noopener">python</a> ，以此类推：</p><pre><code class="lang-bash">## 通过 Homebrew 安装 Node$ brew install node## 或者通过 nvm 安装 Node$ nvm install latest    # 安装并使用最新版本的 Node$ nvm install v13.14.0  # 安装并使用 v13.14.0 版本的 Node## 通过 Homebrew 安装 python$ brew install python3</code></pre><p>安装完成后，<strong>Code Runner</strong> 就会自动调用相应的命令来运行对应的文件。比如对于<code>.js</code> 文件，就会调用 <code>node</code> 命令来运行，而对于<code>.py</code> 文件，则会调用 <code>python3</code> 来运行。</p><p>如果没安装，或者终端里的环境变量 <code>$PATH</code> 没设置对，<strong>Code Runner</strong> 就会因找不到这些命令而运行失败。</p><ul><li><p><strong>进一步设置命令如何运行</strong><br>在 <a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner" target="_blank" rel="noopener">Code Runner</a> 的设置页面找到齿轮图标，点击展开，然后：<br><code>Extensions Settings</code> -&gt; <code>Code-runner:</code> <strong><code>Executor Map</code></strong> -&gt; <code>Edit in settings.jason</code><br>可以打开如下设置文件：</p><pre><code class="lang-jason">{&quot;code-runner.clearPreviousOutput&quot;: true,&quot;editor.tabSize&quot;: 2,&quot;editor.detectIndentation&quot;: false,&quot;code-runner.executorMap&quot;: {  &quot;javascript&quot;: &quot;node --trace-uncaught&quot;,  &quot;java&quot;: &quot;cd $dir &amp;&amp; javac $fileName &amp;&amp; java $fileNameWithoutExt&quot;,  ...  ...  &quot;python&quot;: &quot;python3 -u&quot;,  &quot;rust&quot;: &quot;cd $dir &amp;&amp; rustc $fileName &amp;&amp; $dir$fileNameWithoutExt&quot;,  &quot;cpp&quot;: &quot;cd $dir &amp;&amp; g++ -std=c++11 $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,  ...  ...}}</code></pre><p>可以更具体地看到，当运行<code>.js</code> 文件，会调用 <code>node --trace-uncaught</code> 命令来运行，而 <code>.py</code> 文件，则会调用 <code>python3 -u</code> 来运行。<br>这些命令都是可以更改的。比如你可以去掉参数 <code>--trace-uncaught</code> ，只用 <code>node</code> 来运行。或者根据本地安装的情况，把 <code>python3</code> 改为 <code>python</code> 来运行。</p></li></ul><hr><h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><p>VS Code 需要以目录（<strong>而不是文件</strong>）为最小单位打开（载入）。打开存放代码的目录就能看到代码文件。<br>选择文件后点击界面右上角的三角形 Run Code 按钮或者使用快捷键 <code>Ctrl + Option + N</code> 来运行的代码。</p><p>下面是 JavaScript 常用语法，可以用来试试上面的操作：</p><pre><code class="lang-javascript">// 函数声明function show(x) {  return console.log(x);}(n) =&gt; { return n + 1; } // 匿名函数：有大括号就需要 return ，没有就不用；只有一个参数时圆括号是可选的；x =&gt; x + 1 ;             // param =&gt; expression; 等于 param =&gt; { return expression; } 或者 param =&gt; { statements }// 条件分支if (n &lt; 0) {  show(&quot;Baroque&quot;);    // 函数调用}else if (n == 0) {  show(&quot;Classical&quot;); }else {  show(&quot;Romantic&quot;); }</code></pre><p>更多 JS 语法参见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">箭头函数</a></p><hr><h3 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h3><p><strong>终端（Terminal）里打开 VS Code ：</strong><br>打开 <strong>Command Palette</strong>（快捷键 <code>⇧⌘P</code> ），输入 shell command 后搜索安装 <code>code</code> 这个命令即可</p><p><img src="https://code.visualstudio.com/assets/docs/setup/mac/shell-command.png" alt="VS Code Command Palette"></p><p>安装好后，使用以下方式从终端打开</p><pre><code class="lang-bash"># 单纯打开 VS Code$ code# 使用 VS Code 打开指定路径的文件$ code [文件路径]# Example - 使用 VS Code 打开当前文件夹$ code .</code></pre><p><strong>设置按一次 <code>Tab</code> 键相当于输入几个空格键：</strong><br>用 <code>Cmd + ,</code> 打开设置，然后搜索「Tab Size」关键词找到对应的选项，勾选即可。这里要注意观察另一个叫「Detect Indentation」的设置，它如果被勾选会覆盖「Tab Size」的设置。</p><p>这里注意 VS Code 的设置有以下两个不同优先级的设置文件，它们之间是继承关系：</p><ol><li><strong>User Settings</strong> - 用户设置</li><li><strong>Workspace Settings</strong> - 工作站设置（覆盖上者）</li></ol><p><strong>设置格式化代码中的花括号位置：</strong><br>vscode 缺省的格式化方式是「埃及括号」，也就是把花括号放在一行的末尾，而 ian 推荐的样式是把花括号放在新的一行，这样前两行不至于挨得太近。只需要在设置搜索栏搜索「open brace on new line」找到对应的条件分支（Control Blocks）和函数（Functions）两个选项，打上勾就可以了。</p><p>上面两个设置好后，之后的格式化代码操作（右键单击后选择 Format Document）就可以让代码调整为这些格式显示。</p><p><strong>一些更方便的设置：</strong></p><ul><li>右键单击输出窗口（OUTPUT）的顶部，选择 <code>Move Panel Right</code> ，可以将输出窗口移动到右侧；</li><li>右键单击文件的 <strong>Tab</strong> ，选择 <code>Split Right</code> ，可以在右边新开一个面板（Panel）来显示该文件，这样可以同时看多个文件内容；</li></ul><p><strong>VS Code 常用快捷键：</strong></p><ul><li>打开 <strong>Command Palette</strong> 可以搜索各种命令的快捷键：<code>Shift + ⌘ + P</code> ；</li><li>注释 / 取消注释某一行代码（光标位于这一行后再按快捷键组合）：<code>⌘ + /</code> ；</li><li>块注释（选中代码后）：<code>Shift + Option + A</code> ；</li></ul><p>更多有关 VS Code 的操作，可参考<a href="https://code.visualstudio.com/docs" target="_blank" rel="noopener">官方文档</a></p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Mac Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速上手 Python</title>
      <link href="/2018/05/10/python-basics/"/>
      <url>/2018/05/10/python-basics/</url>
      
        <content type="html"><![CDATA[<p>像 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript#" target="_blank" rel="noopener">JavaScript</a> 这类语言的设计，适合新手学习理解特别简单编程概念。比如<strong>函数</strong>。但如果要理解<strong>面向对象（Object Oriented）</strong>的概念，用 <strong>JavaScript</strong> 会比较绕。因为它设计比较奇怪，你得去理解一些专门针对 <strong>JavaScript</strong> 设计的东西。</p><p>相比之下，用 <a href="https://www.python.org" target="_blank" rel="noopener">Python</a> 来理解面向对象，思路会清晰很多。</p><hr><h3 id="Python-编程环境"><a href="#Python-编程环境" class="headerlink" title="Python 编程环境"></a>Python 编程环境</h3><p>一般推荐两个编辑器，或者说 IDE ，来快速实践各种代码：</p><ul><li><a href="https://code.visualstudio.com" target="_blank" rel="noopener">VS Code</a>：微软开发的一款超轻量 IDE ，<a href="http://teahour.fm/2017/12/12/why-vscode-is-better-than-atom.html" target="_blank" rel="noopener">Teahour 91期</a> 有介绍，使用方法参考 <a href="/2018/05/25/vscode-intro/">快速上手 VS Code</a></li><li><a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">PyCharm</a>：JetBrains 团队开发的一款 Python 的 IDE ，安装和使用方法参考这个 <a href="https://www.youtube.com/watch?v=BPC-bGdBSM8" target="_blank" rel="noopener">YouTube 视频</a> </li></ul><p>此外，还可以选择 <a href="/2018/05/27/set-up-anaconda/">安装配置 Anaconda</a> ，以使用 Anaconda 附带的 Python 在终端里运行。</p><pre><code class="lang-bash">## 通过 Homebrew 安装 python$ brew install python3## 查看 Python 的版本$ python3 --versionPython 3.6.5 :: Anaconda custom (64-bit)## 运行 *.py 的 Python 脚本文件$ cat ~/scripts/first_script.py         # 显示 first_script.py 文件里的内容print(&#39;Congratulations on running this script!!&#39;)$ python3 ~/scripts/first_script.py     # 用 python3 运行 first_script.py 文件Congratulations on running this script!!## 直接输入命令 python ，不带任何文件和参数，会进入 interactive interpreter（交互式解释器），可进行各种 Python 的语法测试$ python3[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)] on darwinType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt;exit()$</code></pre><p>PS:<br>个人推荐新手使用 <a href="https://code.visualstudio.com" target="_blank" rel="noopener"><strong>VS Code</strong></a> ，这东西介于编辑器和 IDE（Integrated Development Environment）之间，既有编辑器的简洁，又有 IDE 的强大功能，关键是安装配置起来特别简单，最适合新手。<br>可以参考这篇<a href="/2018/05/25/vscode-intro/">上手 Visual Studio Code</a> 设置 Python 的运行环境。</p><hr><h3 id="Python-的一些基本规则"><a href="#Python-的一些基本规则" class="headerlink" title="Python 的一些基本规则"></a>Python 的一些基本规则</h3><ol><li>变量区分大小写，即 case sensitive</li><li>空格重要，附带语意，即 spacing matters</li><li>运算符号有优先级（比如乘除法 * / 优先级高于加减法 +-）</li><li>运算的优先级可以使用括号来确定：优先级方向为从里往外</li><li>Python 中名为 <code>_</code> 的特殊变量（underscore variable）通常代表忽略这个值，其他详细参见<a href="https://hackernoon.com/understanding-the-underscore-of-python-309d1a029edc" target="_blank" rel="noopener">这里</a></li><li>Python 变量名的规则不用 listSum 这种大小写混合，而是用下划线分隔多个单词，写成 list_sum 这样</li><li><p>Python 赋值时是「传址（引用）」效果，而不是「传值」效果。见下例：</p><pre><code class="lang-python"># 感受一下「传址」效果def li_round_change_value(li): for i,l in enumerate(li):   li[i] = round(float(l), 3)def li_round_doesnt_change_value(li): # 使用 map(function_to_apply, list_of_inputs) 将 list 里元素的类型变为浮点（float）型 li = list(map(lambda k:round(float(k), 3), li)) return litest_li = [9,13,5,2]print(li_round_doesnt_change_value(test_li)) # 输出 [9.0, 13.0, 5.0, 2.0] print(test_li) # 输出 [9, 13, 5, 2]li_round_change_value(test_li)print(test_li) # 输出 [9.0, 13.0, 5.0, 2.0]</code></pre></li></ol><p>附：<br><a href="https://www.jianshu.com/p/a793c0d960fe" target="_blank" rel="noopener">Python 命名规范</a></p><hr><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul><li><p>整数 - <strong>int</strong></p><pre><code class="lang-bash">&gt;&gt;&gt; 2 * 36&gt;&gt;&gt; 3 // 2  # 取整1</code></pre></li><li><p>浮点数 - <strong>float</strong><br>整数和浮点数在电脑里是有差别的，整数和浮点数混合计算会被转化为浮点数，结果也是浮点数</p><pre><code class="lang-bash">&gt;&gt;&gt; 3 / 21.5&gt;&gt;&gt; 1.5 * 23.0</code></pre></li><li><p>复数 - <strong>complex</strong><br>这是一种用于数学计算的数据类型，Python 中用 <code>j</code> 来表示虚数</p><pre><code class="lang-bash">&gt;&gt;&gt; (1 + 2j) * (1 + 2j)(-3+4j)</code></pre></li><li><p>字符串 - <strong>string</strong><br>可以用单引号 <code>&#39;hello&#39;</code> ，也可以用双引号 <code>&quot;hello&quot;</code><br>一个常用的字符串方法：<a href="https://docs.python.org/3/library/stdtypes.html#str.split" target="_blank" rel="noopener"><code>str.split()</code></a></p><pre><code class="lang-bash">&gt;&gt;&gt; &#39;1,2,3&#39;.split(&#39;,&#39;)[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]&gt;&gt;&gt; &#39;1,2,3&#39;.split(&#39;,&#39;, maxsplit=1)[&#39;1&#39;, &#39;2,3&#39;]&gt;&gt;&gt; &quot;1,2,,3,&quot;.split(&#39;,&#39;)[&#39;1&#39;, &#39;2&#39;, &#39;&#39;, &#39;3&#39;, &#39;&#39;]</code></pre></li><li><p>布尔类型 - <strong>bool</strong><br>Python 中不用 <code>&amp;&amp;</code> 而是用 <code>and</code> 来代表「<strong>且</strong>」<br>其实 <code>&amp;&amp;</code> 并不是一个好设计，因为这个符号没有 <code>and</code> 直观易懂</p><pre><code class="lang-bash">&gt;&gt;&gt; 1&lt;2 and 3&gt;4False&gt;&gt;&gt; 1&lt;2 or 3&gt;4True&gt;&gt;&gt; not 1&lt;2False&gt;&gt;&gt; 1 == 2False&gt;&gt;&gt; type(1==2)&lt;class &#39;bool&#39;&gt;                # 注意这里返回的类型，不是「字符串」&gt;&gt;&gt; type(type(1==2))&lt;class &#39;type&#39;&gt;                # 它是一个 type 类，即 class &#39;type&#39;&gt;&gt;&gt; type(1==2) == &quot;bool&quot;      # 所以不能用这种方式来判断数据的类型False&gt;&gt;&gt; type(1==2) == type(1&lt;2)   # 对应地，可以用这种方式来判断数据类型True&gt;&gt;&gt; type(1==2) == type(False) # Python 的类型设计是要比 JavaScript 严格很多的True                          # 所以做科学计算或者 AI 用的就是 Python 而不是 JavaScript## 正规判断类型的方法是用 isinstance(object, type)&gt;&gt;&gt; isinstance(2, bool)False&gt;&gt;&gt; isinstance(2 &lt; 3, bool)True</code></pre></li><li><p><strong>None</strong><br>这是 Python 里面的一种专门的数据类型，代表「没有」，类似 JavaScript 里的 Null</p><pre><code class="lang-bash">&gt;&gt;&gt; None         # 注意第一个字母 N 是大写&gt;&gt;&gt; x = None&gt;&gt;&gt; x            # 没输出不显示&gt;&gt;&gt; print(x)     # 用 print 能打印出来None&gt;&gt;&gt; print(None)None</code></pre></li></ul><hr><h3 id="基本的数据结构"><a href="#基本的数据结构" class="headerlink" title="基本的数据结构"></a>基本的数据结构</h3><ul><li><p>列表 - <strong>List</strong><br>在编程中，「<code>链表（Linked List）</code>」和「<code>列表（List）</code>」通常不是同一个概念：<br><strong>链表</strong>是一种数据结构，由一系列节点组成，每个节点包含数据以及指向下一个节点的指针；<br><strong>列表</strong>是一种抽象数据类型（ADT），用来存储一系列元素的有序集合。列表可以有不同的实现方式，包括数组、链表等，甚至可以是其他数据结构的组合。<strong>链表</strong>是<strong>列表</strong>的一种实现方式；<br>在编程中，「<strong>列表</strong>」通常更广泛地指代一种抽象数据类型，而「<strong>链表</strong>」则更具体地指代一种特定的数据结构。<br>因此，它们的主要区别在于抽象性和具体性；</p><pre><code class="lang-bash">&gt;&gt;&gt; li = [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]## li 的定义看起来像数组，但其实不是，它的类型是 class &#39;list&#39;## 但你可以认为它就是一个数组&gt;&gt;&gt; type(li)&lt;class &#39;list&#39;&gt;## 所以你可以用下标访问 - 下标从 0 开始&gt;&gt;&gt; li[0]1## slice 操作## 访问 list 中下标从 0 到 2 的部分 - 注意这里不包括 li[2]## 相当于 [0, 2) 的感觉&gt;&gt;&gt; li[0:2][1, 2]## 访问从头到某个下标（不包括 li[1]）&gt;&gt;&gt; li[:1][1]## 访问从某个下标到最后&gt;&gt;&gt; li[1:][2, 3]## 赋值或者定义的时候，传递的是引用，而不是复制一份&gt;&gt;&gt; li[1, 2, 3]&gt;&gt;&gt; li2 = li&gt;&gt;&gt; li2[1] = 9    # 可以看到 li2 改变的同时，li 也被改变了&gt;&gt;&gt; li[1, 9, 3]## 如果要复制一份而不是传递引用，需要用 .copy() 这个方法&gt;&gt;&gt; li2 = li.copy()&gt;&gt;&gt; li[1] = 2&gt;&gt;&gt; li2[1, 9, 3]&gt;&gt;&gt; li[1, 2, 3]     # 所以在使用 python 的时候你要注意它是同一个对象还是不同的## 越界访问会报错 - 这是个好设计## 如果返回 undefined 之类的数据，就有可能被到处传递引发潜在问题而难以被定位纠正&gt;&gt;&gt; li[3]Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;IndexError: list index out of range## 计算列表长度&gt;&gt;&gt; len(li)3## 使用 dir 可以看到一个类型（对象）里有哪些方法（methods）&gt;&gt;&gt; dir(li)[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__class_getitem__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__reversed__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;append&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;sort&#39;]## 按 2 次 Tab 键进行补全，它就会提示你当前可用的所有方法（methods）&gt;&gt;&gt; li.li.append(  li.copy(    li.extend(  li.insert(  li.remove(  li.sort(li.clear(   li.count(   li.index(   li.pop(     li.reverse(## 插入元素 - 这里 insert 元素到开头还是比较费事的，不像 pair 那种 list 时间复杂度只有 O(1)## 为了程序的效率，一般不会把东西插到中间&gt;&gt;&gt; li.insert(0, 9)&gt;&gt;&gt; li[9, 1, 2, 3]## 排序&gt;&gt;&gt; li.sort()&gt;&gt;&gt; li[1, 2, 3, 9]## 取出最后一个元素&gt;&gt;&gt; li.pop()9&gt;&gt;&gt; li[1, 2, 3]## 列表里增加新元素（element）## 效果一&gt;&gt;&gt; li.append([4])&gt;&gt;&gt; li[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, [4]]  # 可以看到 list 里每个元素的类型不一定要相同 ## 效果二&gt;&gt;&gt; li.extend([4])&gt;&gt;&gt; li[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, [4], 4]## 效果三&gt;&gt;&gt; li + [5][&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, [4], 4, 5]&gt;&gt;&gt; li[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, [4], 4]## 使用「列表推导式（List Comprehension）」来生成 List&gt;&gt;&gt; li_c = [x**2 for x in range(10)]&gt;&gt;&gt; li_c[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]# 「列表推导式」中的 if&gt;&gt;&gt; [x for x in li_c if x % 2 == 0][0, 4, 16, 36, 64]## 「列表推导式」中的 if-else## 注意这里用了跟上面单纯的 if 不同的结构，所以 if 和 for 的位置顺序也不一样  ## The expression 「 x if C else y 」 first evaluates the condition, C rather than x. ## If C is true, x is evaluated and its value is returned.## Otherwise, y is evaluated and its value is returned.&gt;&gt;&gt; [x if x % 2 == 0 else 3 for x in li_c][0, 3, 4, 3, 16, 3, 36, 3, 64, 3]## 「列表推导式」中的「列表推导式」- 嵌套&gt;&gt;&gt; [ [x**2 for x in li] for li in [[1,3,5], [2,4,6]] ][[1, 9, 25], [4, 16, 36]]## 对 List 中的元素进行 map 操作&gt;&gt;&gt; list(map(lambda x:x+1, li_c))[1, 2, 5, 10, 17, 26, 37, 50, 65, 82]</code></pre></li><li><p>元组 - <strong>tuple</strong><br><code>tuple</code> 和 <code>list</code> 的区别在于，<code>tuple</code> 是不可更改的</p><pre><code class="lang-bash">## Tuple 用的是括号来表示，区别于 list 的方括号 []&gt;&gt;&gt; t = (1, 2, 3, 4, 5, 5, 5)&gt;&gt;&gt; t[1]2## 无法更改&gt;&gt;&gt; t[1] = 0Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;TypeError: &#39;tuple&#39; object does not support item assignment## len 函数可以接收多种数据类型 - 这里是一个面向对象语言好的地方&gt;&gt;&gt; len(t)7</code></pre></li><li><p>字典 - <strong>dict</strong><br>字典本质上就是哈希表，即键值对（key-value pair）。比如对于 <code>{&#39;Ace&#39;: 1, &#39;Queen&#39;: 12}</code> 这一字典来说，<strong>‘Ace’</strong> 和 <strong>‘Queen’</strong> 就是<strong>键</strong>（Key），而对应的 <strong>1</strong> 和 <strong>12</strong> 就是<strong>值</strong>（Value）</p><pre><code class="lang-bash">## dict 用花括号来表示，类型是 class &#39;dict&#39;&gt;&gt;&gt; d = {&#39;a&#39;: 1, &#39;b&#39;: 2}&gt;&gt;&gt; d{&#39;a&#39;: 1, &#39;b&#39;: 2}&gt;&gt;&gt; type(d)&lt;class &#39;dict&#39;&gt;## 你需要用下标来访问，而不能当成对象（object）来用## Python 里把 dict 和 object 区分开了 - 这是一个好设计&gt;&gt;&gt; d[&#39;a&#39;]1&gt;&gt;&gt; d.a                                # 用 .a 来访问会报错Traceback (most recent call last):  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;AttributeError: &#39;dict&#39; object has no attribute &#39;a&#39;## 修改和添加&gt;&gt;&gt; d[&#39;a&#39;] = 5         # 赋值&gt;&gt;&gt; d[&#39;c&#39;] = 12        # 添加新的 key&gt;&gt;&gt; d{&#39;a&#39;: 5, &#39;b&#39;: 2, &#39;c&#39;: 12}## 判断某个 key 是否存在与某个字典中（注：case sensitive）&gt;&gt;&gt; &quot;ace&quot; in {&#39;ace&#39;: 1}True## 计算字典长度&gt;&gt;&gt; state_value = {(6, 10, False): -1.0, (15, 10, False): -1.0}&gt;&gt;&gt; len(state_value)2## 使用「列表推导式（List Comprehension）」来生成字典（dictionary）&gt;&gt;&gt; vocab_to_int = {word: ii for ii, word in int_to_vocab.items()}## 这里也可以用「列表推导式（List Comprehension）」来实现使用函数 f 来对字典的内容进行 Map{k: f(v) for k, v in my_dictionary.items()}</code></pre><p>模组 <a href="https://docs.python.org/3/library/collections.html" target="_blank" rel="noopener"><strong>collections</strong></a> 中的 <strong>defaultdict</strong> 类能更方便地处理 value 为列表（list）、字典（dictionary）的情况，其用法参见<a href="https://www.accelebrate.com/blog/using-defaultdict-python/" target="_blank" rel="noopener">Using defaultdict in Python</a></p><pre><code class="lang-bash">&gt;&gt;&gt; from collections import defaultdict&gt;&gt;&gt; city_list = [(&#39;TX&#39;,&#39;Austin&#39;), (&#39;TX&#39;,&#39;Houston&#39;), (&#39;NY&#39;,&#39;Albany&#39;), (&#39;NY&#39;, &#39;Syracuse&#39;), (&#39;NY&#39;, &#39;Buffalo&#39;), (&#39;NY&#39;, &#39;Rochester&#39;), (&#39;TX&#39;, &#39;Dallas&#39;), (&#39;CA&#39;,&#39;Sacramento&#39;), (&#39;CA&#39;, &#39;Palo Alto&#39;), (&#39;GA&#39;, &#39;Atlanta&#39;)]&gt;&gt;&gt;&gt;&gt;&gt; cities_by_state = defaultdict(list)&gt;&gt;&gt; for state, city in city_list:...     cities_by_state[state].append(city)...for state, cities in cities_by_state.iteritems():...     print state, &#39;, &#39;.join(cities)...NY Albany, Syracuse, Buffalo, RochesterCA Sacramento, Palo AltoGA AtlantaTX Austin, Houston, Dallas</code></pre></li><li><p>集合 - <strong>set</strong><br>集合也是数学计算中会常用到的数据结构：</p><pre><code class="lang-bash">## Set 也是花括号，可以注意到内部的顺序是乱的&gt;&gt;&gt; s = {&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;t&#39;, &#39;hello&#39;}&gt;&gt;&gt; s{&#39;t&#39;, &#39;b&#39;, &#39;hello&#39;, &#39;c&#39;, &#39;a&#39;}## 增加元素&gt;&gt;&gt; s.add(&#39;world&#39;)&gt;&gt;&gt; s{&#39;world&#39;, &#39;t&#39;, &#39;b&#39;, &#39;hello&#39;, &#39;c&#39;, &#39;a&#39;}## 判断某个元素是否存在 - 可以认为这是个二元操作（binop）&gt;&gt;&gt; &#39;t&#39; in sTrue&gt;&gt;&gt; &#39;hi&#39; in sFalse## set 的相关运算&gt;&gt;&gt; s2 = {&#39;a&#39;, &#39;t&#39;, &#39;world&#39;, &#39;y&#39;, &#39;i&#39;}&gt;&gt;&gt; s - s2{&#39;b&#39;, &#39;hello&#39;, &#39;c&#39;}&gt;&gt;&gt; s{&#39;world&#39;, &#39;t&#39;, &#39;b&#39;, &#39;hello&#39;, &#39;c&#39;, &#39;a&#39;}             # 不会改变原来的集合 s&gt;&gt;&gt; s.intersection(s2){&#39;world&#39;, &#39;t&#39;, &#39;a&#39;}                                # 交集&gt;&gt;&gt; s.union(s2){&#39;world&#39;, &#39;t&#39;, &#39;b&#39;, &#39;c&#39;, &#39;i&#39;, &#39;y&#39;, &#39;hello&#39;, &#39;a&#39;}   # 并集</code></pre></li></ul><hr><h3 id="Python-中的注释"><a href="#Python-中的注释" class="headerlink" title="Python 中的注释"></a>Python 中的注释</h3><ul><li>以 <code>#</code> 开头的行</li><li>以 <code>&quot;&quot;&quot;</code>（三个双引号）包裹的代码块（Code Block）</li></ul><pre><code class="lang-python">## codes by chpwang - 2018-05-17 04:57:56&quot;&quot;&quot;任务3:xxxxxx&quot;&quot;&quot;</code></pre><hr><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><p>Python 里面定义变量不需要 <code>var</code> 这类关键词，直接写就行，末尾也不用分号。</p><pre><code class="lang-python">## 变量定义x = 2 * 3## 赋值x = 12## 变量定义还可以解析结构l1 = [9, 8][u, v] = l1print(u)  # 9print(v)  # 8</code></pre><hr><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>Python 里面经常用「冒号」来分隔语言的各个部分。这里参数后面是冒号。新手要注意，冒号容易忘记写。</p><pre><code class="lang-python">## 匿名函数 x =&gt; x * xlambda x: x * x## 函数调用(lambda x: x * x)(3)## 函数定义square1 = lambda x: x*xdef square2(x): return x*x## 这里「缩进」很重要，python 靠缩进来判断函数体## 如果函数体语句多，注意缩进要对齐，不能有的缩进 2 格，有的只缩进 1 格## 「缩进」是一种危险的糟糕设计，容易出错，比如有时 return 缩进错了，可能就跑到外部去了## 缩进设计似乎只是为了少写一些括号def square3(x):  return x*xresult1 = 10result2 = 10## square4 中的 result 是局部变量，不改变外面的 resultdef square4(x):  result1 = x*x  return result## 加了 global 关键词后，square5 中的 result 就是全局变量了## 调用 square5 会改变外面的 resultdef square5(x):  global result  result = x*x  return resultprint(square4(4))  # 16print(result1)     # 10print(square5(4))  # 16print(result1)     # 16## 函数也可以什么都不做，但要写一个 pass ，不能什么都不写def do_nothing(x):  pass</code></pre><pre><code class="lang-bash">&gt;&gt;&gt; def minus(x, y): return x - y...&gt;&gt;&gt; minus(9, 6)3&gt;&gt;&gt; minus(y=9, x=6)  # python 的函数调用可以指定参数的值，这样可以无视参数的调用顺序-3                   # 好处是如果参数比较多，把各参数名和值写上，代码阅读起来就很直观 - 这是个好设计</code></pre><hr><h3 id="条件分支-if-语句"><a href="#条件分支-if-语句" class="headerlink" title="条件分支 - if 语句"></a>条件分支 - if 语句</h3><p><strong>注意</strong>，<code>else if</code> 分支在这里写作 <code>elif</code></p><pre><code class="lang-python">def fib(n):  if n == 0:    return 0  elif n == 1:    return 1  else:    return fib(n-1) + fib(n-2)if season == &#39;spring&#39;:    print(&#39;plant the garden!&#39;)elif season == &#39;summer&#39;:    print(&#39;water the garden!&#39;)else:    print(&#39;unrecognized season&#39;)## 三元操作符（Ternary Operator）写法x = true_value if condition else false_value## lambda 中的 if - 无法在 lambda 匿名函数中使用 print 打印，或者 raise 报错lambda x: True if x % 2 == 0 else False</code></pre><hr><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><pre><code class="lang-bash">## Python 中的循环一般不用下标&gt;&gt;&gt; a = [2, 3, 4, 6]&gt;&gt;&gt; for x in a:...  print(x)...2346## 可以使用这种模式匹配来直接取出 key 和 value 而不用后续访问下标 - 这是好设计&gt;&gt;&gt; for [k, v] in [[&quot;dog&quot;, 1], [&quot;cat&quot;, 2], [&quot;fish&quot;, 3]]:...     print(f&quot;{k}: {v}&quot;)...dog: 1cat: 2fish: 3## 模式匹配（pattern match）还可以用于赋值，比如交换变量的数据&gt;&gt;&gt; [x, y] = [3, 4]&gt;&gt;&gt; x3&gt;&gt;&gt; y4&gt;&gt;&gt; [x, y] = [y, x]&gt;&gt;&gt; x4&gt;&gt;&gt; y3## 和 range(start, stop, step) 函数结合使用&gt;&gt;&gt; for i in range(0, 2, 1):...     print(i)...01## 这里说明一下这个 range## 可以认为 range(5) 的效果就相当于生成了一个 [0, 1, 2, 3, 4] 这样的 list## 然后我们就可以 for i in range(5)## 虽然效果上是一样的，但实际上 range 不会真的生成一个 list## range 多用于循环，如果真生成一个 list ，就会影响计算性能并占用空间## 比如这样一来 range(1000000) 就很吃计算资源了## range 实际上生成的是一种 lazy list（惰性列表）## 惰性列表的意思是，它不会真的给你放到内存里面去## range(5) 会返回一个 range 对象，按需计算元素的值，内存高效（memory efficient）## python 中的 for 循环都要用 for x in ... 这种形式，如果 x 是是数字，就要用这个 range## 有人认为这样的 for 循环表达能力有限，不能表达复杂的逻辑，range 只能表达简单的数字## 比如无法写出类似 for(var i=0, j=array.length; i &lt; j; i++, j--) 的代码## 但其实这是 python 的一个好设计。当表达不了的时候，就不应该使用 for 循环，而要改用 while 循环## 上述复杂的 for 循环需要思考到底是先判断 i &lt; j 还是先计算 i++ 和 j--，不利于代码阅读理解## 用 reversed 配合 range 倒数## 写成 for i in range(4, -1, -1) 虽然是同样的效果，但阅读理解上不直观&gt;&gt;&gt; for i in reversed(range(0, 5)):...     print(i)...43210# 和 zip() 函数结合使用&gt;&gt;&gt; alist = [&#39;a1&#39;, &#39;a2&#39;, &#39;a3&#39;]&gt;&gt;&gt; blist = [&#39;b1&#39;, &#39;b2&#39;, &#39;b3&#39;]&gt;&gt;&gt; for a, b in zip(alist, blist):...     print(a, b)...a1 b1a2 b2a3 b3## upack 一个 list 也是常用的循环 - 若觉得下行的说明不清楚就开终端试一试## 此例第 1 次循环取出第一个元素 [1, 3]，然后把第一项和第二项分别赋值给 a 和 b&gt;&gt;&gt; for a, b in [[1,3],[2,4]]:...     print(a)...     print(b)...1324## 使用 * （星号 star）和 zip 来操作 list## 下划线符号：_ 在 Python 中代表占位符，相当于吃掉这两个位置的输出 - 下面的代码原本会输出 3 个结果，但只想要其中最后一个结果，所以使用下划线来抛弃前两个结果 &gt;&gt;&gt; _, _, rewards = zip(*[((6, 10, False), 1, 0), ((17, 10, True), 1, 0), ((21, 10, True), 0, 1.0)])&gt;&gt;&gt; rewards(0, 0, 1.0)## while 循环&gt;&gt;&gt; while i &lt; 6:...   print(i)...   if i==3:...     break...   i += 1...123</code></pre><hr><h3 id="类-class"><a href="#类-class" class="headerlink" title="类 - class"></a>类 - class</h3><p>这里以实现查找表为例演示 <code>class</code> 的用法：</p><ul><li>类里面的函数的第一个参数都是 <code>self</code> ，也就是自己</li><li>类里面默认要有 <code>__init__</code> 函数作为「构造函数」，如果没写 Python 也会给一个默认的</li></ul><pre><code class="lang-python">## Map 没有定义 __init__ ，但还是程序还是会给它一个默认的 __init__class Map:  def print_data(self):    print(&quot;data: &quot; + str(self.data))class Table:  def __init__(self):    self.data = []  def add(self, key, value):    self.data.insert(0, [key, value])  def lookup(self, key):    for [k, v] in self.data:      if k == key:        return v    return Noneclass Hash:  def __init__(self):    self.data = {}  def add(self, key, value):    self.data[key] = value  def lookup(self, key):    return self.data[key]</code></pre><hr><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>这里介绍的是常用的输出语法，更详细的介绍可以参考这篇 <a href="https://www.digitalocean.com/community/tutorials/how-to-use-string-formatters-in-python-3" target="_blank" rel="noopener">How to use <strong><em>str.format()</em></strong></a></p><pre><code class="lang-bash">## 普通输出 - 使用 {} 占位，.format() 填充占位符&gt;&gt;&gt; print(&quot;{} ~ {}% dog wins.&quot;.format(3, 9))3 ~ 9% dog wins.## 保留 5 位小数&gt;&gt;&gt; print(&quot;{} - {:.5f}&quot;.format(3,9.0/3.5))3 - 2.57143## 保留 1 位小数&gt;&gt;&gt; print(&quot;{} - {:.1f}&quot;.format(3,9.0/3.5))3 - 2.6</code></pre><p>在 Python 中，还可以使用 <code>f-string</code> 这种种字符串格式化的方法来输出。只需在<strong>字符串</strong>前加上字母 <code>f</code> 或 <code>F</code> ，然后在字符串中使用花括号 <code>{}</code> 包裹要插入的变量或表达式：</p><pre><code class="lang-python">name = &quot;Alice&quot;age = 30height = 1.75print(f&quot;My name is {name}, I am {age} years old.&quot;)    # 使用 f-string 插入变量值# My name is Alice, I am 30 years old.print(f&quot;Next year, I will be {age + 1} years old.&quot;)   # 可以在 f-string 中进行简单的表达式计算# Next year, I will be 31 years old.print(f&quot;My height is {height:.2f} meters.&quot;)           # 使用 f-string 格式化浮点数# My height is 1.75 meters.</code></pre><hr><h3 id="自解释器"><a href="#自解释器" class="headerlink" title="自解释器"></a>自解释器</h3><p>Python 中的内置函数 <code>eval</code> 可以将字符串解析成 Python 的代码</p><pre><code class="lang-python">## test.pynum = 30x = eval(&quot;num + 29&quot;)print(x)</code></pre><pre><code class="lang-bash">$ python test.py59</code></pre><hr><h3 id="创建与导入脚本"><a href="#创建与导入脚本" class="headerlink" title="创建与导入脚本"></a>创建与导入脚本</h3><p>处理大型项目时，可以将代码分割，整理成多个 <code>*.py</code> 文件以便重复利用这些文件中的代码。这些 <code>*.py</code> 文件称为脚本（script）。如果你要导入的 Python 脚本与当前脚本位于同一个目录下，只需输入 import，然后是文件名，无需扩展名 <code>.py</code></p><pre><code class="lang-python">## demo.pyimport useful_functions as ufscores = [88, 92, 79, 93, 85]mean = uf.mean(scores)print(&quot;Demo Mean:&quot;, mean)print(&quot;__name__ value:&quot;, __name__)print(&quot;uf.__name__ value:&quot;, uf.__name__)</code></pre><pre><code class="lang-python">## useful_functions.pydef mean(num_list):    return sum(num_list) / len(num_list)def main():    n_list = [34, 44, 23, 46, 12, 24]    print(&quot;Useful Functions&#39; Mean:&quot;, mean(n_list))# 检测当前脚本（即 useful_functions.py）是否做为主模块被运行# 当前脚本若是被其他脚本的 import 语句导入，则下面的 if main 块代码不运行if __name__ == &#39;__main__&#39;:    main()</code></pre><p>运行结果如下：</p><pre><code class="lang-bash">$ lsdemo.py             useful_functions.py$ python demo.pyDemo Mean: 87.4__name__ value: __main__uf.__name__ value: useful_functions</code></pre><p>人们通常只希望重复使用被导入脚本里的「函数」或「类」，而不是其他可执行代码（如 <code>print()</code>），所以为避免「<strong>脚本A</strong>」被导入后，其中的可执行语句被运行，应该要将这些语句包含在 <code>if __name__ == &quot;__main__&quot;</code>块中，或者，将它们包含在函数 <code>main()</code> 中并在上述 <code>if main</code> 块中调用该函数。</p><p>每当运行脚本时（<code>*.py</code> 文件），Python 会为所有模块（module）设置一个特殊的内置变量 <code>__name__</code>。这些模块包含导入模块（用 <code>import</code> 语句导入的），还有主模块（即当前脚本）。主模块的 <code>__name__</code> 变量值会被设为字符串 <code>&quot;__main__&quot;</code>，而对于被导入的模块，<code>__name__</code> 变量会设为该模块的名称。因此 <code>if main</code> 代码块常用来判断是否为主模块。</p><p>PS：<br>从输出结果可看到，上述例子中，被导入模块的 <code>__name__</code> 值为 <code>&quot;useful_functions&quot;</code></p><hr><h3 id="自定义一个类-复杂例子"><a href="#自定义一个类-复杂例子" class="headerlink" title="自定义一个类 - 复杂例子"></a>自定义一个类 - 复杂例子</h3><pre><code class="lang-python">import mathfrom decimal import Decimal, getcontext## 设置 Decimal 数据类型的小数点后保留的位数getcontext().prec = 19## 用来辅助判断一个数是否为零（小于此值则为零）TOLERANCE = 1e-10class Vector(object):  ## 设置报错信息  ALL_ELEMENT_MUST_BE_NUM_MSG = &quot;Element must be number!&quot;  ## 实例（instance）的创建  def __init__(self, coordinates):    try:      if not coordinates:          raise ValueError      self.coordinates = tuple([Decimal(x) for x in coordinates])      self.dimension = len(coordinates)    except ValueError:      raise ValueError(&#39;The coordinates must be nonempty&#39;)    except TypeError:      raise TypeError(&#39;The coordinates must be an iterable&#39;)  ## print 输出内容  def __str__(self):    return &#39;Vector: {}&#39;.format(self.coordinates)  ## 定义相等  def __eq__(self, v):    return self.coordinates == v.coordinates  def __len__(self):    return len(self.planes)  ## __getitem__ 这个函数使得对于 v = Vector([5, 3, -2]) ，可使用索引方式 v[1] 得到数字 3  def __getitem__(self, i):    return self.coordinates[i]  ## __setitem__ 这个函数使得对于 v = Vector([5, 3, -2]) ，可使用索引方式 v[1] = 9 将 v[1] 的值设置为 9  def __setitem__(self, i, x):    try:      assert x.dimension == self.dimension  # 如果设置的 x 不是数字，则报错      self.coordinates[i] = x    except AssertionError:      raise Exception(self.ALL_ELEMENT_MUST_BE_NUM_MSG)  ## 计算向量的加法  def plus(self, v):    new_coordinates = [x+y for x,y in zip(self.coordinates, v.coordinates)]    return Vector(new_coordinates)  ## 计算向量的减法  def minus(self, v):    return self.plus(v.times_scalar(-1))  ## 计算向量的数乘  def times_scalar(self, c):    new_coordinates = [x*c for x in self.coordinates]    return Vector(new_coordinates)  ## 计算向量与另一向量的点积（内积）  def dot_product_with(self, v):    new_coordinates = [x*y for x,y in zip(self.coordinates, v.coordinates)]    return sum(new_coordinates)  ## 计算向量的模  def magnitude(self):    return Decimal(math.sqrt(self.dot_product_with(self)))  ## 计算向量标准化后的向量（同方向上的单位向量）  def normalization(self):    try:      mag = self.magnitude()      return self.times_scalar(Decimal(1)/mag)    except ZeroDivisionError:      #print(&quot;You can&#39;t normalize Zero Vector!&quot;)      raise Exception(&quot;You can&#39;t normalize Zero Vector!&quot;)  ## 计算向量与另一向量的夹角  def angle_with(self, v, in_degrees=False):    try:      mag_1 = self.magnitude()      mag_2 = v.magnitude()      if in_degrees:        return math.degrees(math.acos(self.dot_product_with(v)/(mag_1*mag_2)))      else:        return math.acos(self.dot_product_with(v)/(mag_1*mag_2))    except ZeroDivisionError:      #print(&quot;At least one of the vector is Zero Vector! No angle defined.&quot;)      raise Exception(&quot;One of the vector is Zero Vector! No angle defined.&quot;)  ## 私有函数（private function）和变量，以两个下划线开头来命名  def __is_zero_vector(self):    return self.magnitude() &lt; TOLERANCE  def is_parallel_to(self, v):    if v.__is_zero_vector() or self.__is_zero_vector():      return True    else:      s_m = self.normalization()      v_m = v.normalization()      return s_m.minus(v_m).__is_zero_vector() or s_m.plus(v_m).__is_zero_vector()   def is_orthogonal_to(self, v):    return abs(self.dot_product_with(v)) &lt; TOLERANCE  ## 向量的分解 - 计算向量水平方向的分量  def component_parallel_to(self, base_vactor):    u_b = base_vactor.normalization()    mag = self.dot_product_with(u_b)    return u_b.times_scalar(mag)  ## 向量的分解 - 计算向量竖直方向的分量  def component_orthogonal_to(self, base_vactor):    c_p = self.component_parallel_to(base_vactor)    return self.minus(c_p)  ## 计算向量与另一向量的叉乘  def cross_product_with(self, v):    if self.dimension != 3 or v.dimension != 3:      raise Exception(&quot;Both cross product vectors must be three dimensional&quot;)    if self.is_parallel_to(v):      return Vector([0 for i in range(self.dimension)])    else:      x = self.coordinates[1]*v.coordinates[2] - self.coordinates[2]*v.coordinates[1]      y = self.coordinates[2]*v.coordinates[0] - self.coordinates[0]*v.coordinates[2]      z = self.coordinates[0]*v.coordinates[1] - self.coordinates[1]*v.coordinates[0]      return Vector([x, y, z])  ## 计算向量与另一向量的所围成的四边形的面积  def area_of_parallelogram_spanned_with(self, v):    new_self = self    new_v = v    if self.dimension == 2:      new_self = Vector(self.coordinates + (0,))    if v.dimension == 2:      new_v = Vector(v.coordinates + (0,))    return new_self.cross_product_with(new_v).magnitude()  ## 计算向量与另一向量的所围成的三角形的面积  def area_of_triangle_spanned_with(self, v):    return self.area_of_parallelogram_spanned_with(v) / Decimal(2)</code></pre><hr><h3 id="常用模组-Module"><a href="#常用模组-Module" class="headerlink" title="常用模组 - Module"></a>常用模组 - Module</h3><p><a href="https://docs.python.org/3/library/" target="_blank" rel="noopener">Python 的标准库</a>里包含了常用的 Module ，使用 <code>import</code> 语句可导入</p><p>以下是一些实用的模组（Module）：</p><ul><li><p><a href="https://docs.python.org/3/library/sys.html" target="_blank" rel="noopener">sys</a>：内建了很多好用的工具</p><pre><code class="lang-python">import sys## 工具一：sys.stdout.flush() ## 不断更新输出内容，而不是叠加输出（即每次删除上次的「显示结果」，然后显示当次的「显示结果」）for i_episode in range(1, num_episodes+1):        # monitor progress        if i_episode % 1000 == 0:            print(&quot;\rEpisode {}/{}.&quot;.format(i_episode, num_episodes), end=&quot;&quot;)            sys.stdout.flush()</code></pre></li><li><p><a href="https://docs.python.org/3/library/re.html" target="_blank" rel="noopener">re</a> ：通过正则表达式在字符串中进行模式匹配</p></li><li><p><a href="https://docs.python.org/3/library/math.html" target="_blank" rel="noopener">math</a> ：一些标准数学函数</p></li><li><p><a href="https://docs.python.org/3.6/library/fractions.html" target="_blank" rel="noopener">fractions</a>：此库最常用的是里面的 <code>Fraction</code>，分数（有理数）计算超方便</p><pre><code class="lang-python">from fractions import Fraction</code></pre></li><li><p><a href="https://docs.python.org/3/library/random.html" target="_blank" rel="noopener">random</a> ：生成假随机数字，随机打乱序列并选择随机项 </p></li><li><p><a href="https://docs.python.org/3/library/json.html" target="_blank" rel="noopener">json</a> ：适用于读写 json 文件（面向网络开发）</p></li><li><p><a href="https://docs.python.org/3/library/datetime.html" target="_blank" rel="noopener">datime</a> ：读取当前时间和日期</p></li><li><p><a href="https://docs.python.org/3/library/os.html" target="_blank" rel="noopener">os</a> ：与操作系统交互的操作</p><pre><code class="lang-python">import osos.chdir(path)  # 更改当前的工作目录（working directory）</code></pre></li><li><p><a href="https://docs.python.org/3/library/csv.html" target="_blank" rel="noopener">csv</a> ：处理 <code>.csv</code> 类型的文件</p></li><li><p><a href="https://docs.python.org/3/library/zipfile.html" target="_blank" rel="noopener">zipfile</a> ：处理 <code>.zip</code> 压缩文件</p></li><li><p><a href="https://docs.python.org/3/library/collections.html" target="_blank" rel="noopener">collections</a> ：常见数据类型的实用扩展，包括 OrderedDict、defaultdict 和 namedtuple</p></li><li><p><a href="https://docs.python.org/3/library/timeit.html" target="_blank" rel="noopener">timeit</a> ：显示<strong>简短的代码</strong>运行所花费的时间</p></li><li><p><a href="https://docs.python.org/3/library/profile.html" target="_blank" rel="noopener">cProfile 或 profile</a> ：显示<strong>大型项目</strong>运行所花费的时间</p></li></ul><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Programming Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rails 常用指令</title>
      <link href="/2018/01/31/rails-cheat-sheet/"/>
      <url>/2018/01/31/rails-cheat-sheet/</url>
      
        <content type="html"><![CDATA[<p>Rails 的开发环境的搭建参考<a href="/2017/03/14/setup-new-mac/">入手新 Mac 后的环境搭建</a><br>Rails 的关键知识学习请前往 <a href="https://fullstack.qzy.camp/dashboard" target="_blank" rel="noopener">Xdite 的全栈营</a></p><p>PS：<br>人们使用 Ruby 这门语言的原因仅仅是因为要用 Rails ，离开了 Rails , Ruby 这门语言就……所以你知道为啥说到 Ruby 就一定要说 Rails ，或者人们在谈论 Ruby 时，其实说的是 Rails 了吧</p><hr><h3 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h3><pre><code class="lang-bash">## 在当前目录下新建 Rails app$ rails new [app名]## Example$ rails new first_app## 打开服务器（网址通常是 http://localhost:3000）$ cd first_app$ rails s$ rails server## 查看路径$ rails routes## 数据库管理 Migration$ rails db:migrate      ## runs (single) migrations that have not run yet. - update schema.rb with all migrations$ rails db:create       ## creates the database$ rails db:drop         ## deletes the database$ rails db:schema:load  ## creates tables and columns within the (existing) database following schema.rb$ rails db:seed         ## load seed.rb - 按照 seed.rb 文件里的指令，创造数据并添加到数据库里$ rails db:setup        ## does db:create, db:schema:load, db:seed$ rails db:reset        ## does db:drop, db:setup$ rails db:rollback     ## 取消最近一次 migration 的加载 - 通常不用，改数据库强烈建议新增 Migration 来改，而不是执行 rollback ，rollback 建议最多只运行一次（退后一步）## 先 drop（删除）掉原先的数据库，再建立新的数据库，最后 migrate 加载所有 migrations$ rails db:drop db:create db:migrate## Example$ rails g controller groups$ rails g controller account/groups$ rails g controller account::groups</code></pre><hr><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>可以直接用一行代码新建 <strong>Model</strong>，适合 column 较少的情况</p><pre><code class="lang-bash">## 新建 Model$ rails g model [model 的名字] [参数名:参数类型] [参数名:参数类型] ...## Example$ rails g model job title:string description:text wage_upper_bound:decimal wage_lower_bound:decimal contact:text is_hidden:boolean</code></pre><p>也可以先生成 <strong>migration</strong> 文件，然后编辑该文件来生成</p><pre><code class="lang-bash">以下命令会生成一个 migration 文件 - db/migrate/20180423162706_create_[model 的名字].rb$ rails g model [model 的名字]# Example$ rails g model caseRunning via Spring preloader in process 44069      invoke  active_record      create    db/migrate/20180423162706_create_cases.rb      create    app/models/case.rb      invoke    test_unit      create      test/models/case_test.rb      create      test/fixtures/cases.yml</code></pre><p>找到并打开编辑 <code>db/migrate/20180423162706_create_[model 的名字].rb</code> 文件</p><pre><code class="lang-ruby">class CreateCases &lt; ActiveRecord::Migration[5.1]  def change    create_table :cases do |t|      t.string :nickname      t.text :summary      t.timestamps    end  endend</code></pre><p>无论采用上述哪种方式，最终都需要执行 <code>rails db:migrate</code> 来完成 <strong>Model</strong> 的建立</p><p>下面是如何给已有的 <strong>Model</strong> 添加 column</p><pre><code class="lang-bash">$ rails g migration [要添加的 migration 的名字]## Example$ rails g migration add_user_id_to_job</code></pre><pre><code class="lang-ruby">class AddUserIdToJob &lt; ActiveRecord::Migration[5.0]  def change    add_column :jobs, :user_id, :integer  endend</code></pre><p>重命名 Column - 注意 job 要复数（之前新建 model 时 Job 用的是单数 - <code>rails g model job title:string</code>）</p><pre><code class="lang-ruby">class ChangeWagesColumnNameInJob &lt; ActiveRecord::Migration[5.1]  def change    rename_column :jobs, :upper_wage, :wage_upper_bound    rename_column :jobs, :lower_wage, :wage_lower_bound  endend</code></pre><hr><h3 id="CRUD-模板"><a href="#CRUD-模板" class="headerlink" title="CRUD 模板"></a>CRUD 模板</h3><pre><code class="lang-ruby">class GroupsController &lt; ApplicationController  def index    @groups = Group.all  end  def new    @group = Group.new  end  def show    @group = Group.find(params[:id])  end  def edit    @group = Group.find(params[:id])  end  def create    @group = Group.new(group_params)    if @group.save      redirect_to groups_path    else      render :new    end  end  def update    @group = Group.find(params[:id])    if @group.update(group_params)      redirect_to groups_path, notice: &#39;Update Success&#39;    else      render :edit    end  end  def destroy    @group = Group.find(params[:id])    @group.destroy    redirect_to groups_path, alert: &#39;Group deleted&#39;  end  private  def group_params    params.require(:group).permit(:title, :description)  endend</code></pre><hr><h3 id="新手常用-Gem"><a href="#新手常用-Gem" class="headerlink" title="新手常用 Gem"></a>新手常用 Gem</h3><p><a href="https://github.com/plataformatec/devise" target="_blank" rel="noopener">Devise</a></p><pre><code class="lang-bash">$ rails g devise:install$ rails g devise user$ rake db:migrate</code></pre><p><a href="https://github.com/plataformatec/simple_form" target="_blank" rel="noopener">Simple Form</a></p><pre><code class="lang-bash">$ rails generate simple_form:install --bootstrap</code></pre><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby &amp; Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ruby 基本知识</title>
      <link href="/2018/01/22/Ruby-Basics/"/>
      <url>/2018/01/22/Ruby-Basics/</url>
      
        <content type="html"><![CDATA[<h3 id="Ruby-安装"><a href="#Ruby-安装" class="headerlink" title="Ruby 安装"></a>Ruby 安装</h3><p>在 Mac 电脑上，虽然安装好 Xcode 会自带 Ruby ，不过人们通常还是使用 <a href="https://rvm.io" target="_blank" rel="noopener">RVM</a> - Ruby Version Manager 来管理 Ruby 的各种版本</p><pre><code class="lang-bash">## 安装 RVM - Ruby Version Manager 用来管理 Ruby 的版本$ \curl -sSL https://get.rvm.io | bash -s stable$ source ~/.rvm/scripts/rvm    ## 安装完 rvm 会提示使用该命令来让 rvm 生效 ## 安装所需版本的 Ruby - 以 2.3.1 版本为例$ rvm install 2.3.1$ rvm list                ## 该命令可查看本地存在的所有 Ruby 的版本$ rvm use 2.3.1 --default ## 该命令用于设置默认的 Ruby 版本$ gem update --system     ## 用于救回安装 rvm 过程中网络等原因造成的中断失败$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/  #设置新的 gem 的来源网站</code></pre><hr><h3 id="IRB-Interactive-Ruby-Shell"><a href="#IRB-Interactive-Ruby-Shell" class="headerlink" title="IRB - Interactive Ruby Shell"></a>IRB - Interactive Ruby Shell</h3><p>IRB 一般用于测试 Ruby 的语法<br>安装完某个版本的 Ruby 后，打开 Mac 电脑上的 Terminal.app（终端）输入指令 <code>irb</code> 就可以体验 Ruby 了，有兴趣可到 <a href="http://tryruby.org" target="_blank" rel="noopener">Try Ruby</a> 感受更多操作</p><pre><code class="lang-bash">## 进入 Interactive Ruby$ irb 2.3.1 :001 &gt;</code></pre><hr><h3 id="计算和赋值"><a href="#计算和赋值" class="headerlink" title="计算和赋值"></a>计算和赋值</h3><pre><code class="lang-bash">## 在 irb 使用 Ruby 编程 - 计算和赋值$ irb 2.3.1 :001 &gt; 3+9 =&gt; 12 2.3.1 :002 &gt; 1024/8 =&gt; 128 2.3.1 :003 &gt; my_var=29 =&gt; 29 2.3.1 :004 &gt; my_var=my_var+2 =&gt; 31 2.3.1 :005 &gt; my_var=my_var/2 =&gt; 15 2.3.1 :006 &gt; my_var=my_var/2.0 =&gt; 7.5</code></pre><hr><h3 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 - Array"></a>数组 - Array</h3><pre><code class="lang-bash">2.3.1 :007 &gt; fruits = [&quot;kiwi&quot;, &quot;strawberry&quot;, &quot;plum&quot;] =&gt; [&quot;kiwi&quot;, &quot;strawberry&quot;, &quot;plum&quot;] 2.3.1 :008 &gt; fruits = fruits + [&quot;orange&quot;] =&gt; [&quot;kiwi&quot;, &quot;strawberry&quot;, &quot;plum&quot;, &quot;orange&quot;] 2.3.1 :009 &gt; fruits = fruits + [&quot;kiwi&quot;] =&gt; [&quot;kiwi&quot;, &quot;strawberry&quot;, &quot;plum&quot;, &quot;orange&quot;, &quot;kiwi&quot;] 2.3.1 :010 &gt; fruits = fruits - [&quot;kiwi&quot;] =&gt; [&quot;strawberry&quot;, &quot;plum&quot;, &quot;orange&quot;]</code></pre><p>PS：可以观察到 Ruby 里数组的特点：后进的排后面；一删删全部等等</p><pre><code class="lang-ruby">## 数组的一些常用操作&gt; [1,2,3] &amp; [2,3,4] &amp; [0,2,6]   ## 多个数组求并集（intersection） =&gt; [2]</code></pre><hr><h3 id="类-Class"><a href="#类-Class" class="headerlink" title="类 - Class"></a>类 - Class</h3><p>Ruby 里常见的类有：<strong>Fixnum</strong>、<strong>String</strong> 和 <strong>Array</strong> 等等，可以通过使用 <code>.class</code> 的方式查看某种数据的类</p><pre><code class="lang-bash">2.3.1 :011 &gt; 29.class =&gt; Fixnum 2.3.1 :012 &gt; &quot;Twentynight&quot;.class =&gt; String 2.3.1 :013 &gt; fruits.class =&gt; Array</code></pre><hr><h3 id="方法-Methods"><a href="#方法-Methods" class="headerlink" title="方法 - Methods"></a>方法 - Methods</h3><p>Ruby 里每个<strong>类</strong>（Class）都包含多种<strong>方法</strong>（Methods），可用 <code>.[方法]</code> 的方式调用</p><pre><code class="lang-bash">2.3.1 :014 &gt; fruits =&gt; [&quot;strawberry&quot;, &quot;plum&quot;, &quot;orange&quot;]2.3.1 :015 &gt; fruits.length =&gt; 3 2.3.1 :016 &gt; fruits.first =&gt; &quot;strawberry&quot;</code></pre><p>还可以使用 <code>.methods</code> 的方式查看该<strong>类</strong>所包含的方法，而由于输出结果的类型属于<strong>数组</strong>（Array），所以可以进一步使用 <code>.methods.sort</code> 对结果排序</p><pre><code class="lang-bash">2.3.1 :017 &gt; fruits.methods =&gt; [:fill, :assoc, :rassoc, ... , :instance_exec, :__id__]2.3.1 :018 &gt; fruits.methods.sort =&gt; [:!, :!=, :!~, :&amp;, ... , :values_at, :zip, :|]</code></pre><p>此外，也可以自行定义<strong>方法</strong>（Methods）</p><pre><code class="lang-bash">2.3.1 :019 &gt; def pluralize(word)2.3.1 :020?&gt;   word + &quot;s&quot;2.3.1 :021?&gt;   end =&gt; :pluralize 2.3.1 :022 &gt; pluralize(&quot;apple&quot;) =&gt; &quot;apples&quot;</code></pre><p>注：<br>面向对象的语言里所谓的<strong>方法</strong>（Methods）其实就是函数式语言里的<strong>函数</strong>（Function）</p><hr><h3 id="循环-Loops"><a href="#循环-Loops" class="headerlink" title="循环 - Loops"></a>循环 - Loops</h3><pre><code class="lang-bash">2.3.1 :023 &gt; fruits.each do |fruit|2.3.1 :024 &gt;     puts fruit2.3.1 :025?&gt;   endstrawberryplumorange =&gt; [&quot;strawberry&quot;, &quot;plum&quot;, &quot;orange&quot;]</code></pre><pre><code class="lang-ruby">## 带索引（index）的循环&gt; fruits.each_with_index do |fruit, index|&gt;   puts fruit&gt;   puts index&gt; endstrawberry0plum1orange2 =&gt; [&quot;strawberry&quot;, &quot;plum&quot;, &quot;orange&quot;]</code></pre><hr><h3 id="条件-Conditional"><a href="#条件-Conditional" class="headerlink" title="条件 - Conditional"></a>条件 - Conditional</h3><pre><code class="lang-bash">2.3.1 :027 &gt; if my_var &gt; 1.02.3.1 :028?&gt;   puts &quot;BigOne&quot;2.3.1 :029?&gt;   endBigOne =&gt; nil 2.3.1 :030 &gt; if my_var &lt; 1.02.3.1 :031?&gt;   puts &quot;OTCBTC&quot;2.3.1 :032?&gt;   end =&gt; nil</code></pre><hr><h3 id="退出-IRB"><a href="#退出-IRB" class="headerlink" title="退出 IRB"></a>退出 IRB</h3><pre><code class="lang-bash">2.3.1 :033 &gt; exit$</code></pre><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ruby &amp; Rails </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 常用操作</title>
      <link href="/2018/01/02/Git-Basics/"/>
      <url>/2018/01/02/Git-Basics/</url>
      
        <content type="html"><![CDATA[<p>这里记录了常用的 Git 命令和知识，主要用于检索</p><hr><h3 id="关于-Git-的一些概念"><a href="#关于-Git-的一些概念" class="headerlink" title="关于 Git 的一些概念"></a>关于 Git 的一些概念</h3><img src="/2018/01/02/Git-Basics/git_concepts_framework.png" title="git concepts framework"><ul><li>Repository</li><li>Remote</li><li>Index / Stage</li><li>Workspace</li></ul><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>通常 Mac 已经自带 Git ，但若要追求最新版，可使用 <a href="http://brew.sh" target="_blank" rel="noopener">Hombrew</a> 来安装</p><pre><code class="lang-bash">$ brew install git</code></pre><hr><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre><code class="lang-bash">## 进入需要用 Git 进行追踪以保存各个时间点进度的文件夹$ cd ~/rails101## 初始化当前所在文件夹$ git init</code></pre><hr><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><pre><code class="lang-bash">$ git config --global user.name &quot;xxx xxx&quot;        # Git 用户名$ git config --global user.email &quot;xxx@xxx.com&quot;   # Git 邮箱$ git config --global color.ui true              # Git 命令的输出文字色彩化# 显示当前的 Git 配置$ git config --list# Example$ git config --global user.name &quot;chpwang&quot;        $ git config --global user.email &quot;chpwang@gmail.com&quot;</code></pre><hr><h3 id="本地代码提交"><a href="#本地代码提交" class="headerlink" title="本地代码提交"></a>本地代码提交</h3><pre><code class="lang-bash">## 常用基本指令$ git status            ## 查看当前文件更改状态      $ git add [文件名]       ## 添加更改文件到 staging area（顶图中的 index 区）$ git commit -m &quot;该 commit 的注释内容&quot;    ## 保存 staging area 的文件（顶图中的 Repository 区）$ git log --oneline | head -n 5         ## 查看前 5 个 commit 的信息（一行一个）## 撤销$ git checkout [文件名]            ## 恢复暂存区的指定文件到工作区（working area）$ git checkout [commit] [文件名]   ## 恢复指定 commit 的指定文件到工作区$ git checkout .                  ## 恢复上一个commit的所有文件到工作区$ git checkout -- [文件名]         ## 清空工作区（working area）的指定文件的改动（不影响 Staging area）## 查看某个文件修改了什么$ git diff [文件名]                ## 查看指定文件对比最后一次 commit 的状态修改了那些内容</code></pre><hr><h3 id="拉取远程代码"><a href="#拉取远程代码" class="headerlink" title="拉取远程代码"></a>拉取远程代码</h3><pre><code class="lang-bash">## 从远程主机克隆一个版本库到本地，并在本地当前目录下生成一个文件夹，文件夹与远程主机的版本库同名$ pwd ~/Documents                 # 当前所在目录为 ~/Documents$ git clone [版本库的网址]## Example$ git clone git@github.com:webyrd/miniKanren.git## 若要指定不同的目录名，可以用以下命令$ git clone [版本库的网址] [本地目录名]</code></pre><hr><h3 id="临时缓存"><a href="#临时缓存" class="headerlink" title="临时缓存"></a>临时缓存</h3><pre><code class="lang-bash">## 缓存当前进度（只能缓存 tracked files，不能缓存 untracked files）- 以下两条命令效果一样$ git stash$ git stash save## 缓存包括 untracked files 在内的所有文件$ git stash save --include-untracked## 只缓存 Unstaged Area 的文件改动，保留 Staging Area$ git stash save --keep-index## 只缓存 Unstaged Area（包含 untracked files 在内）的文件改动，保留 Staging Area$ git stash save --keep-index --include-untracked## 缓存当前进度的同时增加对该缓存的描述，以便之后恢复时查看$ git stash save &quot;just add twentynight.html&quot;## 查看临时缓存里的各种存档$ git stash liststash@{0}: WIP on ch02: 5d65fd4 add flash messages at index## 在当前分支上恢复存档，默认是恢复 stash@{0} 的存档$ git stash apply [存档ID名]## Example - 恢复 stash@{1} 的存档$ git stash apply 1## 默认删除临时缓存里所保存的最新一条内容，即删除 stash@{0} - stash apply 之后不会自动删除已被 apply 内容，所以需要手动 drop 来删除$ git stash dropDropped refs/stash@{0} (bceb5b826e75881c82f83827605fc81938d49a49)## 如果不小心 drop 掉了代码，可以用被 drop 掉的 stash 所对应的 ID 重新找回$ git stash apply bceb5b826e75881c82f83827605fc81938d49a49## 删除缓存里的所有内容$ git stash clear## 以下命令相当于先运行 git stash apply ，再运行 git stash drop$ git stash pop</code></pre><hr><h3 id="重置和读档"><a href="#重置和读档" class="headerlink" title="重置和读档"></a>重置和读档</h3><p>参考 git real level 2</p><pre><code class="lang-bash">## 已经 add 的如何撤销（unstage files）？$ git reset HEAD &lt;file&gt;...</code></pre><p><code>HEAD</code> 作为指针指向最新的那个 commit，而 <code>HEAD^</code> 指向倒数第二新的 commit，<code>HEAD^^</code> 指向倒数第三新的 commit，以此类推，<code>HEAD^^^^^</code> 有 5 个 <code>^</code>（caret），所以它指向倒数第六新的 commit</p><pre><code class="lang-bash">## 已经 commit 的如何撤销？$ git reset --soft HEAD^   ## 把最新的 commit 里的修改撤销到 Stage ，文件成为 Staging files，HEAD 指针进而指向倒数第二新的 commit$ git reset --hard HEAD^   ## 慎用该命令！它会把最新的 commit 里的修改完全撤销，所有修改完全消失，HEAD 指针进而指向倒数第二新的 commit## 如何清除 Working Area（工作台）里所有已改动的文件，恢复到 HEAD （最新一个 commit）的状态## 可以先 Stash 缓存，然后再清空缓存$ git stash save --include-untracked$ git stash drop</code></pre><hr><h3 id="更改已有-Commit-Interactive-Rebase"><a href="#更改已有-Commit-Interactive-Rebase" class="headerlink" title="更改已有 Commit - Interactive Rebase"></a>更改已有 Commit - Interactive Rebase</h3><p>下面展示了最新的 3 条 Commit 信息:</p><pre><code class="lang-bash">$ git log --oneline | head -n 3a58f305 arrange folders for next Udacity Class - Deep Learningcf56d01 fix bugs, misunderstandings and mistakes in P5 Boston Housing - Udacity MLforNBseacff8b complete P5 Boston Housing - Udacity MLforNBs</code></pre><p>使用命令 <code>git rebase -i HEAD~3</code> 进入一个使用 vi 编辑器打开的文件，编辑这个文件（更改文件中顶部的 Commit 的关键词 - 例如 <code>pick</code> 改成 <code>r</code> 表示要重命名 Commit 的信息 - 然后用 <code>:wq</code> 保存文件退出），可以实现对已有倒数 3 条 Commit 进行编辑更改（<code>HEAD~3</code> 代表倒数 3 条 Commit）:</p><pre><code class="lang-bash">  pick eacff8b complete P5 Boston Housing - Udacity MLforNBs  pick cf56d01 fix bugs, misunderstandings and mistakes in P5 Boston Housing - Udacity MLforNBs  pick a58f305 arrange folders for next Udacity Class - Deep Learning  # Rebase 3e6e796..a58f305 onto 3e6e796 (3 commands)  #  # Commands:  # p, pick = use commit  # r, reword = use commit, but edit the commit message  # e, edit = use commit, but stop for amending  # s, squash = use commit, but meld into previous commit  # f, fixup = like &quot;squash&quot;, but discard this commit&#39;s log message  # x, exec = run command (the rest of the line) using shell  # d, drop = remove commit  #  # These lines can be re-ordered; they are executed from top to bottom.  #  # If you remove a line here THAT COMMIT WILL BE LOST.  #  # However, if you remove everything, the rebase will be aborted.  #  # Note that empty commits are commented out</code></pre><p>例子 - 重命名最新一条 Commit 的信息（message）:</p><ol><li><p>将目标 Commit 前的关键词 <code>pick</code> 改成 <code>r</code> :</p><pre><code class="lang-bash">pick eacff8b complete P5 Boston Housing - Udacity MLforNBspick cf56d01 fix bugs, misunderstandings and mistakes in P5 Boston Housing - Udacity MLforNBsr a58f305 arrange folders for next Udacity Class - Deep Learning# Rebase 3e6e796..a58f305 onto 3e6e796 (3 commands)## Commands:# p, pick = use commit# r, reword = use commit, but edit the commit message# e, edit = use commit, but stop for amending# s, squash = use commit, but meld into previous commit# f, fixup = like &quot;squash&quot;, but discard this commit&#39;s log message# x, exec = run command (the rest of the line) using shell# d, drop = remove commit</code></pre></li><li><p>用 <code>:wq</code> 保存文件退出（这是 vi 编辑器的保存退出方式）；</p></li><li><p>在弹出的又一个使用 vi 编辑器打开的文件中，修改 Commit 信息（commit message）；</p><pre><code class="lang-bash">arrange folders for next Udacity Class - Deep Learning    # &lt;- 修改这行信息# Please enter the commit message for your changes. Lines starting# with &#39;#&#39; will be ignored, and an empty message aborts the commit.## Date:      Wed Jul 4 15:59:36 2018 +0800## interactive rebase in progress; onto 929522f# Last commands done (10 commands done):#    pick cf56d01 fix bugs, misunderstandings and mistakes in P5 Boston Housing - Udacity MLforNBs#    reword a58f305 arrange folders for next Udacity Class - Deep Learning# Next commands to do (5 remaining commands):#    pick b02f9b2 add new version of P5 with Python 3+#    pick e2e1a5f add data visualized codes in Question 1st# You are currently editing a commit while rebasing branch &#39;master&#39; on &#39;929522f&#39;.</code></pre></li><li><p>用 <code>:wq</code> 保存文件退出；</p></li><li><p>再次查看最新的 3 条 Commit 信息，可以发现刚刚的 Commit 被更改了（Commit 的 Hash 值也变了）:</p><pre><code class="lang-bash">$ git log --oneline | head -n 3670afa6 I changed this commit - arrange folders for next Udacity Class - Deep Learningcf56d01 fix bugs, misunderstandings and mistakes in P5 Boston Housing - Udacity MLforNBseacff8b complete P5 Boston Housing - Udacity MLforNBs</code></pre></li></ol><p>Interactive Rebase 还可以实现「改变 Commit 的顺序」，「把两个 Commit 合并」还有「删除某个 Commit 」等操作，具体可以参考使用 <code>git rebase -i HEAD~3</code> 命令后，vi 编辑器打开的文件中注释部分的说明（上面的例子中也展示了注释部分）</p><hr><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><pre><code class="lang-bash">## 切换分支$ git checkout [分支名]## 新建分支$ git checkout -b [分支名]## 查看所有分支$ git branch -a [分支名]## 删除分支（删除 A 分支需要切换到 A 之外的分支上）$ git branch -d [分支名]   ## 删除已经 merge 过了的分支，通常已经是 merge 到 master 分支上了$ git branch -D [分支名]   ## 强制删除该分支，无论该分支是否 merge 到其他分支过</code></pre><p><code>git checkout</code> 的另一种操作（实现从之前的 commit 处新发展一条分支）：</p><pre><code class="lang-bash">## 切换到某一个 commit$ git checkout [Commit ID]## Example$ git branch  master* chpw-dev## 查看 Commit ID$ git logcommit 86d2b225d27f3ba7fc06164c9961a98a08e3f525 (HEAD -&gt; chpw-dev)Author: abc &lt;abc@gmail.com&gt;Date:   Tue Aug 7 15:40:29 2018 +0800    add senario that location info is unauthorizedcommit c9e39a3975dcd2d380a7436bd8e3c4bba34cb0b0Author: abc &lt;abc@gmail.com&gt;Date:   Tue Aug 7 13:57:28 2018 +0800    get and show current location on all pages## 根据上面的 ID 信息，切换到前一个 Commit$ git checkout c9e39a3975dcd2d380a7436bd8e3c4bba34cb0b0Note: checking out &#39;c9e39a3975dcd2d380a7436bd8e3c4bba34cb0b0&#39;.You are in &#39;detached HEAD&#39; state. You can look around, make experimentalchanges and commit them, and you can discard any commits you make in thisstate without impacting any branches by performing another checkout.If you want to create a new branch to retain commits you create, you maydo so (now or later) by using -b with the checkout command again. Example:  git checkout -b &lt;new-branch-name&gt;HEAD is now at c9e39a3... get and show current location on all pages## 切换后处于一个 detached HEAD$ git branch* (HEAD detached at c9e39a3)  master  chpw-dev## 以当前的 detached HEAD 为起点，新建分支$ git checkout -b newBranchFromPreCommitSwitched to a new branch &#39;newBranchFromPreCommit&#39;$ git branch  master  chpw-dev* newBranchFromPreCommit</code></pre><h4 id="恢复被删除的-Git-分支"><a href="#恢复被删除的-Git-分支" class="headerlink" title="恢复被删除的 Git 分支"></a>恢复被删除的 Git 分支</h4><p>参考 <a href="https://stackoverflow.com/questions/3640764/can-i-recover-a-branch-after-its-deletion-in-git" target="_blank" rel="noopener">Can I recover a branch after its deletion in Git?</a></p><hr><h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><p>生成 SSH 验证：<a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noopener">Generating a new SSH key</a></p><pre><code class="lang-bash">$ cd ~   ## 切换到 home 目录下## 这个命令会在当前文件夹下生成一个 .ssh 目录，里面包含 id_rsa 和 id_rsa.pub 两个文件## 要用的是 id_rsa.pub 里的内容，这个是公钥 ## id_rsa 则是私钥，里面的内容则不能泄露$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;   # 这里的 your_email@example.com 指的是你的邮箱名字## 上面用的是 rsa 加密算法，如果用的是 Ed25519 算法，则命令如下## 这个命令生成的就是 id_ed25519 和 id_ed25519.pub 这两个文件$ ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;## 上述命令运行后，一路回车，使用默认值即可，完成后会在当前目录下创建完毕## 有些古老的系统不支持 ed25519 加密算法，所以就只能用 rsa 算法加密。GitHub 官方推荐 Ed25519</code></pre><p>设置 SSH 验证，以 <a href="https://github.com" target="_blank" rel="noopener">Github</a> 为例</p><pre><code class="lang-bash">## cat 这个命令可以查看 id_ed25519.pub 里的内容$ cat id_ed25519.pub## 复制这段以 ssh-ed25519 开头的内容## 在 Github 的「Setting」-&gt;「SSH and GPG keys」中输入，完成添加</code></pre><p>设置远程主机</p><pre><code class="lang-bash">$ git remote add [远程主机名] [地址]## 显示所有远程仓库$ git remote -v## 移除本地记录的远程主机$ git remote rm [远程主机名]</code></pre><p>将本地最新代码推送到远程主机完成更新</p><pre><code class="lang-bash"># push 基本指令$ git push [远程主机名] [本地分支名]:[远程分支名]# Example$ git push heroku ch08:master# 第一次推送 master 分支时，加上 -u 参数，Git 不但会把本地的 master 分支内容推送的远程新的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来，在以后的推送或者拉取时就可以简化命令 - git push 和 git pull$ git push -u origin master# 推送本地的 chpw-dev 分支到远程主机的 chpw-dev 分支上，并将本地的 chpw-dev 分支设置为追踪（track）远程分支 chpw-dev# Branch &#39;chpw-dev&#39; set up to track remote branch &#39;chpw-dev&#39; from &#39;origin&#39;# 下次在本地的 chpw-dev 分支上就可以直接用简单命令 git push 来推送 chpw-dev 分支了$ git push -u origin chpw-dev:chpw-dev# 推送本地所有分支$ git push --all</code></pre><hr><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>关于文件 .gitignore 的用法，参考<a href="https://help.github.com/articles/ignoring-files/" target="_blank" rel="noopener">这里</a></p><hr><h3 id="Git-Submodule"><a href="#Git-Submodule" class="headerlink" title="Git Submodule"></a>Git Submodule</h3><p>新建，更新和同步 Submodule 参考<a href="/2016/10/08/sync-blog-between-multiple-Macs/">多台电脑间的 Hexo 博客同步</a>中 Submodule 功能部分的说明</p><hr><h3 id="更新从别人那-Fork-来的-Repository"><a href="#更新从别人那-Fork-来的-Repository" class="headerlink" title="更新从别人那 Fork 来的 Repository"></a>更新从别人那 Fork 来的 Repository</h3><p>假设我们 Fork 了 Repo <a href="https://github.com/cisco/ChezScheme" target="_blank" rel="noopener">cisco/ChezScheme</a>，接下来可以使用下面的步骤获取最新更新，进而更新我们 Fork：</p><ol><li><p>从自己的账号上下载 Fork 过来的 Repo:</p><pre><code class="lang-bash">$ git clone git@github.com:chpwang/ChezScheme.git</code></pre></li><li><p>设置 Repo 的 remote:</p><pre><code class="lang-bash">$ pwd~/ChezScheme   ## 当前处于了刚 Clone 下来的 Repo 目录## 目前存在一个名为 origin 的 remote ，指向自己账号旗下的项目 Fork$ git remote -vorigin  git@github.com:chpwang/ChezScheme.git (fetch)origin  git@github.com:chpwang/ChezScheme.git (push)## 添加原始 Repo 的 remote 地址（下面的代码将其命名为 upstream）## 命令为 git remote add [upstream_name] [path_to_repo]$ git remote add upstream git@github.com:cisco/ChezScheme.git## 添加新 remote 之后，一共存在两个 remote ，一个名为 origin 指向自己的 Repo ，一个名为 upstream 指向原始 Repo$ git remote -vorigin  git@github.com:chpwang/ChezScheme.git (fetch)origin  git@github.com:chpwang/ChezScheme.git (push)upstream  git@github.com:cisco/ChezScheme.git (fetch)upstream  git@github.com:cisco/ChezScheme.git (push)</code></pre></li><li><p>从原始 Repo 下载更新（新的 Commit）然后合并在本地的 Repo 对应分支上（下面例子是 master 分支）:</p><pre><code class="lang-bash">$ git pull upstream master</code></pre></li><li><p>上传本地更新后的代码到自己账户下 Fork 过来的 Repo ，进而实现更新:</p><pre><code class="lang-bash">$ git push origin master</code></pre></li></ol><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Mac Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入手新 Mac 后的环境搭建</title>
      <link href="/2017/03/14/setup-new-mac/"/>
      <url>/2017/03/14/setup-new-mac/</url>
      
        <content type="html"><![CDATA[<p>搬家都是耗时的，为了尽可能节省时间，在这里记录下个人基本环境搭建。</p><hr><h3 id="Command-Line-Tools"><a href="#Command-Line-Tools" class="headerlink" title="Command Line Tools"></a>Command Line Tools</h3><p>虽然通过完整安装 Xcode 就能获得 Command Line Tools ，但 Xcode 太大，太费时间，推荐使用以下方法：</p><p>打开 Mac 自带的终端 Terminal.app 输入以下指令</p><pre><code class="lang-bash">$ git</code></pre><p>Mac 会提示你 <code>git</code> 这一命令不存在，需要安装 Command Line Tools ，接着就根据提示联网安装即可</p><p>下面这个是正式的安装命令，<strong>幂等</strong>的哦</p><pre><code class="lang-bash">$ xcode-select --install</code></pre><p>Command Line Tools 里包含很多 Linux 默认安装里有的实用工具软件（命令）。</p><p>可在 <code>/Library/Developer/CommandLineTools/usr/bin/</code> 里查看这些软件。</p><hr><h3 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h3><p><a href="http://brew.sh" target="_blank" rel="noopener">Hombrew</a> 是一款软件管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能，很方便。</p><pre><code class="lang-bash">$ /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</code></pre><p>Homebrew 常用指令</p><pre><code class="lang-bash">## 安装（软件），更新，检查可更新的软件$ brew search [formulae]   # 查询包含关键词的软件 formulae$ brew install [formulae]  # 安装指定的软件 formulae$ brew update              # brew 自我更新$ brew upgrade [formulae]  # 更新指定的软件 formulae$ brew outdated            # 查询本地版本低于当前最新版本的软件$ brew cleanup [formulae]  # 清除本地安装包，释放硬盘空间 - 加关键词就清除指定安装包，不加就全部清除</code></pre><p>更多信息可以参考官网<a href="https://docs.brew.sh/FAQ" target="_blank" rel="noopener">这里</a>，包括重新安装 Homebrew</p><hr><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>安装好 Command Line Tools 之后，就已经有 Git 了，但并非最新版，追求最新版 Git 需要使用 Homebrew 来安装</p><pre><code class="lang-bash">$ brew install git# 查看 Git 的版本号$ git -vgit version 2.44.0</code></pre><p>安装好之后要记得设置一下 Git 的一些参数</p><pre><code class="lang-bash">$ git config --global user.name &quot;xxxxx&quot;         ## Git 用户名$ git config --global user.email &quot;xxx@xxx.com&quot;  ## Git 邮箱$ git config --global color.ui true             ## Git 命令的输出文字色彩化# 显示当前的 Git 配置$ git config --list</code></pre><p>Git 的一些常用命令整理见<a href="/2018/01/02/Git-Basics/">这里</a></p><hr><h3 id="安装-Fish-Shell"><a href="#安装-Fish-Shell" class="headerlink" title="安装 Fish Shell"></a>安装 Fish Shell</h3><p><a href="https://fishshell.com" target="_blank" rel="noopener">Fish</a> 是一款更好用的 shell ，各种操作都比较符合直觉，在 MacOS 上安装也方便</p><pre><code class="lang-bash">## 成功安装 fish 后会提示如何设置才能开始正常使用 fish shell$ brew install fish==&gt; Installing fish==&gt; Downloading https://homebrew.bintray.com/bottles/fish-2.7.1.high_sierra.bottle.tar.gz######################################################################## 100.0%==&gt; Pouring fish-2.7.1.high_sierra.bottle.tar.gz==&gt; CaveatsYou will need to add:  /opt/homebrew/bin/fishto /etc/shells.Then run:  chsh -s /opt/homebrew/bin/fishto make fish your default shell.## 如果已经安装过 fish shell , 可以使用以下方式来升级 fish$ brew upgrade fish</code></pre><p>根据上面的提示，fish 安装在 <code>/opt/homebrew/bin/fish</code> 目录下（目录可能会变，以实际为准），所以还需要将其添加到 <code>/etc/shells</code><br>因为只有在 <code>/etc/shells</code> 文档里记录的 shell 才能正常访问电脑（正常登陆）</p><pre><code class="lang-bash">## 此操作会更改 /etc/shells 内容，需要输入管理员密码$ echo &quot;/opt/homebrew/bin/fish&quot; | sudo tee -a /etc/shells## 查看当前所有可用的 shell$ cat /etc/shells## 查看当前正在使用的 shell$ echo $SHELL</code></pre><p>接着将 fish 设置成终端默认的 shell</p><pre><code class="lang-bash">$ chsh -s /opt/homebrew/bin/fish</code></pre><p>最后是一些常用的自定义设置，更多教程可参看<a href="https://fishshell.com/docs/current/tutorial.html" target="_blank" rel="noopener">官网</a>或者这篇<a href="https://hackercodex.com/guide/install-fish-shell-mac-ubuntu/" target="_blank" rel="noopener">博客</a></p><pre><code class="lang-bash">## 建立 config.fish 文件，该文件相当于 ~/.bashrc 或者 ~/.zshrc 文件，用于 shell 的初始化设置$ mkdir -p ~/.config/fish$ vi ~/.config/fish/config.fish## 设置一个名为 CPPFLAGS 的环境变量，并将它的值设定为 &quot;-I/opt/homebrew/opt/openjdk/include&quot;## -gx 是两个选项的组合## -g 表示这个变量是全局的，意味着它在当前会话及其之后启动的任何子进程中都可用## -x 表示这个变量将被导出到环境变量，这样其他程序也能访问它。$ set -gx CPPFLAGS &quot;-I/opt/homebrew/opt/openjdk/include&quot;## 在 fish 中注销变量$ set -e [变量名]## Example$ set -e https_proxy## 环境变量 $PATH 包含了各种命令（软件）的路径，各个 shell 们运行命令时都会从里面找## 在 fish shell 中，环境变量 $PATH 的数据类型是一个链表（List），而不是一个包含分号（;）的字符串（String）## 登陆 Terminal 时，fish 预载入的环境变量其实是  $fish_user_paths + $PATH ，所以常用以下方式来初始化当前用户的环境变量## 以下命令会将 /opt/homebrew/bin 永久添加到 $fish_user_paths ，进而每次登陆 Terminal 都会自动载入该路径$ fish_add_path /opt/homebrew/bin## 查看当前 fish_user_paths 的内容$ echo $fish_user_paths/opt/homebrew/bin## 查看当前 PATH 的内容$ echo $PATH/opt/homebrew/bin /usr/local/bin /usr/bin /bin /usr/sbin /sbin</code></pre><p>自定义 fish shell 的提示符内容（Customize Prompt）可以通过更改配置文件 <code>fish_prompt.fish</code> 中的函数 <strong>fish_prompt</strong> 来实现：</p><pre><code class="lang-bash">## ~/.config/fish/functions/fish_prompt.fish### Example ###function fish_prompt --description &#39;Write out the prompt&#39;        set -l home_escaped (echo -n $HOME | sed &#39;s/\//\\\\\//g&#39;)   set -l pwd (echo -n $PWD | sed &quot;s/^$home_escaped/~/&quot; | sed &#39;s/ /%20/g&#39;)   set -l prompt_symbol &#39;&#39;   switch $USER       case root toor; set prompt_symbol &#39;#&#39;       case &#39;*&#39;;  set prompt_symbol &#39;$&#39;   end   printf &quot;%s@%s: %s%s%s %s &quot; $USER (hostname -s) (set_color $fish_color_cwd) $pwd (set_color normal) $prompt_symbolend############################# 上述配置下提示符的输出格式为：## username@hostname: ~ $</code></pre><hr><h3 id="安装-Fisher"><a href="#安装-Fisher" class="headerlink" title="安装 Fisher"></a>安装 Fisher</h3><p><a href="https://github.com/jorgebucaran/fisher" target="_blank" rel="noopener">Fisher</a> 也是一款软件管理工具，专门配合 <a href="https://fishshell.com" target="_blank" rel="noopener">Fish Shell</a>  使用。这里主要是为了后续安装 <a href="https://github.com/jorgebucaran/nvm.fish" target="_blank" rel="noopener">nvm.fish</a> 方便。</p><pre><code class="lang-bash">## 可以直接通过 Hombrew 来安装$ brew install fisher## 这个是官方的安装方式curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source &amp;&amp; fisher install jorgebucaran/fisher## 查看当前已安装的插件$ fisher list## 更新指定软件$ fisher update jorgebucaran/fisher## 卸载 fisher 和所有通过 fisher 安装的软件$ fisher list | fisher remove</code></pre><hr><h3 id="安装-NVM-Node-Version-Manager"><a href="#安装-NVM-Node-Version-Manager" class="headerlink" title="安装 NVM - Node Version Manager"></a>安装 NVM - Node Version Manager</h3><p><a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noopener">NVM</a> 是用来管理 <a href="https://nodejs.org/en/about" target="_blank" rel="noopener">Node.js</a> 的，让我们可以在不同版本的 <a href="https://nodejs.org/en/about" target="_blank" rel="noopener">Node.js</a> 之间切换。<br>后续搭建博客用的 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 依赖于老版本的 <a href="https://nodejs.org/en/about" target="_blank" rel="noopener">Node.js</a> 。所以用 NVM 来安装和切换新老版本是最明智的。<br>由于用的是 <a href="https://fishshell.com" target="_blank" rel="noopener">Fish Shell</a> ，所以这里安装的是更方便的 <a href="https://github.com/jorgebucaran/nvm.fish" target="_blank" rel="noopener">nvm.fish</a>。</p><pre><code class="lang-bash">## 通过 fisher 安装 nvm.fish$ fisher install jorgebucaran/nvm.fish## 安装并使用最新版本的 Node.js$ nvm install latest## 查看远程有哪些 Node.js 版本可以下载$ nvm list-remote    ...    ...    v13.14.0      v14.0.0     v14.1.0    ...    ...## 安装 v13.14.0 版本的 Node.js$ nvm install v13.14.0## 切换到 v13 版本的 Node.js 来使用## 由于只安装了 v13.14.0 版本，本地的 v13 只有它，所以会切换到这个版本$ nvm use v13## 显示本地有哪些版本的 Node.js 以及当前正在使用的版本$ nvm list     system ▶ v13.14.0</code></pre><hr><h3 id="安装并设置-iTerm2"><a href="#安装并设置-iTerm2" class="headerlink" title="安装并设置 iTerm2"></a>安装并设置 iTerm2</h3><p>如果觉得 MacOS 自带的 Terminal 还不够好用和个性化，可以考虑使用 iTerm2 。</p><p>从<a href="https://www.iterm2.com" target="_blank" rel="noopener">官网</a>下载 iTerm2 安装完后，再下载主题样式（Theme）<a href="http://ethanschoonover.com/solarized/files/solarized.zip" target="_blank" rel="noopener">Solarized</a> (你也可去找其他的 Theme，安装同理)</p><p>解压刚刚下载的 <code>solarized.zip</code> 文件之后，打开 <strong>iTerm2</strong> 做以下操作：</p><ul><li><code>Preferences</code> -&gt; <code>Profiles</code> -&gt; <code>Colors</code> -&gt; <code>Color Presets</code> -&gt; <code>Import</code>，载入 iterm2-colors-solarized 目录下的两个 itermcolors 文件</li><li><code>Preferences</code> -&gt; <code>Profiles</code> -&gt; <code>Colors</code> -&gt; <code>Color Presets</code> ，选择 Solarized Dark</li><li><code>Preferences</code> -&gt; <code>Profiles</code> -&gt; <code>Text</code> -&gt; <code>Change Font</code>，可选择字体和字号（建议 Menlo 字体）</li></ul><p>将 Mac 键盘上的左 <strong>option</strong> 键映射为 <strong>Esc+</strong> ，以便在 iTerm2 里就可以使用 <strong>option</strong> + <strong>delete</strong> 组合来删除一个单词，设置方法如下：</p><ul><li><code>Preferences</code> -&gt; <code>Profiles</code> -&gt; <code>Keys</code></li></ul><hr><h3 id="Hexo-博客环境搭建"><a href="#Hexo-博客环境搭建" class="headerlink" title="Hexo 博客环境搭建"></a>Hexo 博客环境搭建</h3><p>按以下方法搭建 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 博客的环境，更多参见<a href="/2016/10/08/sync-blog-between-multiple-Macs/">多电脑间同步 Hexo 博客</a></p><pre><code class="lang-bash">## 上面安装 nvm.fish 的环节已经安装了 Node.js ，所以这里就有 npm 命令了## 使用 Node.js 自带的 npm 安装 Hexo$ npm install hexo-cli -g## 安装 SASS - 将 .scss 文件编译成 .css 文件的工具$ brew install node-sass   ## 还有以下两个常用命令来更新和查看 package.json 里所记录的套件$ npm update    #更新套件$ npm outdated  #查看哪些套件过期（即有新版本）</code></pre><hr><h3 id="安装-Sublime"><a href="#安装-Sublime" class="headerlink" title="安装 Sublime"></a>安装 Sublime</h3><p>Sublime 是一款常用的编辑器，可以去其<a href="https://www.sublimetext.com" target="_blank" rel="noopener">官网</a>下载，如果不付费使用，则<strong>每</strong>数个保存操作后会跳出未注册的提示</p><p>安装完成后打开 Sublime ，使用快捷键 <code>Command</code> + <code>,</code> 打开设置界面<br>在右侧 <strong>Preferences.sublime-settings - User</strong> 页的<code>{}</code>内添加以下两行</p><ul><li><code>&quot;translate_tabs_to_spaces&quot;: true,</code></li><li><code>&quot;tab_size&quot;: 2</code></li></ul><p>注：<br>第一行末尾有英文输入法的逗号“<code>,</code>”；<br>第二行是最后一行，可以没有逗号；<br>这两行是设置 <strong>Tap 键</strong>和 <strong>Space 键</strong>的缩进（indentation）效果：第一行将所有 <strong>Tab</strong> 转换成 <strong>Space</strong>，第二行指定每个 <strong>Tab</strong> 换成 2 个 <strong>Space</strong>；</p><p>接着建立快捷方式以便在 Terminal 里快速打开</p><pre><code class="lang-bash">## 以下命令可以在 /usr/local/bin/ 目录下建立 Sublime 的快捷方式，用于快速调用$ sudo ln -s &quot;/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl&quot; /usr/local/bin/subl ## 建好快捷方式后的使用例子$ subl .   #打开当前目录</code></pre><h4 id="Sublime-的常用操作："><a href="#Sublime-的常用操作：" class="headerlink" title="Sublime 的常用操作："></a>Sublime 的常用操作：</h4><ul><li><p><strong>注释代码</strong>：选中目标内容后，使用快捷键 <code>Command + /</code> 。 sublime 会自动识别当前文件的语言（也可以在 sublime 窗口右下角手动选择语言类型），并使用当前语言的注释方法注释选中内容。如果当前文件包含多语言，那注释的时候就要<strong>右下角手动选择语言</strong>，注释完后再改回来；</p></li><li><p><strong>文件夹里全文件搜索和替换</strong>：鼠标右键 Sublime 左侧导航窗口中的某个文件夹 -&gt; <code>Find in Folder...</code> ，在弹出的窗口里，Find 一栏输入关键词即可搜索该文件夹中<strong>所有</strong>包含关键词的文件。如果要同时替换，就在 Replace 一栏输入用于替换关键词的内容即可；</p></li><li><p><strong>保存所有已打开文件</strong>：可通过 <code>File</code> -&gt; <code>Save All</code> 保存，Mac 也可用快捷键：<code>Option + Command + S</code>；</p></li><li><p><strong>关闭所有已打开文件</strong>：可通过 <code>File</code> -&gt; <code>Close All Files</code> 关闭；</p></li></ul><hr><h3 id="Rails-开发环境搭建（可选）"><a href="#Rails-开发环境搭建（可选）" class="headerlink" title="Rails 开发环境搭建（可选）"></a>Rails 开发环境搭建（可选）</h3><p>安装 <code>ImageMagick</code> 函数库 - 用于今后 Rails 开发中处理图片</p><pre><code class="lang-bash">$ brew install imagemagick</code></pre><p>安装 <code>PostgreSQL</code> - Rails 网站开发常用数据库</p><pre><code class="lang-bash">$ brew install postgresql$ brew services start postgresql  ## 启动数据库服务</code></pre><p>安装 <code>RVM</code> - Ruby Version Manager 用来管理 Ruby 的版本</p><pre><code class="lang-bash">$ \curl -sSL https://get.rvm.io | bash -s stable$ source ~/.rvm/scripts/rvm    ## 安装完 rvm 会提示使用该命令来让 rvm 生效</code></pre><p>如果用的是 <strong>Fish</strong> Shell 而不是 <strong>Bash</strong> Shell, 则 <code>RVM</code> 需要用以下方法安装，参考<a href="https://rvm.io/integration/fish" target="_blank" rel="noopener">RVM 官网说明</a>，因为 Fish 不兼容 Bash (not bash-compatible)<br>此外，如果是从 <strong>Bash</strong> Shell 切换到 <strong>Fish</strong> Shell ，发现各种 RVM 等开发的相关种命令都找不到了，也可通过以下设置来使得 RVM 和原来的 Rails 正常运行</p><pre><code class="lang-bash">## 这串命令本质上是从 Github 上下载一套指令集放在 Fish Shell 的初始化设置文件夹里，让 Fish Shell 每次启动的时候都运行一次，设置好各种环境变量$ curl -L --create-dirs -o ~/.config/fish/functions/rvm.fish https://raw.github.com/lunks/fish-nuggets/master/functions/rvm.fish# activate the default Ruby manually in your config.fish file:$ echo &quot;rvm default&quot; &gt;&gt; ~/.config/fish/config.fish</code></pre><p>安装好 <code>RVM</code> 后再安装一个套件 <code>libxml</code>（后面开发会用到）</p><pre><code class="lang-bash">$ brew install libxml2</code></pre><p>安装所需版本的 <code>Ruby</code> - 以 2.3.1 版本为例</p><pre><code class="lang-bash">$ rvm install 2.3.1$ rvm list                ## 该命令可查看本地存在的所有 Ruby 的版本$ rvm use 2.3.1 --default ## 该命令用于设置默认的 Ruby 版本$ gem update --system     ## 用于救回安装 rvm 过程中网络等原因造成的中断失败$ gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/  ## 设置新的 gem 的来源网站</code></pre><p>搞定了 Ruby 之后我们就有了 <code>gem</code> 这个命令，接下来用它安装 <strong>Rails</strong></p><pre><code class="lang-bash">$ gem install rails## 也可以指定 Rails 的版本来安装$ gem install rails -v 5.0.0## 看情况可尝试管理员模式安装$ sudo gem install rails</code></pre><p><strong>注意</strong>：2017 年以后的 MacOS 抛弃了 <code>OpenSSL</code>，导致需要安装 <code>OpenSSL</code> 才能运行 <code>gem</code> 这个命令。</p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Mac Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识 Ethereum - 以太坊</title>
      <link href="/2016/11/20/ethereum-for-newbies/"/>
      <url>/2016/11/20/ethereum-for-newbies/</url>
      
        <content type="html"><![CDATA[<p>以太坊（ <a href="https://ethereum.org" target="_blank" rel="noopener">Ethereum</a> ）是区块链世界里举足轻重的项目之一。事实上，对很多刚进入区块链行业的人来说，了解了以太坊，几乎就具备了在区块链世界里生存所必须的所有技术性的知识。</p><p>希望这些知识有助于大家对区块链世界里五花八门的项目进行理解和价值判断。</p><hr><h3 id="计算的本质"><a href="#计算的本质" class="headerlink" title="计算的本质"></a>计算的本质</h3><p>以太坊的起源和比特币（ <a href="https://bitcoin.org" target="_blank" rel="noopener">Bitcoin</a> ）有很大的关系，为此我们需要重新了解一下比特币的交易（ Transaction ）过程，也就是说，比特币网络中产生一笔交易的时候，到底发生了什么？而为了简单且精准地解释这个问题，让我们抛开比特币、以太坊还有区块链，先来看看计算的本质是什么，然后从本质出发，一步步类比下去。</p><p>以下三个例子都是生活中常见的计算，而每一种计算的过程都可以用下图中所展示的<strong><code>「 输入输出模型 」</code></strong>来描绘：</p><ul><li>「 1 + 1 」   <code>-&gt;</code> 「 计算器 」   <code>-&gt;</code> 「 2 」</li><li>「 手指纹 」   <code>-&gt;</code> 「 Touch ID 」<code>-&gt;</code> 「 软件解锁行为 」</li><li>「 上升的温度 」 <code>-&gt;</code> 「 水银温度计 」<code>-&gt;</code> 「 温度计示数 」<img src="/2016/11/20/ethereum-for-newbies/inout.gif" title="IO model"></li></ul><p>可以看到，作为<strong>「 输入 」</strong>和<strong>「 输出 」</strong>的东西不限于数字和符号，而作为处理这些「 输入 」并给出「 输出 」的<strong>「 设备 」</strong>也不一定是电脑。它们甚至可以是更加奇妙的东西，比如真空，比如暗物质，比如你的梦境。</p><p>比特币的交易也是这样一个<strong>「 输入输出 」</strong>的过程，它的输入输出如下：</p><ul><li>「 发币地址，收币地址，币的数量 」<code>-&gt;</code>「 比特币的区块链 」<code>-&gt;</code>「 发币地址币的数量，收币地址币的数量」</li></ul><p>对于这些<strong>「 输入输出 」</strong>的过程，我们不必去关心其中的计算是如何实现的，只需知道<strong>「 设备 」</strong>所要求的「 输入 」是怎样的，以及对应的预期「 输出 」即可。比如，我们只需要知道「 比特币的区块链 」这一<strong>设备</strong>能在接收了特定的「 输入 」后，给出特定的「 输出 」就行了。</p><p><code>PS:</code><br><code>注意，区块链世界里，你必须拥有「 密钥 」才能发起「 输入 」行为</code></p><hr><h3 id="以太坊的诞生"><a href="#以太坊的诞生" class="headerlink" title="以太坊的诞生"></a>以太坊的诞生</h3><p>通过以上<strong><code>「 输入输出模型 」</code></strong>的介绍，你不难发现，其中的<strong>「 设备 」</strong>扮演了一个很重要的角色，正是<code>它</code>，决定了人们到底能给什么样的「 输入 」并得到什么样的「 输出 」。</p><p>举个例子来说，「 水银温度计 」这一设备就无法接收「 1 + 1 」这种数据，它只能接收「 温度 」这一类型的数据。</p><p>同样的，「 比特币的区块链 」也只能接收 <code>「 发币地址，收币地址，币的数量，手续费 」</code>这类数据，因为「 比特币的区块链 」作为<strong>「 设备 」</strong>，只有记账这个单一的功能。</p><p>那么「 区块链 」能否有记账以外的其他功能呢？能否接收更多种类的「 输入 」并给出更多种类的「 输出 」？或者再进一步，「 区块链 」这一设备能不能成为电脑，具有无限可能性，而不仅仅是记账呢？</p><p>以太坊（ Ethereum ）正是在这一背景下诞生的，它的目标是：</p><blockquote><p><code>在「 区块链 」上实现一台世界性的电脑，一台全世界共用的电脑。</code></p></blockquote><hr><h3 id="以太坊的特点"><a href="#以太坊的特点" class="headerlink" title="以太坊的特点"></a>以太坊的特点</h3><p>由于区块链技术的特征，即通过挖矿行为来维护整条链的数据和运作，以太坊这台电脑与生俱来地具有以下特点：</p><ul><li><p>和作为账簿记录每个钱包里有多少钱的「 比特币区块链 」不同，以太坊区块链（简称以太坊，和<strong>比特币的区块链</strong>是两条不同的链）作为一台电脑，记录的是所有在它上面运行的软件的数据和代码；</p></li><li><p>在以太坊这台电脑上运行软件是需要付钱的，通过以太币（ ETH ）这一代币支付。以太币可以在各大交易所买到；</p></li><li><p>「 比特币的区块链 」这本账簿是由整个网络一起维护的，即每个结点（ Node ）都有一本完整账簿。这些众多相互独立的结点各自记账相互制约，保证了账簿的安全性，正确性和可信度（数据不可更改）；同样，以太坊这台电脑也是由整个网络一起维护的，每个结点（ Node ）都运行着一整台电脑，并存储了这台电脑上的所有数据。这些众多相互独立的结点各自运行着的电脑所组成的网络，也保证了以太坊这台电脑的可靠性（永不关机不掉线）和可信度（数据不可更改）；</p></li><li><p>由于处于区块链上，软件的某个操作最终会在成千上万台电脑上都进行一遍，上万台电脑只相当于一台电脑的性能。尽管这个问题今后会慢慢改进，但在未来相当长的时间里，会一直这样；</p></li><li><p>以太坊这台电脑升级起来非常麻烦，它要求以太坊社区里的所有人一起升级，即硬分叉；</p></li><li><p>对电脑来说，定期的升级是必要的，所以会经常看到以太坊进行硬分叉；</p></li><li><p>以太坊目前的出块时间是 15 秒，也就是说，以太坊这台电脑上的程序运行起来会有 15 秒的卡顿。当然，这个时间将来会继续减少。顺便说一句，每次以太坊遭遇 DDOS 攻击也会造成卡顿，其原理是丢给以太坊一个极其消耗性能的程序，让电脑卡机。不过在以太坊这台电脑上运行程序需要支付以太币，昨天的硬分叉后发动 DDOS 攻击已经非常昂贵，基本只有土豪或以太一生黑才玩得起；</p></li><li><p>区块链现在计算能力和存储能力都不强，还只能处理数字这种简单的东西，所以以太坊这台电脑的性能目前还只有八九十年代的水平；</p></li><li><p>以太坊这台世界性电脑适用于需要解决大规模信用问题的场景，还适用于对账过程中的冲突问题以及类似问题——比如银行的对账，再就是适用于有「 永不<code>被</code>关机 」需求的领域；</p></li></ul><p><code>PS:</code><br><a href="https://firstblood.io" target="_blank" rel="noopener">Firstblood</a> <code>是即将在以太坊上运行的 App 之一，有兴趣可以点击了解</code></p><hr><h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><p>问：哪里可以查看以太坊的出块信息和以太坊上的应用代币信息？</p><p><strong>答：</strong>可以前往以太坊的<a href="https://etherscan.io" target="_blank" rel="noopener">区块链浏览器</a>查看。</p><p>问：如何知道以太坊的最新进展？</p><p><strong>答：</strong>前往以太坊的<a href="https://blog.ethereum.org" target="_blank" rel="noopener">官方博客</a>查看。</p><p>问：如果即将出现硬分叉，哪里可以查看以太坊的分叉时间？</p><p><strong>答：</strong><a href="https://fork.codetract.io" target="_blank" rel="noopener">这里</a>。</p><p>问：有没有靠谱的以太坊中文社区？</p><p><strong>答：</strong>有，<a href="http://ethfans.org" target="_blank" rel="noopener">ETHFANS</a> 。</p><p>问：以太坊主网频繁出问题对上面的应用的影响程度有多大？</p><p><strong>答：</strong>要看是什么问题，分叉还是被 DDOS 攻击。分叉通常没问题，因为分叉意味着以太坊的升级。DDOS 攻击则会造成网络拥堵，让以太坊上的软件无法正常执行，可以通过硬分叉修复以太网的 Bug ，进而恢复网络。</p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用闲置电脑进行 Zcash 挖矿</title>
      <link href="/2016/10/29/zcash-mining-for-newbies/"/>
      <url>/2016/10/29/zcash-mining-for-newbies/</url>
      
        <content type="html"><![CDATA[<p>这是一篇面向新手的指南，旨在让新手能迅速开始挖矿，感受挖矿的“乐趣”。<br>以下挖矿的原理是：共享出个人电脑闲置的性能，通过 <a href="https://www.nicehash.com" target="_blank" rel="noopener">Nicehash</a> 矿池提供的挖矿软件接入矿池挖矿。收益通过钱包地址发送，极其简单无需注册。</p><hr><h3 id="马上开始"><a href="#马上开始" class="headerlink" title="马上开始"></a>马上开始</h3><ol><li><p>第一步：下载 Windows 64位 挖矿程序 <a href="https://github.com/nicehash/nheqminer/releases/download/0.3a/nheqminer_v0.3a.zip" target="_blank" rel="noopener">nheqminer_v0.3a.zip</a></p></li><li><p>第二步：解压缩刚刚下载好的 nheqminer_v0.3a.zip，得到如下文件 <img src="/2016/10/29/zcash-mining-for-newbies/nheqminer_folder.jpg" title="nheqminer folder"></p></li><li><p>第三步：在刚刚解压缩出 nheqminer_v0.3a.zip 的目录下新建 .txt 文件 <img src="/2016/10/29/zcash-mining-for-newbies/new_txt.jpg" title="create new txt file"></p></li><li><p>第四步：在新建的 .txt 文件里输入以下内容并保存（<strong>记得换成你的 Zcash taddr 地址，不然就帮我挖矿了</strong>）：<img src="/2016/10/29/zcash-mining-for-newbies/edit_txt.jpg" title="edit txt file"><br>该指令格式说明（提示：Zcash taddr 可使用<a href="https://yunbi.com" target="_blank" rel="noopener">云币网</a>的 ZEC 充值地址）：<br>```<br>nheqminer_zcash.exe -l [服务器] -u [你的 Zcash 透明地址 taddr ] -t [CPU 线程数]</p></li></ol><p>例一（美国服务器：usa ；CPU 使用 4 线程）:<br>nheqminer_zcash.exe -l usa -u t1Zhfs3eQ1WKwGopqrRPU3HwoHoqDeRCAMu -t 4</p><p>例二（香港服务器：hk ；CPU 使用所有能用的线程 - 不指定线程数就是默认使用所有线程）:<br>nheqminer_zcash.exe -l hk -u t1Zhfs3eQ1WKwGopqrRPU3HwoHoqDeRCAMu</p><pre><code>5. 第五步：将新建 .txt 文件，改名为 start.bat（注意，.txt 的后缀扩展名要改成 .bat，如果你看不到文件的后缀名查看[这里](https://www.baidu.com/s?wd=windows%20显示扩展名&amp;rsv_spt=1&amp;rsv_iqid=0xd30749d3000510ab&amp;issp=1&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=2&amp;ie=utf-8&amp;rqlang=cn&amp;tn=baiduhome_pg&amp;rsv_enter=0&amp;oq=windows%20显示后缀&amp;rsv_t=0ce2JpopNnbqqamM3bFDWHkst3rJ9nrHTYNAa%2F5LF366Tkjpuf4bl0CcP2S8t5dk8DNe&amp;rsv_pq=a43ff0f500053033&amp;rsv_sug3=29&amp;rsv_sug1=29&amp;rsv_sug7=100&amp;bs=windows%20显示后缀)） {% asset_img change_to_bat_file.jpg change to bat file %}6. 第六步：双击 `start.bat` 运行，开始挖矿：{% asset_img start_mining.jpg start mining %}7. 第七步：到[这里](http://zcash.nicehash.com/workers)输入 **第四步** 里你使用的 Zcash taddr 地址可查看你的挖矿状态和收益情况 {% asset_img mining_status.jpg mining status %}---### 用比特币结算挖矿收益上一节中介绍的挖矿方式是使用 Zcash 进行收益结算的，如果你希望使用**比特币**来结算你的收益，只需将**第四步**中输入 .txt 文件里的指令改成下面这行即可（**注意**，后面的比特币地址要换成你自己的哦，不然就是帮我挖矿啦）：</code></pre><p>nheqminer.exe -l usa -u 1G4gexikM2b3xbUpy9G5yUKtKEqTwNhGwX</p><pre><code>更改保存后，双击运行 `start.bat` 开始挖矿，然后在[这里](https://www.nicehash.com/?p=miners&amp;a=24)可以通过你使用的比特币地址查看挖矿状态和收益---### 让显卡也加入挖矿上面采用的是 CPU 来挖矿，现在我们让 GPU 也一起吧。还是只需更改**第四步**的指令即可：* 对于 Nvidia 显卡的 Windows 电脑</code></pre><p>只有一张 Nvidia 显卡：<br>nheqminer_zcash.exe -l usa -u [Zcash taddr 地址] -t [CPU 线程] -cd 0</p><p>有两张 Nvidia 显卡：<br>nheqminer_zcash.exe -l usa -u [Zcash taddr 地址] -t [CPU 线程] -cd 0 1</p><p>有两张以上 Nvidia 显卡：<br>nheqminer_zcash.exe -l usa -u [Zcash taddr 地址] -t [CPU 线程] -cd 0 1 2 …</p><pre><code>* 对于 AMD 显卡的 Windows 电脑</code></pre><p>只有一张 AMD 显卡：<br>nheqminer_zcash.exe -l usa -u [Zcash taddr 地址] -t [CPU 线程] -od 0</p><p>有两张 AMD 显卡：<br>nheqminer_zcash.exe -l usa -u [Zcash taddr 地址] -t [CPU 线程] -od 0 1</p><p>有两张以上 AMD 显卡：<br>nheqminer_zcash.exe -l usa -u [Zcash taddr 地址] -t [CPU 线程] -od 0 1 2 …</p><pre><code>PS:如果要用比特币结算，只需将 `nheqminer_zcash.exe` 改成 `nheqminer.exe` ，并把 `Zcash taddr 地址` 改成 `比特币钱包地址` 即可。---### 还有一些有用的如果你查看矿池发现拒绝率比较高，很可能你所连接的服务器速度慢，需要更换**第四步**中的服务器地址，比如从 `usa` 变成 `hk`。你可以通过以下测试查看各个服务器的延迟：1. 打开 cmd.exe 软件 {% asset_img cmd.jpg cmd exe %}2. 输入 `ping -n 50 -l 128 [服务器地址]` 回车查看延迟，例如</code></pre><p>C:\Users\Twentynight&gt;ping -n 50 -l 128 speedtest.eu.nicehash.com</p><p>正在 Ping speedtest.ams01.softlayer.com [159.253.132.18] 具有 128 字节的数据:<br>来自 159.253.132.18 的回复: 字节=128 时间=345ms TTL=128<br>来自 159.253.132.18 的回复: 字节=128 时间=358ms TTL=128<br>来自 159.253.132.18 的回复: 字节=128 时间=347ms TTL=128<br>…</p><p>所有可选服务器地址如下：<br>欧洲： speedtest.eu.nicehash.com<br>美国： speedtest.usa.nicehash.com<br>香港： speedtest.hk.nicehash.com<br>日本： speedtest.jp.nicehash.com<br>```</p><ol><li>时间越少，速度越快。选择时间最少的服务器</li></ol><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>老猫的区块链新手分享会</title>
      <link href="/2016/10/24/blockchain-for-newbies/"/>
      <url>/2016/10/24/blockchain-for-newbies/</url>
      
        <content type="html"><![CDATA[<p>2016年10月22日下午，<a href="http://weibo.com/fngm" target="_blank" rel="noopener">老猫</a>在北京组织了针对新人的线下「区块链分享会」，本文是该分享会的内容整理，主要包括以下几个部分：</p><ul><li><a href="http://weibo.com/fngm" target="_blank" rel="noopener">老猫</a>的自我介绍</li><li>区块链行业</li><li>BCA俱乐部的价值取向</li><li>云币网</li><li>比特币扩容之争</li><li>新手如何少踩坑</li></ul><hr><h3 id="老猫"><a href="#老猫" class="headerlink" title="老猫"></a>老猫</h3><p>「老猫」这个 ID 最早的诞生和他喜欢养猫有关，伴随他行走江湖已超过六年；</p><p>猫叔最早是做淘宝的，后来做了用比特币交易商品的网站叫「菠萝集市」；</p><p>和云币的交集始于<a href="http://weibo.com/hpyhck" target="_blank" rel="noopener">邱亮</a>关于「貔貅交易所」的客户调查，两人一见如故。「貔貅交易所」是「云币网」的前身，是<a href="http://weibo.com/bylixiaolai" target="_blank" rel="noopener">李笑来</a>创建的，邱亮是 CEO + CTO。一次接触后，猫叔被招致麾下，负责起了交易所的运营，还有后来「比特币生存指南」即现在「BCA 俱乐部」的运营。</p><hr><h3 id="区块链的世界"><a href="#区块链的世界" class="headerlink" title="区块链的世界"></a>区块链的世界</h3><p>区块链行业现状可用一个字来形容：乱。其中不靠谱的项目极多；</p><p>当前（2016年10月22日）行业主要分为两大群体，一是“比特币派”，其观点是「唯比特币独尊，看衰其他区块链应用」，二是“区块链派”，观点是「持续观察和分析各种区块链应用，不排斥比特币以外的区块链应用」。两种观点都有其背后的逻辑，老猫属于“区块链派”；</p><p>老猫将原支付宝群「比特币生存指南」更名为「BCA 俱乐部」的原因之一就是为了呼吁抛弃「唯比特币独尊」的观念；</p><p>区块链作为一项技术有很多方面的应用，<a href="https://bitcoin.org/" target="_blank" rel="noopener">比特币</a>是其中的一种应用，即作为数字货币的应用，<a href="https://www.ethereum.org/" target="_blank" rel="noopener">以太坊</a>又是另一种应用，即作为平台的应用。比特币由于是最早的应用，经历了时间考验，所以在很长一段时间里几乎是区块链世界里的唯一经济形态。老猫认为，区块链技术在其他领域的应用所带来的机会已经远超比特币；</p><p>区块链技术适合用于「需要解决大规模信任问题」的领域，所以可以通过这一点来判断某个区块链项目是否靠谱（该项目是否有必要解决大规模信任问题）。</p><hr><h3 id="BCA俱乐部"><a href="#BCA俱乐部" class="headerlink" title="BCA俱乐部"></a>BCA俱乐部</h3><p>BCA 俱乐部两大价值：</p><ul><li>培养合格的区块链资产投资者</li><li>成为区块链行业红利的分享者</li></ul><p>BCA 俱乐部不是炒币群，重视项目的真正价值，而不是短期波动。</p><hr><h3 id="云币网"><a href="#云币网" class="headerlink" title="云币网"></a>云币网</h3><p>2014年10月1日，「貔貅交易所」正式更名为「云币」；</p><p>云币网是一家以为国内投资者提供全球优秀区块链资产为目标的交易平台，目前成长速度飞快！</p><p>老猫介绍了历史运营数据和准备推出的新产品「众托」，但为防泄密，这里不详细展开。</p><p>老猫还重点介绍了以下区块链资产品种：</p><ul><li><p>比特币（BitCoin）- 当前（2016年10月24日）市值最高的数字货币；</p></li><li><p>以太坊 (Ethereum) - 开发平台，专门用于开发「去中心化应用」，比如 DGD 和 1SŦ。基于该平台的应用之间可以很容易进行经济互动；</p></li><li><p>DGD (DigixDAO) - DGX 的分红权。DGX 是第一个和黄金锚定的数字货币。使用 DGX 的过程中收取的各种费用依据持有的 DGD 的比例分红。DGD 的总量固定为 200 万个；</p></li><li><p>SC (SiaCoin) - 去中心化云存储的代币。一个真正可用的商业化区块链项目。下载<a href="https://sia.tech/" target="_blank" rel="noopener">客户端</a>后，可以使用代币储存文件。Sia 的储存原理是：将你上传的文件拆成 10 块，储存在分布于世界各地的电脑上。这些电脑属于不同的人，他们提供了自己闲置的硬盘空间来储存你的文件，你的 SiaCoin 代币将支付给他们。由于是分布式，其安全性高到甚至可以放心将比特币密钥存在上面。</p></li><li><p>1SŦ (FirstBlood) - 竞技游戏的代币。玩竞技游戏的双方使用该代币对赌，比赛结束后谁胜利谁就赢取代币。比赛的裁判也会从中抽取一部分代币作为手续费。裁判是系统随机选取的，且有信用评级机制，保证比赛的公正性和赌金的安全性；</p></li><li><p>ZEC (Zcash) - 匿名货币。和比特币的货币功能一样，只不过增加了「零知识证明」来保证交易的匿名性。交易的匿名很重要，因为能够把自己隐藏起来是一种终极的自由。目前只有 Zcash 的「零知识证明」保证了 100% 的匿名，其他的数字货币都无法做到 100%。</p></li></ul><hr><h3 id="比特币扩容之争"><a href="#比特币扩容之争" class="headerlink" title="比特币扩容之争"></a>比特币扩容之争</h3><p>区块链是记录所有交易的一个总账目，每一个块都记录了一定数目的交易，然后所有区块首尾相连形成一条链，保证总账目不可被更改。当前（2016年10月24日）每个区块能记录的交易大约在 1800 笔，即每秒钟只能处理 3 笔交易。扩容是为了能在一定的时间内处理更多的数目交易。根据 Visa 在 2015 年的<a href="http://investor.visa.com/news/news-details/2016/Visa-Inc-Reports-Fiscal-First-Quarter-2016-Results/default.aspx" target="_blank" rel="noopener">记录</a>，全球 2015 年全年一共进行了 920 亿笔交易，相比之下，当前的比特币每年只能进行 9460 万笔交易。从量级来看，如果不扩容，比特币是完全无法作为全球性的货币的。</p><p>实现「交易数增加」的这一目标已经是所有人的共识，但是如何实现却一直无法统一。所以，扩容的争论关键在于扩容的方案。每个方案背后都有各自的逻辑，还牵扯到很多商业和政治的利益，所以争了一年多都没有结论。</p><p>比特币的扩容之争可能会影响比特币的未来，尽管比特币当前（2016年10月24日）还是最好的数字货币。</p><hr><h3 id="如何少踩坑"><a href="#如何少踩坑" class="headerlink" title="如何少踩坑"></a>如何少踩坑</h3><p>不玩杠杆 - 交易所在后台都能看到你的交易数据，所以会被爆仓；</p><p>不玩理财 - 区块链资产价值波动太大，理财方很难兑现承诺以比特币兑付的利息；</p><p>时间长，额度足 - 资本的力量来自于「时间」和「额度」，所以投资要用闲钱，而且要淡定，不要被短期波动影响。不用闲钱无法做到淡定，容易陷入低卖高买的困境；</p><p>谨慎选择品种 - 当前区块链项目很多都是不靠谱的，尤其国内的项目。一定要通过看该项目解决了什么问题来判断价值；</p><p>注意保护密钥 - 不能所有账号都用同一个密码，比如邮箱的密码和银行的密码不能一样。推荐购买 1Password 来管理密码。</p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Blockchain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写 Alfred Workflow</title>
      <link href="/2016/10/14/alfred-workflow/"/>
      <url>/2016/10/14/alfred-workflow/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.alfredapp.com" target="_blank" rel="noopener">Alfred</a> 是 Mac 上重要的生产力工具，可自定义的工作流（<a href="https://www.alfredapp.com/help/workflows/" target="_blank" rel="noopener">Workflow</a>）是它的招牌功能，其作用相当于轻量级的 App，将日常重复繁琐的操作简化成一条简单的命令，进而提高效率。本文将教你如何创造 Workflow 。</p><p>你需要购买 Alfred 的 <a href="https://www.alfredapp.com/powerpack/buy/" target="_blank" rel="noopener">Powerpack</a> 才能使用 Workflow 功能。</p><p>Tips:<br>自从 <a href="https://www.dropbox.com/" target="_blank" rel="noopener">Dropbox</a> 把它的默认文件夹移动到 <code>~/Library/CloudStorage/Dropbox</code> 之后，<strong>Alfred</strong> 就无法搜索该文件夹里面的文件和内容了。解决方法是：</p><p>「<code>Alfred Preferences</code>」-&gt;「<code>Default Results</code>」-&gt;「<code>Search Scope</code>」-&gt;「<code>Reset</code>」-&gt;「<code>Reset to Applications and Home</code>」</p><p>参考资料：<a href="https://www.alfredforum.com/topic/20042-alfred-cant-find-files-stored-on-dropbox/" target="_blank" rel="noopener">Alfred can’t find files stored on Dropbox</a></p><hr><h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><p>每当看到程序员准备造物时，班长总会情不自禁地分享他的庸俗境界：</p><blockquote><p>身为程序员，没事不要写程序。</p><footer><strong>班长</strong></footer></blockquote><p>事实上，社区里已经存在近 1000 个别人写好的 Workflow，你可以在 Alfred 的官方网站看到推荐的常用 <a href="https://www.alfredapp.com/workflows/" target="_blank" rel="noopener">Workflow</a>，你也可以到 <a href="http://www.packal.org" target="_blank" rel="noopener">Packal</a> 这个社区里，搜索更多适合你的 Workflow。</p><p>通过双击下载下来的 <code>.workflow</code> 文件，就可以导入 Alfred 里了。下载的页面会说明使用方法，一般都是关键词命令，后接参数。比如这个叫做 <a href="http://www.packal.org/workflow/simple-timer" target="_blank" rel="noopener">Simple Timer</a> 的 Workflow，用的是这样的语法：<code>timer [时间] [信息]</code> （设定一段时间后弹出对应的信息内容进行提醒）<br></p><p>不过在很多情况下，每个人的生产方式是高度差异化的，所以最终，我们很可能还是不得不自己动手。</p><p>根据「行动先于思考」的学习原则，我们先不管为什么和是什么，而是马上动手实现一个简单的 Workflow 再吐槽。</p><p>PS：<br>注意哦，一定要不加思索地跟着往下做，不要管为什么哈……^_^</p><hr><h3 id="Wi-Fi-Toggle"><a href="#Wi-Fi-Toggle" class="headerlink" title="Wi-Fi Toggle"></a>Wi-Fi Toggle</h3><p>这一小节，我们将创建一个打开和关闭 Wi-Fi 的 Workflow</p><ul><li><p>第一步，打开 Alfred 的 Preferences，点击 <code>+</code> 新建一个空白的 Workflow </p></li><li><p>第二步，填入下图的数据（你可以把 Create By 这栏的作者名换成你自己） </p></li><li><p>第三步，黑区域右键新建 Workflow 对象：「 Inputs 」-&gt;「 Keyword 」 </p></li><li><p>第四步，如下图设置 Keyword 对象的各个参数，并保存： </p></li><li><p>第五步，右键新建第二个 Workflow 对象：「 Actions 」-&gt;「 Run Script 」 </p></li><li><p>第六步，如图所示设置 Run Script 对象，并保存：<br>其中，填入 Script 一栏的代码如下</p><pre><code class="lang-bash">networksetup -setairportpower en0 $1## 如果你在终端(terminal)中直接输入这段代码可以开关 Wifi## 不过在终端(terminal)里，上面的 $1 要替换成「 on 」或者「 off 」</code></pre></li><li><p>第七步，选中 Keyword 对象，拖拽边缘的凸起，连接 Run Script 对象： </p></li></ul><p>小功告成！现在可以通过 Alfred 使用 <code>wifi [on/off]</code> 指令快速开关 Wifi 了<br></p><p><code>快速解说:</code><br>上述实现 Wi-Fi Toggle 的 Workflow 本质上是实现终端中的一段命令：</p><pre><code class="lang-bash">$ networksetup -setairportpower en0 on## 在终端(terminal)中直接输入这段代码可以打开 Wifi## 注意到，在终端(terminal)里，「 第六步 」中的 $1 要替换成「 on 」或者「 off 」##「 第六步 」中的 $1 其实代表的是 Keyword 对象中传过来的参数，即「 on 」或者「 off 」##「 第七步 」的连接操作指明了参数的传递方向：「 Keyword 」-&gt;「 Run Script 」</code></pre><hr><h3 id="按需学习"><a href="#按需学习" class="headerlink" title="按需学习"></a>按需学习</h3><p>从上面的例子里我们不难发现，创建 Alfred 的 Workflow 大体只有三个环节：</p><ul><li><p>建立各种功能对象（Object）</p></li><li><p>设计各参数（Argument）在这些对象（Object）之间的传递方向</p></li><li><p>按照所设计的参数（Argument）传递方向连接这些对象（Object）</p></li></ul><p>短时间掌握所有对象的用法是非常反人类的，我们采用「 <strong>需要时再说</strong> 」的哲学，所以这里只需要学会以下关于搜索的两招就行了：</p><ol><li><p>第一招，通过左下角的「 + 」-&gt;「 Getting Started 」建立出 Workflow ，这些 Workflow 介绍了常用的对象（Object）和 常用的 Worflow 套路 </p></li><li><p>第二招，双击对象（Object）可以调出该对象的设置面板，单击左下角的问号可以调出该对象的使用文档，里面有例子教你如何使用</p></li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>基本上，如果你做完了本教程 WiFi 的 Workflow ，你就已经入门。</p><p>如果你花半小时把上面第一招中提到的「 Getting Started 」里的十个 Workflow 看过一遍，你就已经具备所有关于 Workflow 的知识，能看懂并修改别人的 Workflow 了。</p><p>然而，实现复杂功能（所谓 <em>Simplicity is hidden complexity</em>，让生产力提高好几个量级的超实用型 Workflow 通常是复杂的）需要的是 Workflow 之外的技能，比如要会使用网站的 API，比如会使用 Ruby 、Python 之类的编程语言等等，而这些技能已经超出了本教程的篇幅，需要大家自行修炼。</p><p>了解了 Alfred 的 Workflow 功能仅仅只是让我们的技能池里又多了一块积木，这块积木需要搭配其他积木才能正常使用。上述教程让大家学会了 Workflow 如何搭配其他积木进行使用，至于如何获得其他积木，则是另一个话题了。通常班长会建议优先修改别人已经写好的 <a href="http://www.packal.org" target="_blank" rel="noopener">Workflow</a> ，正像他庸俗境界描述的那样：</p><blockquote><p>身为程序员，没什么事的话……不要写程序。</p><footer><strong>班长</strong></footer></blockquote><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Mac Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为 Github 上的 Hexo 博客绑定个性域名</title>
      <link href="/2016/10/09/customize-your-blog-domain/"/>
      <url>/2016/10/09/customize-your-blog-domain/</url>
      
        <content type="html"><![CDATA[<p>使用 Hexo 部署博客之后，尽管可以通过 <a href="https://你的用户名.github.io" target="_blank" rel="noopener">https://你的用户名.github.io</a> 来访问，但由于各种各样的原因，博主们通常倾向于更换这个教条式的域名，使用属于自己的个性域名。以下就是一个简单的教程。</p><hr><h3 id="域名购买"><a href="#域名购买" class="headerlink" title="域名购买"></a>域名购买</h3><p>推荐到 <a href="https://www.namesilo.com" target="_blank" rel="noopener">namesilo</a> 上注册账号购买，不仅比 <a href="https://www.godaddy.com" target="_blank" rel="noopener">Godaddy</a> 便宜，本身还免费提供隐私服务（即不公开域名持有者的信息）。对了， <a href="https://www.namesilo.com" target="_blank" rel="noopener">namesilo</a> 支持支付宝付款。</p><hr><h3 id="创建-CNAME-文件"><a href="#创建-CNAME-文件" class="headerlink" title="创建 CNAME 文件"></a>创建 CNAME 文件</h3><p>使用 <code>hexo d</code> 命令部署时，实际上是将 <code>~/Documents/blog/public</code> 文件夹的内容 push 到 [username].github.io 上，这样会把 <code>CNAME</code> 文件覆盖掉，而把 <code>CNAME</code> 文件添加到 <code>source</code> 文件夹里，可以避免这种情况。</p><p>在 <code>~/Documents/blog/source</code> 目录下新建 <code>CNAME</code> 文件</p><pre><code class="lang-bash">$ cd ~/Documents/blog/source$ touch CNAME</code></pre><p>编辑 <code>CNAME</code> 文件，输入你购买的域名，比如 <code>cps.ninja</code>（没错，整个 <code>CNAME</code> 文件只有一个顶级域名，没有别的内容）</p><p>然后把 <code>CNAME</code> 文件部署到 Github 上</p><pre><code class="lang-bash">$ hexo clean$ hexo g$ hexo d</code></pre><hr><h3 id="设置域名"><a href="#设置域名" class="headerlink" title="设置域名"></a>设置域名</h3><p>访问 <a href="https://www.namesilo.com" target="_blank" rel="noopener">namesilo</a>（或是你购买域名的网站），登陆你的账户，进入设置域名的控制台，做如下设置</p><pre><code>@          A             192.30.252.153@          A             192.30.252.154www      CNAME           chpwang.github.io</code></pre><p>效果如图：<br><img src="/2016/10/09/customize-your-blog-domain/domain_settings.jpg" title="domain settings"></p><p>其中 <code>192.30.252.153</code> 和 <code>192.30.252.154</code> 都是 Github 的地址（该地址现已改变，Github 最新的 IP 地址参见<a href="https://help.github.com/en/articles/troubleshooting-custom-domains#dns-configuration-errors" target="_blank" rel="noopener">这里</a>），而最后一行的 <code>chpwang.github.io</code> 你要换成 <code>你的用户名.github.io</code>（更多详细内容参见 Github <a href="https://help.github.com/en/articles/troubleshooting-custom-domains#dns-configuration-errors" target="_blank" rel="noopener">官方文档</a>）。</p><p>至此，个性域名设置完毕，只需等待生效即可。</p><pre><code>上图 Type 一栏说明    A：  用来指定域名为 IPv4 的地址（如：8.8.8.8），如果需要将域名指向一个IP地址，就需要添加 A 记录 AAAA：  与上述 A 记录的区别是，AAAA 记录用来指定域名为 IPv6 的地址（如：2001:DB8:2de:0:0:0:0:e13）CNAME：  如果需要将域名指向另一个域名，再由另一个域名提供 ip 地址，就需要添加 CNAME 记录</code></pre><p>解释：</p><ul><li>总的来说，设置 A 记录的意思是，当我输入 <code>cps.ninja</code> 这个域名的时候，访问的是 <code>192.30.252.153</code> 这个地址；</li><li>而设置 <code>CNAME</code> 的意思是说，当我访问 <code>chpwang.github.io</code> 这个地址的时候，会跳转到 <code>cps.ninja</code>，之后的过程就和 A 记录相同了，即访问 <code>192.30.252.153</code></li></ul><hr><p>P.S.<br>1、如果你希望将博客部署在国内，可以考虑使用 <a href="http://coding.net" target="_blank" rel="noopener">Coding</a>；<br>2、部署在国内的博客，要注意 CSS 里的字体调用可能因网络问题加载失败；<br>3、可以用 <a href="https://www.dnspod.cn" target="_blank" rel="noopener">DNSPod</a> 而不是自带的域名解析服务，参考<a href="http://shaojunxiao.com/2017/04/01/Hexo-blog-域名解析/" target="_blank" rel="noopener">这里</a>；<br>4、知乎上的<a href="https://www.zhihu.com/question/31377141/answer/103056861" target="_blank" rel="noopener">这个回答</a>也描述了绑定域名的事，也可以看看；</p><p>关于这里域名设置的更多知识和详情，还可参考以下链接：</p><ul><li><a href="http://winterttr.me/2015/10/23/from-dns-to-github-custom-domain/" target="_blank" rel="noopener">从 DNS 到 github pages 自定义域名 — 漫谈域名那些事</a></li><li><a href="http://stackoverflow.com/questions/23375422/how-to-setup-github-pages-to-redirect-dns-requests-from-subdomain-e-g-www-to" target="_blank" rel="noopener">How to setup Github Pages to redirect DNS requests</a></li><li><a href="https://coolcao.com/2016/10/19/从搭建hexo个人博客过程中理解学习DNS解析/" target="_blank" rel="noopener">从搭建hexo个人博客过程中理解学习DNS解析</a></li><li><a href="https://jums.club/config-ssh-for-github/" target="_blank" rel="noopener">hexo绑定个人域名之后，不能访问，已经解决</a></li></ul><hr><h2 id="后续可能遇到的问题"><a href="#后续可能遇到的问题" class="headerlink" title="后续可能遇到的问题"></a>后续可能遇到的问题</h2><p>有时候使用 <code>hexo d</code> 部署更新博客之后，会出现绑定的域名指向 github 404 的情况。使用 <code>username.github.io</code> 能正常访问博客页面，但使用自定义域名（比如 <code>cps.ninja</code>）则会出现 github 404 页面。</p><p>如果不是上面提到的 <code>CNAME</code> 文件被覆盖掉的问题，那原因可能是 Github Pages 的 Settings 下 Custom domain 清空了，需要重新设置。</p><p>到博客的 repository 页面的 <code>Settings -&gt; Pages -&gt; Custom domain</code> 输入域名，应该就解决了。如果失败提示 <strong>“the CNAME is already taken”</strong>，那就需要去 <a href="https://support.github.com/request/pages" target="_blank" rel="noopener">GitHub Support</a> ，选择 <strong>Help with a custom domain</strong> 发 ticket（工单）求助。</p><p>求助前最好要先认证你的域名，确定这个域名的所有权确实在你那。具体操作是： <code>头像 -&gt; Settings -&gt; Pages -&gt; Add a domain</code> ，然后根据提示，去域名服务商那里新增一个 TXT 的 DNS 解析记录进行验证。<br>更详细的操作请查看 <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/verifying-your-custom-domain-for-github-pages" target="_blank" rel="noopener">Verifying your custom domain for GitHub Pages</a>。</p><p>参考链接：<br><a href="https://preblog.wangqy.top/2018/05/26/CNAME/" target="_blank" rel="noopener">github pages 出现 “the CNAME is already taken” 的解决办法</a><br><a href="https://cloud.tencent.com/developer/article/1452987" target="_blank" rel="noopener">GitHub Pages 对自定义域名支持 HTTPS</a><br><a href="https://senzyo.net/2022-5/" target="_blank" rel="noopener">GitHub Pages使用问题 - 自定义域名已被占用</a></p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多台电脑间的 Hexo 博客同步</title>
      <link href="/2016/10/08/sync-blog-between-multiple-Macs/"/>
      <url>/2016/10/08/sync-blog-between-multiple-Macs/</url>
      
        <content type="html"><![CDATA[<p>由于文化程度低，所以只能靠使用多台电脑来满足随时写文章的需要。这里记录一下多电脑间同步博客的方法。</p><hr><h3 id="配置第一台电脑"><a href="#配置第一台电脑" class="headerlink" title="配置第一台电脑"></a>配置第一台电脑</h3><p>确保你在 <code>~/Documents/blog</code> 文件夹里</p><pre><code class="lang-bash">$ pwd~/Documents/blog    ## 确保在正确的目录下</code></pre><p>使用 Mac 自带的 Git 对 <code>~/Documents/blog</code> 文件夹进行追踪</p><pre><code class="lang-bash">$ pwd~/Documents/blog    ## 确保在正确的目录下$ git init$ git add .$ git commit -m &quot;initial commit&quot;</code></pre><p>到 Github 上新建一个 <code>repository</code>，命名为 <code>blog</code>（可以选自己喜欢的名字），然后把本地的 <code>blog</code> 文件夹推送到 Github 上</p><pre><code class="lang-bash">$ pwd~/Documents/blog    ## 确保在正确的目录下$ git remote add origin git@github.com:你的用户名/blog.git$ git push -u origin master</code></pre><p>找到自己喜欢的 Theme（主题），然后 fork 一份 Theme 的代码到自己的 Github 账户下面<br><img src="/2016/10/08/sync-blog-between-multiple-Macs/how_to_fork.jpg" title="fork a theme project"></p><p>之所以要 fork 一份，是因为你很可能要进一步开发这个 Theme，把它改成你想要的样子。比如我的博客的主题选择的是 <a href="https://github.com/gaoryrt" target="_blank" rel="noopener">Gaoryrt</a> 老师开发出来的主题 <a href="https://github.com/gaoryrt/hexo-theme-pln" target="_blank" rel="noopener">pln</a>，但该主题只有 60% 的部分是我喜欢的，要改的地方非常多。</p><p>有些玩家是主题（Themes）和文章（Posts）混在一起进行版本控制的，我则喜欢将两者分开维护，即<strong>「内容」和「样式」分离</strong>。所以接下来的操作就是要把 Theme 独立成为一个模块，在 Git 的版本控制下进行维护和修改。</p><p>这里使用 Git 的 Submodule 功能，将博客的 Theme（主题样式）模块化出去</p><pre><code class="lang-bash">$ cd ~/Documents/blog/themes$ git submodule add git@github.com:你的用户名/hexo-theme-pln.git</code></pre><p>上面的两条命令会把你 fork 过来的主题下载到 <code>~/Documents/blog/themes</code> 目录下，由于主题名为 <code>pln</code>，所以我们会看到 <code>~/Documents/blog/themes</code> 目录下多了一个文件夹 <code>pln</code>，主题就存在这个文件夹里。</p><p>此外 <code>git@github.com:你的用户名/hexo-theme-pln.git</code> 这串地址可以在你的 Github 账户下对应的 <code>repository</code> 中找到（当 fork 某个 project 之后，会在你的 Github 账户下生成一个  <code>repository</code> ）<br><img src="/2016/10/08/sync-blog-between-multiple-Macs/find_submodule_address.jpg" title="find submodule address"></p><p>仔细的你可能已经注意到 <code>~/Documents/blog/themes/pln</code> 目录下有个 <code>.git</code> 文件，因为 <code>pln</code> 文件夹在被生成之后就被 Git 追踪了，这也意味着无需再在 <code>pln</code> 文件夹里使用 <code>git init</code> 来对它开启追踪。</p><p><strong>注意！</strong>这时我们面对的是一个普通玩家从未遇到的情况：</p><blockquote><p><code>一个被 Git 追踪的文件夹里（blog 文件夹）存在着另一个同样被 Git 追踪的文件夹（pln 文件夹），这两个文件夹的根目录下都有一个 .git 文件</code></p></blockquote><p>Don’t panic! 这正是 Git 的 Submodule 功能的效果，目前一切正常。现在我们暂时先不管细节，带着这些看起来很重要的不自在继续前行。</p><p>好，我们接着进入 <code>pln</code> 文件夹，并使用 <code>git checkout master</code>切换到 Git 的主分支 Master（之所以需要切换，是因为新生成的 Submodule 文件夹，即 <code>pln</code> 下，默认不在任何分支上，不像平时我们对某个文件夹 <code>git init</code> 之后就默认在主分支 Master）</p><pre><code class="lang-bash">$ cd ~/Documents/blog/themes/pln$ git checkout master</code></pre><p>然后修改 <code>pln</code> 文件夹里的内容得到满意的风格（如果已经满意可以不修改）</p><pre><code class="lang-bash">$ pwd~/Documents/blog/themes/pln  ## 当前在 pln 目录，注意下面 sass 命里涉及到的相关路径$ git branch* master                     ## 确保在 master 分支上，不然 commit 就跑到 detached HEAD 上了## 对主题的样式做各种改动（和平时的 Git 操作一样）## 注意若是修改了 CSS 样式，要压缩生成 m.min.css 才能生效，网站因为最终采用的 CSS 是 m.min.css## main.scss 和 m.min.css 文件都在 blog/themes/pln/source/css 目录下$ sass --style compressed source/css/main.scss:source/css/m.min.css$ git add .$ git commit -m &quot;change pln theme to meet my taste&quot;</code></pre><p>每次修改 <code>pln</code> 文件夹里的 <strong>css</strong> 代码后，只要运行上述 <code>sass</code> 命令，刷新<strong>本地</strong>网站就能看到修改后的 CSS Style 样式效果。还可以借助 <a href="https://www.google.com/chrome/" target="_blank" rel="noopener">Chrome</a> 等浏览器的<strong>开发者模式</strong>来辅助探索 CSS 的效果。如此反复修改、运行、观察，直到满意为止。</p><p>在 <code>pln</code> 里各种 <code>commit</code> 之后，我们终于感觉可以 <code>push</code> 了，于是</p><pre><code class="lang-bash">$ pwd~/Documents/blog/themes/pln     ## 确保在正确的目录下$ git push</code></pre><p>这样一来，Github 上我们之前 fork 过来的主题 <code>pln</code> 就成功同步更新了。</p><p>这时我们切换到 <code>blog</code> 文件夹，运行 <code>git status</code>，可以看到 Terminal 提示 <code>pln</code> 文件夹有新的改动需要 commit</p><pre><code class="lang-bash">$ cd ~/Documents/blog$ git statusOn branch masterYour branch is up-to-date with &#39;origin/master&#39;.Changes not staged for commit:  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)  (commit or discard the untracked or modified content in submodules)  modified:   themes/pln (modified content)no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</code></pre><p>于是我们</p><pre><code class="lang-bash">$ pwd~/Documents/blog     ## 注意当前目录是 blog$ git add themes/pln$ git commit -m &quot;change submodule pln theme to meet my taste&quot;$ git push</code></pre><p>完成后，我们 Github 上 <code>blog</code> 所对应的 <code>repository</code> 也就成功和同步更新了。</p><hr><h3 id="中场解说"><a href="#中场解说" class="headerlink" title="中场解说"></a>中场解说</h3><p>感谢各位玩家勇敢地保持疑惑直到现在，对于已经迷路的各位我准备用一个简单的总结把大家拉回来：</p><ul><li><p>以上对<strong>第一台电脑</strong>的各种操作一共涉及 <code>3</code> 个 Github 上的 <strong><code>Repository</code></strong>：</p><ul><li><code>你的用户名.github.io</code>（如 chpwang.github.io）</li><li><code>blog</code></li><li><code>pln</code></li></ul></li><li><p>Hexo 会把 <code>blog</code> 文件夹里的各种内容转化成 html 文件部署到 <code>你的用户名.github.io</code> 这个 <code>repository</code> 上，所以互联网上通过 <code>http://你的用户名.github.io</code>这个网址看你的博客的人实际上看到的是 <code>你的用户名.github.io</code> 这个 <code>repository</code> 里的内容</p></li><li><p><code>blog</code> 这个 <code>repository</code> 是用来在别的电脑上同步博客内容的。Hexo 每次部署博客都要使用 <code>blog</code> 文件夹里的内容来生成相应的 html 文件。如果我们选择通过 <code>你的用户名.github.io</code> 这个 <code>repo</code> 而不是 <code>blog</code> 来同步博客的话，这意味着我们需要直接编辑 html（<code>你的用户名.github.io</code> 这个 <code>repo</code> 里全是 html 文件），进而无法享受 Markdown 格式排版带来的便利。</p></li><li><p>作为 Submodule 的文件夹（也就是 <code>pln</code>）如果改动了，则需要 commit 两次来保存（<code>pln</code> 文件夹里 commit 一次，<code>blog</code> 文件夹里也要 commit 一次），相应的也要通过两次 <code>git push</code> 来同步远程的两个 <code>repo</code></p></li><li><p><code>blog</code> 文件夹里的改动仅需要 commit 一次保存</p></li></ul><hr><h3 id="配置第二台电脑和之后的电脑"><a href="#配置第二台电脑和之后的电脑" class="headerlink" title="配置第二台电脑和之后的电脑"></a>配置第二台电脑和之后的电脑</h3><p>搞定了第一台电脑的配置，之后就简单多了。</p><p>首先必须确保第二台电脑安装了 <a href="http://brew.sh" target="_blank" rel="noopener">Hombrew</a> , Node.js, <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 和 <a href="http://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="noopener">SASS</a></p><pre><code class="lang-bash">## 这条命令安装 Homebrew$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;## 上条命令完成后，就可以通过 Homebrew 安装 Node.js$ brew install node## Node.js 安装后，会附带 npm（node package manager）工具，可用它来搜索、下载、管理 Node.js 套件## 接下来使用 npm 安装 Hexo$ npm install hexo-cli -g## 安装 SASS - 将 .scss 文件编译成 .css 文件的工具，后面会用于压缩整合 main.scss 文件## 压缩命令为: sass --style compressed main.scss:m.min.css    $ brew install node-sass</code></pre><p>然后在第二台电脑上 <code>git clone</code>，先拉 parent repository，也就是 <code>blog</code></p><pre><code class="lang-bash">$ pwd~/Documents    ## 选择一个目录准备 git clone$ git clone git@github.com:你的用户名/blog.git## 这条命令会在当前目录下生成一个 blog 文件夹</code></pre><p><strong>注意</strong>，<code>git clone</code> 之后，虽然 <code>~/Documents/blog/themes/pln</code> 文件夹存在，但里面是空的，因为这是我们第一次在这台电脑上建立 <code>blog</code> 这个文件夹。这第一次，需要我们使用以下两条命令同步作为 Submodule 的文件夹，也就是 <code>pln</code></p><pre><code class="lang-bash">$ pwd~/Documents/blog## 注意此时的目录是 blog，我们要在这个 Parent Directory 下运行下两条命令$ git submodule init       ## 这条命令会读取所有 submodule 的远端地址，这里是 pln 这个 repo 的地址$ git submodule update     ## 这条命令会把 pln 这个 repo 的内容从远端拉下来</code></pre><p>第一次建立之后，如果远端的 <code>pln</code> 文件夹有更新，只需使用 <code>git submodule update</code> 来同步即可，不必再运行 <code>git submodule init</code> 了</p><pre><code class="lang-bash">## 如果不是第一次建立属于 Submodule 文件夹，只需要运行 git submodule update 命令即可（文件夹已存在，例如本例子中的 pln 文件夹就属于 Submodule 文件夹）$ pwd~/Documents/blog## 注意此时的目录是 blog，我们要在这个 Parent Directory 下运行 git submodule update$ git submodule update</code></pre><p><strong>接下来这步很重要</strong>，因为非常反直觉。<br>第一，第一次使用 <code>git submodule update</code> 同步后，我们需要手动切回 master 分支。</p><p>之所以要运行 <code>git checkout master</code> 手动切分支，是因为<strong>每当</strong>我们运行 <code>git submodule update</code> 后，submodule 文件夹（即文件夹 <code>pln</code>）的 Git 默认会指向一个 detached HEAD，也就是说，我们当前并没有处于任何分支上，所以我们需要 <code>git checkout</code> 切换回 master 分支，否则我们的在 <code>pln</code> 文件夹下的所有 commit 都不在任何分支上。</p><p>如果不是第一次使用 <code>git submodule update</code>，当远端有更新内容被拉下来时，所更新的内容会在一个 detached HEAD 上，我们要通过下面的操作将它合并到 master 分支上。</p><pre><code class="lang-bash">$ cd ~/Documents/blog/themes/pln     ## 注意 pln 是作为 submodule 的文件夹$ git status                         ## 查看状态可看到当前处在一个 detached 的 commit 上* (HEAD detached at e522ed6)  master$ git checkout master         ## 手动切回 master 分支Previous HEAD position was e522ed6... change logo againSwitched to branch &#39;master&#39;$ git merge e522ed6           ## 将 detached 的 commit 合并到 master 分支上</code></pre><p>假设你忘了切回 master 分支就改动 <code>pln</code>，那怎么办？别怕，先 commit 保存你的改动，然后像上面一样切回 master 分支，再把 commit 合并到分支上</p><pre><code class="lang-bash">$ git add .$ git commit -m &quot;make some changes but forget to change to branch master&quot;$ git checkout master         ## 手动切回 master 分支Warning: you are leaving 1 commit behind, not connected toany of your branches:  bcfc7fb make some changes but forget to change to branch masterIf you want to keep it by creating a new branch, this may be a good timeto do so with: git branch &lt;new-branch-name&gt; bcfc7fbSwitched to branch &#39;master&#39;Your branch is up-to-date with &#39;origin/master&#39;.$ git merge bcfc7fb           ## 使用 hash 值 bcfc7fb，将其对应的 commit 合并到 master 分支上</code></pre><p>这样，就可以救回你对 <code>pln</code> 文件夹的改动了。</p><p>大致对以上有印象后，现在切换回 <code>blog</code> 文件夹运行 <code>npm install</code> 。这里需要注意的是，如果使用代理运行 npm install 可能会报错乃至失败（例如 proxychains4 npm install），如果失败请不要使用代理。一些其他报错可参考<a href="https://zhangangs.github.io/2018/07/10/解决npm警告：WARN%20registry%20Unexpected%20warning%20for%20httpsregistry.npmjs.org%20Miscellaneous%20Warning%20EINTEGRITY/" target="_blank" rel="noopener">这里</a>或<a href="https://blog.csdn.net/genius_yym/article/details/84645915" target="_blank" rel="noopener">这里</a>。</p><pre><code class="lang-bash">$ cd ~/Documents/blog$ npm install         ## 执行这条命令，npm 会根据 package.json 文件安装所有需要的套件## 刚才 git clone 把云端的文件拉下来之后，blog 文件夹下一个叫 package.json 的文件也被拉了下来，npm install 命令会通过它得知需要安装的套件# 可以使用以下两个命令来更新和查看 package.json 里所记录的套件$ npm update    ## 更新套件$ npm outdated  ## 查看哪些套件过期（即有新版本）</code></pre><p><code>这里要提示一下，npm 这种东西，安全性其实很可疑，个人博客将就着用就行了，但不建议用在敏感产品上，参见</code><a href="https://ruby-china.org/topics/38345" target="_blank" rel="noopener"><code>这篇帖子</code></a></p><p>至此，第二台电脑就同步配置完成，可以继续写文章发布了。总结一下：</p><ol><li><p>使用以下命令写文章和发布</p><pre><code class="lang-bash">$ hexo new &quot;文章标题&quot;## 编辑文章......$ hexo clean   ## 清空缓存$ hexo g       ## 生成静态页面至 public 目录$ hexo server  ## 开启 Server（默认网址 http://localhost:4000/，&#39;ctrl + c&#39; 退出）$ hexo d       ## 部署到 GitHub</code></pre></li><li><p>更改 Submodule 文件夹后（比如 <code>pln</code> 文件夹）需要 commit 两次，里外各一次。同样地，此时需要两次 <code>git push</code> 来同步远程的两个 <code>repo</code></p></li><li><p>更改 parent 文件夹 <code>blog</code> 后只需要 <code>git commit</code> 一次，<code>git push</code> 一次</p></li><li><p>更新本地文件时，先在外层文件夹 <code>blog</code> 中运行 <code>git pull</code> 来更新 <code>blog</code>，然后运行 <code>git submodule update</code> 来更新 submodule 文件夹</p></li><li><p>每次运行 <code>git submodule update</code> 后，submodule 文件夹里的 Git 默认会指向一个 <strong>detached HEAD</strong>，要记得切回 master 分支合并一下从远程更新过来的 commits 再继续。确实不小心忘记了可以回到上面的教程看一下怎么救回来。</p></li><li><p>有时运行 <code>git submodule update</code> 同步子模块时会出现以下报错。这是因为前一台设备在改动 submodule 文件夹之后（本例中为 <code>themes/pln</code> ），忘记使用 <code>git push</code> 推送到远程服务器了，所以命令在请求远程 Server 时，就找不到 <code>commit e8e0dc...</code>（总之，更新 submodule 文件夹需要两次 <code>git push</code>，别忘了哈）</p><pre><code class="lang-bash">## 由于只在 blog 文件夹里 git push，忘记在 blog/themes/pln 里 git push，所以 Git 知道 commit e8e0dc... 的存在，但是却找不到它$ git submodule updateerror: Server does not allow request for unadvertised object e8e0dc399b38f6ba01720c65bd64a1bdb9b68755Fetched in submodule path &#39;themes/pln&#39;, but it did not contain e8e0dc399b38f6ba01720c65bd64a1bdb9b68755. Direct fetching of that commit failed.</code></pre></li><li><p>如果 Node.js 的套件在前一台设备上有更新，则意味着 Git 记录了新的 <code>package.json</code> 文件，此时从 submodule 文件夹里切换回 <code>blog</code> 文件夹运行 <code>npm install</code> 更新即可（命令参考上面的代码）</p></li></ol><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Hexo 搭建自定义博客</title>
      <link href="/2016/10/08/how-to-blog-with-hexo/"/>
      <url>/2016/10/08/how-to-blog-with-hexo/</url>
      
        <content type="html"><![CDATA[<p>Hexo 是一个基于 <a href="https://nodejs.org/en/about" target="_blank" rel="noopener">Node.js</a> 的静态网站生成器。它可以将 Markdown、Jade 或者其他模板语言的文件转换成静态网页，并且支持丰富的主题和插件。配合 <a href="https://github.com" target="_blank" rel="noopener">Github</a> 就可以搭建自己的博客。</p><p>如果不是闲，或无法忍受其他商业博客方案，不建议用 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>，因为自由意味着繁琐。</p><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 博客的步骤思路大同小异，但每一步都有多种实现方法，接下来的操作都是在 Mac 电脑上的 Terminal（终端）里进行的。</p><hr><h3 id="使用-Hexo-前的环境准备"><a href="#使用-Hexo-前的环境准备" class="headerlink" title="使用 Hexo 前的环境准备"></a>使用 Hexo 前的环境准备</h3><p>安装 <a href="http://brew.sh" target="_blank" rel="noopener">Hombrew</a></p><pre><code class="lang-bash">$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code></pre><p>使用 <a href="http://brew.sh" target="_blank" rel="noopener">Hombrew</a> 安装 Node.js</p><pre><code class="lang-bash">## $ brew install node  # 新版 node 和 hexo 不再兼容，需通过 nvm 来安装老版本的 node</code></pre><p>Node.js 安装后，会附带 npm（node package manager）工具，可用它来搜索、下载、管理 Node.js 套件。</p><p>使用 <a href="http://brew.sh" target="_blank" rel="noopener">Hombrew</a> 安装 <a href="https://formulae.brew.sh/formula/node-sass" target="_blank" rel="noopener">node-sass</a></p><pre><code class="lang-bash">## 安装 SASS - 将 .scss 文件编译成 .css 文件的工具，后面会用于压缩编译 hexo 博客的 main.scss 文件## 压缩命令为: sass --style compressed main.scss:m.min.css    $ brew install node-sass</code></pre><p>接下来使用 npm 安装 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a></p><pre><code class="lang-bash">$ npm install hexo-cli -g</code></pre><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a> 套件，其用于之后一键部署 blog 到 Github 上</p><pre><code class="lang-bash">$ npm install hexo-deployer-git --save</code></pre><p>安装 <a href="https://github.com/hexojs/hexo-generator-index" target="_blank" rel="noopener">hexo-generator-index</a> ，其用于单独设置主页（index）的文章（posts）数量——分页（pagination）功能会用到</p><pre><code class="lang-bash">$ npm install hexo-generator-index --save</code></pre><p>安装 <a href="https://github.com/hexojs/hexo-generator-archive" target="_blank" rel="noopener">hexo-generator-archive</a> ，其用于单独设置归档页面（archives）的文章数量——分页功能会用到</p><pre><code class="lang-bash">$ npm install hexo-generator-archive --save</code></pre><p><strong>其它补充说明</strong>：</p><ul><li><p>这里的 <code>--save</code> 参数会让 npm 在安装 hexo-deployer-git 之后自动将它写入 package.json 文件里，这样之后我们<a href="/2016/10/08/sync-blog-between-multiple-Macs/">多电脑间同步博客</a>就不需要再单独运行这条命令了，只需要 npm install ，当然了，这条命令是<code>幂等</code>的（即该命令运行若干次和运行一次的效果一样），所以再运行一次问题也不大。该参数的具体描述可参考<a href="http://stackoverflow.com/questions/19578796/what-is-the-save-option-for-npm-install" target="_blank" rel="noopener">这里</a>。</p></li><li><p>目前使用 <code>npm install xxx</code> 命令安装模块时，似乎不再需要 <code>--save</code> 参数了<a href="http://blog.csdn.net/aaa333qwe/article/details/78021704" target="_blank" rel="noopener">。</a></p></li><li><p>最新版本的 Node 有 Bug（Node 14 之后），和 hexo 不兼容：后续使用 <code>hexo d</code> 命令部署到 Github 的过程会报错。此时等不了更新修复可以先安装旧版（比如 <a href="https://formulae.brew.sh/formula/node@12#default" target="_blank" rel="noopener">Node 12</a> ）来确保 Hexo 能用。具体来说就是，先卸载<strong>当前</strong>版本的 node ，然后安装<strong>旧版本</strong>的 Node ：</p><pre><code class="lang-bash"># Node 和 hexo 不兼容后的报错信息$ hexo d...FATAL Something&#39;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.htmlTypeError [ERR_INVALID_ARG_TYPE]: The &quot;mode&quot; argument must be of type number. Received an instance of Object......</code></pre><p><code>最新说明：当前 node 12 已经 EOL（End Of Life），不能用 homebrew 来安装老版本的 Node.js 了，要用 nvm</code><br><code>此外，兼容 hexo 的最后一版 Node 是 v13.14 ，所以今后就用 v13.14 版的 Node</code></p><pre><code class="lang-bash"># 重新安装 Node 要先删除。从 npm 开始删# 若此前 npm 是通过 brew 安装的，就用 brew uninstall npm 指令删除$ brew uninstall npm# 若此前 npm 是单独安装的（比如官网下载安装包），则用 npm uninstall npm -g 指令删除$ npm uninstall npm -g# 删除当前的 Nodejs - 若此前是通过 brew 安装的 node$ brew uninstall node# 删除当前的 Nodejs - 若是自行独立安装（如官网下载）的 node$ sudo rm -rf /usr/local/lib/node_modules# 重新安装指定版本的 Node 来确保兼容性 - 下面是安装 Node 12 的版本# $ brew install node@12    # 这行指令已经不能安装 node@12</code></pre><p><code>通过 fish 来安装 nvm ，然后再通过 nvm 安装和选用 v13.14 版的 Node</code></p><pre><code class="lang-bash">## 通过 fisher 安装 nvm.fish$ fisher install jorgebucaran/nvm.fish## 安装并使用最新版本的 Node.js$ nvm install latest## 查看远程有哪些 Node.js 版本可以下载$ nvm list-remote    ...    ...    v13.14.0      v14.0.0     v14.1.0    ...    ...## 安装 v13.14.0 版本的 Node.js$ nvm install v13.14.0## 切换到 v13 版本的 Node.js 来使用## 由于只安装了 v13.14.0 版本，本地的 v13 只有它，所以会切换到这个版本$ nvm use v13## 显示本地有哪些版本的 Node.js 以及当前正在使用的版本$ nvm list     system ▶ v13.14.0</code></pre><p>参考链接：<br><a href="https://ammomercy.cn/2021/03/08/2021-03-08-解决hexo-d-The-modeargument-must-be-integer.-问题/" target="_blank" rel="noopener">解决 node.js@14+ 与 hexo 不兼容：作者选择安装 Node 13.14</a><br><a href="https://stackoverflow.com/questions/12607155/error-the-brew-link-step-did-not-complete-successfully/12751548" target="_blank" rel="noopener">先用 <code>npm uninstall npm -g</code> 卸载 <strong>npm</strong> 。再 <code>brew install node@12</code> 安装旧版 <strong>node</strong>，最后再 <code>brew link node@12</code></a>【主要看来自 <a href="https://stackoverflow.com/users/3085/jim-geurts" target="_blank" rel="noopener">@Jim Geurts</a> 和 <a href="https://stackoverflow.com/users/179583/natevw" target="_blank" rel="noopener">@natevw</a> 网友的回复】</p></li></ul><hr><h3 id="开始使用-Hexo"><a href="#开始使用-Hexo" class="headerlink" title="开始使用 Hexo"></a>开始使用 Hexo</h3><p>使用 Hexo 新建一个文件夹命名为 blog ，该文件夹将作为你的博客网站</p><pre><code class="lang-bash">$ hexo init ~/Documents/blog      # 在 ~/Document 这个目录下会出现一个新的文件夹叫 blog，里面包含一些关于 hexo 的基础文件</code></pre><p>进入新建的文件夹</p><pre><code class="lang-bash">$ cd ~/Documents/blog</code></pre><p>刚才 hexo init 命令已经在 blog 文件夹下生成了一个叫 <code>package.json</code> 的文件，npm 会通过它得知需要安装的套件<br>所以接下来使用 npm 安装相关套件</p><pre><code class="lang-bash">$ npm install</code></pre><p>使用 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 开启服务器</p><pre><code class="lang-bash">$ hexo s</code></pre><p>打开浏览器，输入网址 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就能查看刚刚建好的博客页面。目前博客只有一篇名为 <code>Hello World</code> 的文章。</p><p>在刚才的 Terminla（终端）中使用 <code>control + C</code> 的组合键即可关闭服务器。</p><hr><h3 id="开始写文章"><a href="#开始写文章" class="headerlink" title="开始写文章"></a>开始写文章</h3><pre><code class="lang-bash">$ pwd~/Documents/blog</code></pre><p>确保你在 <code>~/Documents/blog</code> 文件夹里之后，便可用 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 新建文章</p><pre><code class="lang-bash"># 这个命令会建立一个文件：~/Documents/blog/source/_posts/java-basics.md# 之后就在这个文件里写这篇博客的内容$ hexo new &quot;java basics&quot;</code></pre><p>之后，在 <code>~/Documents/blog/source</code> 这个文件夹里就能看到刚刚新建的，以文章标题命名的文件。点开编辑即可。</p><p>文件内容会包含自动生成的信息头（front matter），直接在下面的位置编辑博客内容就好：</p><pre><code class="lang-plaintext">---title: java basicsdate: 2024-03-23 11:07:28tags:---[... 博客内容（支持 Markdown 和 html 进行排版） ...]</code></pre><p>这里有两点要注意：</p><ul><li>需要使用 Markdown 格式来排版文章</li><li>我写文章用的编辑器是 <a href="https://www.sublimetext.com" target="_blank" rel="noopener">Sublime Text</a></li></ul><hr><h3 id="预览你的文章"><a href="#预览你的文章" class="headerlink" title="预览你的文章"></a>预览你的文章</h3><p>写好文章之后，使用 <code>hexo s</code> 开启服务器，然后打开浏览器，输入网址 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 便可以预览写好的文章。</p><p>修改文章内容之后，只需要刷新浏览器页面就可以立刻看到效果。</p><hr><h3 id="更改文章标签"><a href="#更改文章标签" class="headerlink" title="更改文章标签"></a>更改文章标签</h3><p>你也许会给你的文章打上标签（tags）进行分类，但是后期如果想更改，会发现用 <code>hexo clean</code> 命令无法更新网页上博客的标签。尤其是当你删除某个标签之后，发现旧标签始终存在。</p><p>这时可以手动删除 <code>/blog/public</code> 文件夹，然后再用 <code>hexo clean</code> 和 <code>hexo g</code> 两个命令就可以了。你过去的各种标签被保存（缓存）在 <code>public/tags</code> 文件夹中，只要这个文件夹不更新，你网页上的旧标签也会继续存在。<br><strong>注意</strong>，更改完后本地也许要 <code>hexo s</code> 重开 server 才能看到改动。</p><pre><code class="lang-plaintext">---title: 用 Hexo 搭建自定义博客date: 2016-10-08 14:45:13tags: 旧标签1 旧标签2 旧标签3---[... 博客内容 ...]</code></pre><hr><h3 id="给文章加密"><a href="#给文章加密" class="headerlink" title="给文章加密"></a>给文章加密</h3><p>这里我们使用的是 <a href="https://github.com/D0n9X1n/hexo-blog-encrypt" target="_blank" rel="noopener">hexo-blog-encrypt</a> 这个插件。</p><p><strong>第一步</strong>，使用 npm 来安装 hexo-blog-encrypt：</p><pre><code class="lang-bash"># --save 是确保插件记录在 package.jason 文件中，方便之后多终端同步npm install --save hexo-blog-encrypt</code></pre><p><strong>第二步</strong>，更改根目录下的文件 <code>~/Documents/blog/_config.yml</code> ，增加 <strong>encrypt</strong> 字段：</p><pre><code class="lang-yml"># Security## Docs: https://github.com/D0n9X1n/hexo-blog-encryptencrypt: # hexo-blog-encrypt  abstract: 有东西被加密了, 请输入密码查看  message: 您好, 这里需要密码  wrong_pass_message: 抱歉, 密码不对</code></pre><p><strong>第三步</strong>，将 <strong>password</strong> 字段添加到要加密的文章的信息头，就像这样：</p><pre><code class="lang-plaintext">---title: Hello Worlddate: 2016-03-30 21:18:02password: hello---[... 博客内容 ...]</code></pre><p><strong>第四步</strong>，重启以激活新插件 <a href="https://github.com/D0n9X1n/hexo-blog-encrypt" target="_blank" rel="noopener">hexo-blog-encrypt</a>：</p><pre><code class="lang-bash">$ hexo clean   ## 清空缓存$ hexo g       ## 生成静态页面至 public 目录$ hexo s       ## 打开本地服务器预览效果</code></pre><p>PS:<br>按照上方文章的信息头添加 <strong>password</strong> 字段后，内容中的代码高亮效果会消失<br>输入密码解密文章之后，可以通过页面最底部的按钮来重新加密文章<br>更多设置请参考 <code>hexo-blog-encrypt</code> 的 Github</p><hr><h3 id="把博客部署到-Github-上"><a href="#把博客部署到-Github-上" class="headerlink" title="把博客部署到 Github 上"></a>把博客部署到 Github 上</h3><p>先到 <a href="https://github.com" target="_blank" rel="noopener">Github</a> 上申请一个账号，然后新建一个 <code>repository</code>，命名为：</p><pre><code>你的用户名.github.io</code></pre><p><code>注意！</code>这里需要严格按照这种格式命名，比如我的 Github 用户名是 <code>chpwang</code>，新建的 <code>repository</code> 就要叫：</p><pre><code class="lang-plaintext">chpwang.github.io</code></pre><p>然后在 <code>~/Documents/blog</code> 文件夹里找到 <code>_config.yml</code> 文件进行编辑，加入以下设置：</p><pre><code class="lang-yml"># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo:     github: git@github.com:你的用户名/你的用户名.github.io.git</code></pre><p>接下来，每次更新自己的文章之后，使用这三条命令进行部署</p><pre><code class="lang-bash">$ hexo clean   ## 清空缓存$ hexo g       ## 生成静态页面至 public 目录$ hexo d       ## 部署到 GitHub## 如果部署的时候卡住没反应（no response），可以加上 debug 参数查看输出日志（log）$ hexo d -debug</code></pre><p>部署完毕之后，打开浏览器输入网址 <a href="https://你的用户名.github.io" target="_blank" rel="noopener">https://你的用户名.github.io</a> 就能看到部署上去的博客网页了。</p><p>如果想进阶使用 Hexo 的博客方案，请继续阅读<a href="/2016/10/08/sync-blog-between-multiple-Macs/">多台电脑间的 Hexo 博客同步</a></p><hr><h3 id="后续可能的问题"><a href="#后续可能的问题" class="headerlink" title="后续可能的问题:"></a>后续可能的问题:</h3><p>有时部署会遇到卡住没反应的问题，当使用 <code>hexo d -debug</code> 命令后，发现日志循环输出 <code>0 files generated in 81 ms</code>， 这可能是开启了 Github 的二次验证（2FA）导致的。解决方案要不就是重新绑定 Github 上的 <strong>SSH Key</strong>，或者根据<a href="http://fezl.me/2017/05/20/GitHub二次验证带来的问题/" target="_blank" rel="noopener">这里</a>设置 Personal access tokens 后用 <strong>https</strong> 地址来部署</p><p>如果还没解决，可以参考以下案例：</p><ul><li><a href="https://github.com/hexojs/hexo/issues/3182" target="_blank" rel="noopener">hexo d 部署卡住</a></li><li><a href="http://duanyifu.com/2016/08/23/hexo-deploy-problem/" target="_blank" rel="noopener">hexo deploy 命令卡住的奇怪问题</a></li><li><a href="https://blog.csdn.net/jingbin_/article/details/80617210" target="_blank" rel="noopener">用 hexo d 命令部署的时候总是会卡住很久，查看日志发现信息一直在循环</a></li><li><a href="https://github.com/hexojs/hexo/issues/1478" target="_blank" rel="noopener">hexo deploy 时不断 Error</a></li></ul><hr><p>另一种常见的报错如下，这是网络连接问题导致的，需要换个网络环境。要注意各种终端（Terminal）的流量默认不走代理。要使用增强模式之类的设置。更多内容参考<a href="https://www.alankeene.com/2019/0702/Connection-reset-by-peer.html" target="_blank" rel="noopener">解决 hexo d 提示：ssh_exchange_identification：read：Connection reset by peer 的问题</a></p><pre><code class="lang-bash">$ hexo d......kex_exchange_identification: read: Connection reset by peer......</code></pre><hr><p>第三种报错可能是许久不更新博客导致的。具体表现是，久不更新而再次 <code>hexo d</code> 部署推送更新，本来正常的博客页面会因此推送无法正常显示。<br>有可能会看到 <strong>Github</strong> 的报错：<code>There isn&#39;t a GitHub Pages site here.</code><br>此时，去到博客所在的 <strong>Repository</strong>（通常是<code>用户名.github.io</code>）页面，然后 <code>Settings</code> -&gt; <code>Pages</code> -&gt; <code>Custom domain</code> 重新设置一下自定义的网址。然后等个十几分钟的 <code>DNS check</code> 就好了。等待期间，博客页面可能会显示一片空白（前面的报错没有了，但还看不到任何网页内容）。<br>当然，你的自定义域名需要通过 Github 认证：<a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/verifying-your-custom-domain-for-github-pages" target="_blank" rel="noopener">Verifying your custom domain for GitHub Pages</a></p><hr><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a><code>打赏</code></h3><p><img id="donate_QR_Code" src="/images/donate.jpg" alt="QR Code for donation"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从商业版的 Logdown 到自定义的 Hexo</title>
      <link href="/2016/09/19/From-Logdown-to-Hexo/"/>
      <url>/2016/09/19/From-Logdown-to-Hexo/</url>
      
        <content type="html"><![CDATA[<h3 id="再见，Logdown"><a href="#再见，Logdown" class="headerlink" title="再见，Logdown"></a>再见，Logdown</h3><p>这是一个追求效率的时代。上个世纪的人是无法想象21世纪“竟然”会有人愿意花钱买时间的，更别说花 5、6 万元去上个培训班了。</p><p>从这个角度看，长篇的文字虽然仍然有大量的需求，但「 博客 」这类形式的载体其实已经严重过时，它无法满足这个时代对于知识的快节奏要求。</p><p>可是，博客在另一方面却<strong>始终</strong>悄然影响着另一种群体，那就是写博客的人（没错，不是看的人，而是写的人）。关于这一点，可以先记住一个结论：<strong>写着写着，就成长了</strong>。</p><p><a href="http://logdown.com" target="_blank" rel="noopener">Logdown</a> 这一商业博客平台在最近一段时期扮演了我成长过程里的重要推进角色，它以上手快并搭配有强大的 Markdown 编辑器著称。当然，它也以排版差，长得丑而令人纠结。所以，既然现在高强度的编程训练已经告一段落，也就是时候搬家了。</p><blockquote><p>这个时代的博客对于我们这种人来说，已经变得更多的是写给自己而不是别人看的了，所以自己舒服最重要。舒适的排版也有利于激发写作的欲望。</p><footer><strong>杨一工</strong></footer></blockquote><p>写作有一个<strong>意义深远</strong>的好处，即它能锻炼玩家「从混沌的信息中识别出精华」的能力。当你写得越多，写得越好，你也就更容易识别出哪些是好文章，哪些是好东西，甚至识别出哪些玩家是真正的高手。</p><p>举例来说：</p><blockquote><p>@吃我一记面目全非腿：不懂就问，一体盆很难打理吗？我还以为搞卫生很方便<br>@大喵一号M：非要一体盆就用可丽耐</p><p>根据以上对话，可以得出结论：</p><p>1、<strong>就用</strong>：大喵认为可丽耐是一体盆这个类别中最好用的产品；<br>2、<strong>非要</strong>：可丽耐也不好，有比一体盆更好用的——非要吃屎，就吃巧克力味的；</p><footer><strong>杨一工</strong></footer></blockquote><p>还有另外一个有趣的案例：</p><blockquote><p>小米官方：「小米关注元宇宙周边相关机会，已经进行了不少相关技术储备。」</p><p>翻译如下：</p><p>1、<strong>关注</strong>：旁观；<br>2、<strong>已经</strong>：不准备做多余的动作和投入；<br>3、<strong>不少相关技术</strong>：「元宇宙」就是个大杂烩；<br>4、<strong>储备</strong>：技术早已有了，所谓元宇宙无非是新瓶装旧酒。</p><p>总结一下，小米说的是：「我们不追这个烂热点，我们就袖手旁观。」</p><footer><strong>Stephen Chu</strong></footer></blockquote><p>怎么样？能稍微体会到提取文字背后宝贵信息的威力了吗？</p><p>PS：<br>王大喵对可丽耐的真正观点：“比岩板好打理一万倍，感觉比陶瓷盆还光滑好擦一些，正常使用不会渗色，唯一缺点就是软，最怕保洁阿姨的钢丝球。浴室硬物磕碰概率更低，可丽耐台面可以用厨房，盆不太行。”</p><hr><h3 id="一些怀旧、惶恐和奇遇"><a href="#一些怀旧、惶恐和奇遇" class="headerlink" title="一些怀旧、惶恐和奇遇"></a>一些怀旧、惶恐和奇遇</h3><p>我的博客生涯始于初中。在实力强劲的<strong>心如止水</strong>同学的带领下，于<a href="http://blog.cersp.com" target="_blank" rel="noopener">成长博客::CERSP BLOG</a><strong>一区</strong>建立了人生中的第一个<a href="http://blog.cersp.com/22635.aspx" target="_blank" rel="noopener">“专栏”</a>。说是专栏，实际我应该是当成某种「朋友圈」来维护的，发的都是各种「装X」的东西，现在看来令人赧颜而伤感。</p><p><strong>哼</strong>！还好这网站<strong>主动</strong>把博客里所有让我害羞的内容都清空了（也许是因为网站易主，为了缩减运营成本）。</p><p>……还好在它清空前我已经完成备份。奶奶的，差一点就<strong>痛失</strong>自己当年的“无敌”文字。</p><p>当初这网站可能是跟<strong>止水</strong>关系较好的人运营的，线索来自她的账户名（其文也常上首页，令人眼红）：</p><ul><li><a href="http://blog.cersp.com/index/1000033.jspx" target="_blank" rel="noopener">心如止水</a>博客登录帐号为: 16666@cersp.com</li><li>对比之下，我的博客登录帐号则是: 22635@cersp.com ，没她那么六</li></ul><blockquote><p>爱，它像空气一样，我们赖以生存，却常常忘了它的存在。</p><footer><strong>心如止水</strong></footer></blockquote><p>说起来，我的精英邻居<strong>雪岸雕旗</strong>老师也在上面有<a href="http://blog.cersp.com/17824.aspx" target="_blank" rel="noopener">专栏</a>哦。她初中时期的文字<strong>就已经</strong>非常精英：</p><blockquote><p>两个人可以看见完全一样的东西，却可能拥有完全不一样的思想。</p><p>我懂了……</p><footer><strong>节选自雪岸雕旗的《我懂了》，2006-01-25 18:42</strong></footer></blockquote><blockquote><p>“两个人可以看见完全一样的东西，却可能拥有完全不一样的思想。”<br>——我最喜欢这一句了！<br>…<br>…<br>再远的路，只要去走，就没有到不了的地方。<br>我，也懂了……</p><footer><strong>节选自心如止水评《我懂了》，2006-01-26 16:34</strong></footer></blockquote><p>中学之后的多年时间里，对于写作领域，我处于视而不见的“梦游”状态。然后命运的邂逅发生了。紧接着台妹引导了我的觉醒，让我重新认识到<strong>日记</strong>和<strong>周记</strong>的巨大威力。一切发生得太快，是一次令人<strong>惶恐而后怕</strong>的脱胎换骨。<strong>恐</strong>的是自己配不上如此绝世武功，<strong>怕</strong>的是我的人生轨迹原本通往的只是一个悲惨的虚无之境……</p><p>台妹所参与创立的、她认为是世界上最好用的 <a href="http://logdown.com" target="_blank" rel="noopener">Logdown</a> 网站我<a href="http://chpwang-blog.logdown.com/archives" target="_blank" rel="noopener">上手</a>后觉得极其难用（约翰·罗梅罗的影响），尤其是默认界面。但这不妨碍她通过哄骗我们定期在 Logdown 上写文章的方式传授她的观念：<strong>以教为学。如果没有要教的学生，就把将来的自己当作一个。</strong></p><p>博客和笔记本的区别是，博客要给别人看，比笔记本的文字要更加严肃、更花心思。</p><p>再后来的进阶，就是精英邻居<a href="http://blog.cersp.com/17824.aspx" target="_blank" rel="noopener">雪岸雕旗</a>随口的一句恭维触发开坑的<a href="/tags/Miscellaneous/">连载系列</a>了。该系列非常调皮、很是嚣张、十分<strong>小心眼</strong>。我自己也是常看常新，跟着学到不少。我甚至都不敢经常看，不然会忍不住和杨一工更新最新的思考，很耗时间。</p><hr><h3 id="好吧，Hexo"><a href="#好吧，Hexo" class="headerlink" title="好吧，Hexo"></a>好吧，Hexo</h3><p>Hexo 其实说不上比 Logdown 更好用，不过它对于排版有着更大的潜力。网上的教程虽然很多，可要打造一个自己的风格仍然很麻烦——Theme（也就是博客的个性化主题）的开发者们经常有逻辑混乱的代码，所以你不得不使用十八般武艺，甚至重写一部分代码才能实现你想要的效果。</p><p>这，是自定义的<strong>代价</strong>。</p><p>不管怎么样，捣鼓了两天总算是勉强部署好我要的风格了。星辰大海，我来啦~</p><pre><code class="lang-bash">$ hexo new &quot;postName&quot;       ## 新建文章$ hexo new page &quot;pageName&quot;  ## 新建页面$ hexo clean                ## 清空缓存$ hexo generate             ## 生成静态页面至 public 目录$ hexo server               ## 开启 Server（默认网址 http://localhost:4000/，&#39;ctrl + c&#39; 退出）$ hexo deploy               ## 部署到 GitHub</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Miscellaneous </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
